//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18046
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.18046.
// 
#pragma warning disable 1591

namespace DailyEZ.Web.com.dailyez {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="ServiceSoap", Namespace="http://metroeguide.net/MEGService")]
    public partial class Service : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback DeleteMEG_ContactOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateMEG_PrimaryOperationCompleted;
        
        private System.Threading.SendOrPostCallback MEGCodeExistsOperationCompleted;
        
        private System.Threading.SendOrPostCallback InsertMEGOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateMEGOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetClassificationGroupOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAllClassificationGroupsOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddClassificationGroupOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCustomerMessageOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCustomerMessagesByClientIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateCustomerMessageOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteCustomerMessageOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddCustomerMessageOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetJetnettMessageOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateJetnettMessageOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSentMessagesByClientIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetInboxByClientIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMessagesCountOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteJetnettMessageOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddJetnettMessageOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateBottomRightGraphicOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateBottomLeftGraphicOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetHomePageByClientIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback InsertHomePageOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateHomePageOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMenuLinksByFolderOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMenuLinksOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMenuLinkOperationCompleted;
        
        private System.Threading.SendOrPostCallback CopyFolderToNewClientOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateMenuLinkOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteMenuLinkOperationCompleted;
        
        private System.Threading.SendOrPostCallback InsertMenuLink1OperationCompleted;
        
        private System.Threading.SendOrPostCallback InsertMenuFolderAndClientOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMenuFolderFromClientOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateMenuFolderFromClientOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAllMenuLinksOperationCompleted;
        
        private System.Threading.SendOrPostCallback InsertMenuLinkOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetLinksContainingURLOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetLinksFromPageOperationCompleted;
        
        private System.Threading.SendOrPostCallback InsertLinkOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteLinkOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetLinkOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateLinkOperationCompleted;
        
        private System.Threading.SendOrPostCallback OrganizeLinksByPositionOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetInformationPageOperationCompleted;
        
        private System.Threading.SendOrPostCallback InsertInformationPageOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteInformationPageOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateInformationPageOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetInformationPageByClientIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetContactPageOperationCompleted;
        
        private System.Threading.SendOrPostCallback InsertContactPageOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteContactPageOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateContactPageOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetContactPagesByClientIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCustomerLinkPagesByClientIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback InsertCustomerLinkPageOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteCustomerLinkPageOperationCompleted;
        
        private System.Threading.SendOrPostCallback InsertPageOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPageOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdatePageOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetZipCodeOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeletePageOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAllPagesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetContactPageStaffMemberOperationCompleted;
        
        private System.Threading.SendOrPostCallback InsertContactPageStaffMemberOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteContactPageStaffMemberOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateContactPageStaffMemberOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPropertyListingOperationCompleted;
        
        private System.Threading.SendOrPostCallback InsertPropertyListingOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeletePropertyListingOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdatePropertyListingOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAvailablePropertiesPageOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAvailablePropertiesPagesByClientIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback InsertAvailablePropertiesPageOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteAvailablePropertiesPageOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateAvailableProperitesPageOperationCompleted;
        
        private System.Threading.SendOrPostCallback ClientManagerUpdateAvailableOperationCompleted;
        
        private System.Threading.SendOrPostCallback InsertMEG_SubLicenseOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMEG_SubLicenseOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteMEG_SubLicenseOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateMEG_SubLicenseOperationCompleted;
        
        private System.Threading.SendOrPostCallback InsertMEG_ContactOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMEG_ContactOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteMEG_PrimaryOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateMEG_ContactOperationCompleted;
        
        private System.Threading.SendOrPostCallback InsertMEG_PrimaryOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMEG_PrimaryOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteMLFByFIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteMLFByIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetClientIDFromUserFriendlyURLOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPageViewReportsOperationCompleted;
        
        private System.Threading.SendOrPostCallback TrackPageViewOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDailyEZByClientIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateDailyEZOperationCompleted;
        
        private System.Threading.SendOrPostCallback InsertDailyEZOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAdSeedOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateAdSeedOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteDailyEZOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSendToFriendByIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSendToFriendByClientIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteSendToFriendOperationCompleted;
        
        private System.Threading.SendOrPostCallback InsertSendToFriendOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateSendToFriendOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMEGv3ByClientIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateMEGv3OperationCompleted;
        
        private System.Threading.SendOrPostCallback InsertMEGv3OperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteMEGv3OperationCompleted;
        
        private System.Threading.SendOrPostCallback GetResourceFileByIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetResourceFileByMD5OperationCompleted;
        
        private System.Threading.SendOrPostCallback GetResourceFilesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAllResourceFilesOperationCompleted;
        
        private System.Threading.SendOrPostCallback InsertResourceFileOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteResourceFileOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateResourceFileOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetJetnettEZEnabledClientsOperationCompleted;
        
        private System.Threading.SendOrPostCallback JetnettEZClientEnabledOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetFolderPathOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAllFoldersOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetFolderOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetFavoritesOperationCompleted;
        
        private System.Threading.SendOrPostCallback SaveFavoritesOperationCompleted;
        
        private System.Threading.SendOrPostCallback SaveFavoritesRePositionOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateFavoriteOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetUsesThisMonthOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetUsesInMonthOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMonthlyReportOperationCompleted;
        
        private System.Threading.SendOrPostCallback EndUserExistsOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateEndUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetEndUserIDByEmailOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetEndUserByEmailOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetEndUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateUsesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDesktopUsesOperationCompleted;
        
        private System.Threading.SendOrPostCallback InsertDesktopUseOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAllEndUsersOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateEndUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetEndUsersByClassificationGroupOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateClientOperationCompleted;
        
        private System.Threading.SendOrPostCallback InsertClientOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetClientIDByRegistrationCodeOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetClientUpdatePageOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetClientIDByEndUserEmailOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetClientUpdateVersionOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetUpdateScriptOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetClientIDBySubLicenseCodeOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTargetURLOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetClientByNameAndPasswordOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetClientOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAllClientsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSubLicenseByTargetURLOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTargetURLByRegIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSubLicenseOperationCompleted;
        
        private System.Threading.SendOrPostCallback InsertSubLicenseOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteSubLicenseOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateSubLicenseOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSubLicenseByClientIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendOptimaNotificationEmailsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetProductNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetProductNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateJetnettEZVersionOperationCompleted;
        
        private System.Threading.SendOrPostCallback JetnettEZUpdateAvailOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetXMLURLOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetDesktopXMLURLOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetXMLURLOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDesktopXMLURLOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAbandonClientIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendNotificationEmailsOperationCompleted;
        
        private System.Threading.SendOrPostCallback CoreUpdateAvailableOperationCompleted;
        
        private System.Threading.SendOrPostCallback CoreOptimaUpdateAvailableOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMEGByClientIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMEGIDByClientIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMEGOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTokenOperationCompleted;
        
        private System.Threading.SendOrPostCallback SearchFoldersOperationCompleted;
        
        private System.Threading.SendOrPostCallback ElevateLinkOperationCompleted;
        
        private System.Threading.SendOrPostCallback UnElevateLinkOperationCompleted;
        
        private System.Threading.SendOrPostCallback ReplaceAllLinksInPagesOperationCompleted;
        
        private System.Threading.SendOrPostCallback RenameFoldersOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAccessLevelOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAllStacksOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddStackOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateStackOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetStackOperationCompleted;
        
        private System.Threading.SendOrPostCallback SuspendLinkOperationCompleted;
        
        private System.Threading.SendOrPostCallback UnSuspendLinkOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetBadLinksByTitleAndUrlOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAdAssignmentOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAdsModelByAssignmentOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAdAssignmentsByAdGroupOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAdsModelOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAllAdsModelOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAdsModelsByAdGroupOperationCompleted;
        
        private System.Threading.SendOrPostCallback UserRegisteredOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetLinkCountOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAllLinksByTitleAndURLOperationCompleted;
        
        private System.Threading.SendOrPostCallback LogLinkViewerEventOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetFormattedLatestLogsOperationCompleted;
        
        private System.Threading.SendOrPostCallback ReplaceAllLinkOperationCompleted;
        
        private System.Threading.SendOrPostCallback EmailTrackerCodeExistsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAllLinkViewerLogsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetJetNettEZInformationCenterVersionOperationCompleted;
        
        private System.Threading.SendOrPostCallback InsertSchoolInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAllSchoolsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSchoolInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateSchoolInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteSchoolInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback SearchFolderOperationCompleted;
        
        private System.Threading.SendOrPostCallback LoginOperationCompleted;
        
        private System.Threading.SendOrPostCallback AuthOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddURLToLinkCheckerWhitelistOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteURLFromLinkCheckerWhitelistOperationCompleted;
        
        private System.Threading.SendOrPostCallback PurgeOldEntriesFromLinkCheckerWhitelistOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetLinkCheckerWhitelistOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetBadLinksContainingURLOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetBadLinkOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAllBadLinksOperationCompleted;
        
        private System.Threading.SendOrPostCallback InsertBadLinkOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateBadLinkOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteBadLinkOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteAdGroupOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteAdPageRelOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAdClickReportOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAdViewReportOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAllAdPageRelationshipsOperationCompleted;
        
        private System.Threading.SendOrPostCallback TrackAdClickOperationCompleted;
        
        private System.Threading.SendOrPostCallback TrackAdViewOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAdPageRelationshipsByAdGroupOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAdPageRelationshipByClientIDAndPageIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAdPageRelationshipByClientIDOnlyOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAdPageRelationshipByPageIDOnlyOperationCompleted;
        
        private System.Threading.SendOrPostCallback InsertAdPageRelationshipOperationCompleted;
        
        private System.Threading.SendOrPostCallback IncrementAdGroupSeedOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAdGroupOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateAdGroupOperationCompleted;
        
        private System.Threading.SendOrPostCallback InsertAdGroupOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAllAdGroupsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAdPageRelationshipByIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteAdOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAdByIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAdsByAdGroupOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAdsByClientIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAllAdsOperationCompleted;
        
        private System.Threading.SendOrPostCallback InsertAdOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateAdOperationCompleted;
        
        private System.Threading.SendOrPostCallback InsertMLFOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateMLFByFIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback InsertMLFAutoOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateMLFByIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAllMLFOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMLFByFIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMLFByIDOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public Service() {
            this.Url = global::DailyEZ.Web.Properties.Settings.Default.DailyEZ_Web_com_dailyez_Service;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event DeleteMEG_ContactCompletedEventHandler DeleteMEG_ContactCompleted;
        
        /// <remarks/>
        public event UpdateMEG_PrimaryCompletedEventHandler UpdateMEG_PrimaryCompleted;
        
        /// <remarks/>
        public event MEGCodeExistsCompletedEventHandler MEGCodeExistsCompleted;
        
        /// <remarks/>
        public event InsertMEGCompletedEventHandler InsertMEGCompleted;
        
        /// <remarks/>
        public event UpdateMEGCompletedEventHandler UpdateMEGCompleted;
        
        /// <remarks/>
        public event GetClassificationGroupCompletedEventHandler GetClassificationGroupCompleted;
        
        /// <remarks/>
        public event GetAllClassificationGroupsCompletedEventHandler GetAllClassificationGroupsCompleted;
        
        /// <remarks/>
        public event AddClassificationGroupCompletedEventHandler AddClassificationGroupCompleted;
        
        /// <remarks/>
        public event GetCustomerMessageCompletedEventHandler GetCustomerMessageCompleted;
        
        /// <remarks/>
        public event GetCustomerMessagesByClientIDCompletedEventHandler GetCustomerMessagesByClientIDCompleted;
        
        /// <remarks/>
        public event UpdateCustomerMessageCompletedEventHandler UpdateCustomerMessageCompleted;
        
        /// <remarks/>
        public event DeleteCustomerMessageCompletedEventHandler DeleteCustomerMessageCompleted;
        
        /// <remarks/>
        public event AddCustomerMessageCompletedEventHandler AddCustomerMessageCompleted;
        
        /// <remarks/>
        public event GetJetnettMessageCompletedEventHandler GetJetnettMessageCompleted;
        
        /// <remarks/>
        public event UpdateJetnettMessageCompletedEventHandler UpdateJetnettMessageCompleted;
        
        /// <remarks/>
        public event GetSentMessagesByClientIDCompletedEventHandler GetSentMessagesByClientIDCompleted;
        
        /// <remarks/>
        public event GetInboxByClientIDCompletedEventHandler GetInboxByClientIDCompleted;
        
        /// <remarks/>
        public event GetMessagesCountCompletedEventHandler GetMessagesCountCompleted;
        
        /// <remarks/>
        public event DeleteJetnettMessageCompletedEventHandler DeleteJetnettMessageCompleted;
        
        /// <remarks/>
        public event AddJetnettMessageCompletedEventHandler AddJetnettMessageCompleted;
        
        /// <remarks/>
        public event UpdateBottomRightGraphicCompletedEventHandler UpdateBottomRightGraphicCompleted;
        
        /// <remarks/>
        public event UpdateBottomLeftGraphicCompletedEventHandler UpdateBottomLeftGraphicCompleted;
        
        /// <remarks/>
        public event GetHomePageByClientIDCompletedEventHandler GetHomePageByClientIDCompleted;
        
        /// <remarks/>
        public event InsertHomePageCompletedEventHandler InsertHomePageCompleted;
        
        /// <remarks/>
        public event UpdateHomePageCompletedEventHandler UpdateHomePageCompleted;
        
        /// <remarks/>
        public event GetMenuLinksByFolderCompletedEventHandler GetMenuLinksByFolderCompleted;
        
        /// <remarks/>
        public event GetMenuLinksCompletedEventHandler GetMenuLinksCompleted;
        
        /// <remarks/>
        public event GetMenuLinkCompletedEventHandler GetMenuLinkCompleted;
        
        /// <remarks/>
        public event CopyFolderToNewClientCompletedEventHandler CopyFolderToNewClientCompleted;
        
        /// <remarks/>
        public event UpdateMenuLinkCompletedEventHandler UpdateMenuLinkCompleted;
        
        /// <remarks/>
        public event DeleteMenuLinkCompletedEventHandler DeleteMenuLinkCompleted;
        
        /// <remarks/>
        public event InsertMenuLink1CompletedEventHandler InsertMenuLink1Completed;
        
        /// <remarks/>
        public event InsertMenuFolderAndClientCompletedEventHandler InsertMenuFolderAndClientCompleted;
        
        /// <remarks/>
        public event GetMenuFolderFromClientCompletedEventHandler GetMenuFolderFromClientCompleted;
        
        /// <remarks/>
        public event UpdateMenuFolderFromClientCompletedEventHandler UpdateMenuFolderFromClientCompleted;
        
        /// <remarks/>
        public event GetAllMenuLinksCompletedEventHandler GetAllMenuLinksCompleted;
        
        /// <remarks/>
        public event InsertMenuLinkCompletedEventHandler InsertMenuLinkCompleted;
        
        /// <remarks/>
        public event GetLinksContainingURLCompletedEventHandler GetLinksContainingURLCompleted;
        
        /// <remarks/>
        public event GetLinksFromPageCompletedEventHandler GetLinksFromPageCompleted;
        
        /// <remarks/>
        public event InsertLinkCompletedEventHandler InsertLinkCompleted;
        
        /// <remarks/>
        public event DeleteLinkCompletedEventHandler DeleteLinkCompleted;
        
        /// <remarks/>
        public event GetLinkCompletedEventHandler GetLinkCompleted;
        
        /// <remarks/>
        public event UpdateLinkCompletedEventHandler UpdateLinkCompleted;
        
        /// <remarks/>
        public event OrganizeLinksByPositionCompletedEventHandler OrganizeLinksByPositionCompleted;
        
        /// <remarks/>
        public event GetInformationPageCompletedEventHandler GetInformationPageCompleted;
        
        /// <remarks/>
        public event InsertInformationPageCompletedEventHandler InsertInformationPageCompleted;
        
        /// <remarks/>
        public event DeleteInformationPageCompletedEventHandler DeleteInformationPageCompleted;
        
        /// <remarks/>
        public event UpdateInformationPageCompletedEventHandler UpdateInformationPageCompleted;
        
        /// <remarks/>
        public event GetInformationPageByClientIDCompletedEventHandler GetInformationPageByClientIDCompleted;
        
        /// <remarks/>
        public event GetContactPageCompletedEventHandler GetContactPageCompleted;
        
        /// <remarks/>
        public event InsertContactPageCompletedEventHandler InsertContactPageCompleted;
        
        /// <remarks/>
        public event DeleteContactPageCompletedEventHandler DeleteContactPageCompleted;
        
        /// <remarks/>
        public event UpdateContactPageCompletedEventHandler UpdateContactPageCompleted;
        
        /// <remarks/>
        public event GetContactPagesByClientIDCompletedEventHandler GetContactPagesByClientIDCompleted;
        
        /// <remarks/>
        public event GetCustomerLinkPagesByClientIDCompletedEventHandler GetCustomerLinkPagesByClientIDCompleted;
        
        /// <remarks/>
        public event InsertCustomerLinkPageCompletedEventHandler InsertCustomerLinkPageCompleted;
        
        /// <remarks/>
        public event DeleteCustomerLinkPageCompletedEventHandler DeleteCustomerLinkPageCompleted;
        
        /// <remarks/>
        public event InsertPageCompletedEventHandler InsertPageCompleted;
        
        /// <remarks/>
        public event GetPageCompletedEventHandler GetPageCompleted;
        
        /// <remarks/>
        public event UpdatePageCompletedEventHandler UpdatePageCompleted;
        
        /// <remarks/>
        public event GetZipCodeCompletedEventHandler GetZipCodeCompleted;
        
        /// <remarks/>
        public event DeletePageCompletedEventHandler DeletePageCompleted;
        
        /// <remarks/>
        public event GetAllPagesCompletedEventHandler GetAllPagesCompleted;
        
        /// <remarks/>
        public event GetContactPageStaffMemberCompletedEventHandler GetContactPageStaffMemberCompleted;
        
        /// <remarks/>
        public event InsertContactPageStaffMemberCompletedEventHandler InsertContactPageStaffMemberCompleted;
        
        /// <remarks/>
        public event DeleteContactPageStaffMemberCompletedEventHandler DeleteContactPageStaffMemberCompleted;
        
        /// <remarks/>
        public event UpdateContactPageStaffMemberCompletedEventHandler UpdateContactPageStaffMemberCompleted;
        
        /// <remarks/>
        public event GetPropertyListingCompletedEventHandler GetPropertyListingCompleted;
        
        /// <remarks/>
        public event InsertPropertyListingCompletedEventHandler InsertPropertyListingCompleted;
        
        /// <remarks/>
        public event DeletePropertyListingCompletedEventHandler DeletePropertyListingCompleted;
        
        /// <remarks/>
        public event UpdatePropertyListingCompletedEventHandler UpdatePropertyListingCompleted;
        
        /// <remarks/>
        public event GetAvailablePropertiesPageCompletedEventHandler GetAvailablePropertiesPageCompleted;
        
        /// <remarks/>
        public event GetAvailablePropertiesPagesByClientIDCompletedEventHandler GetAvailablePropertiesPagesByClientIDCompleted;
        
        /// <remarks/>
        public event InsertAvailablePropertiesPageCompletedEventHandler InsertAvailablePropertiesPageCompleted;
        
        /// <remarks/>
        public event DeleteAvailablePropertiesPageCompletedEventHandler DeleteAvailablePropertiesPageCompleted;
        
        /// <remarks/>
        public event UpdateAvailableProperitesPageCompletedEventHandler UpdateAvailableProperitesPageCompleted;
        
        /// <remarks/>
        public event ClientManagerUpdateAvailableCompletedEventHandler ClientManagerUpdateAvailableCompleted;
        
        /// <remarks/>
        public event InsertMEG_SubLicenseCompletedEventHandler InsertMEG_SubLicenseCompleted;
        
        /// <remarks/>
        public event GetMEG_SubLicenseCompletedEventHandler GetMEG_SubLicenseCompleted;
        
        /// <remarks/>
        public event DeleteMEG_SubLicenseCompletedEventHandler DeleteMEG_SubLicenseCompleted;
        
        /// <remarks/>
        public event UpdateMEG_SubLicenseCompletedEventHandler UpdateMEG_SubLicenseCompleted;
        
        /// <remarks/>
        public event InsertMEG_ContactCompletedEventHandler InsertMEG_ContactCompleted;
        
        /// <remarks/>
        public event GetMEG_ContactCompletedEventHandler GetMEG_ContactCompleted;
        
        /// <remarks/>
        public event DeleteMEG_PrimaryCompletedEventHandler DeleteMEG_PrimaryCompleted;
        
        /// <remarks/>
        public event UpdateMEG_ContactCompletedEventHandler UpdateMEG_ContactCompleted;
        
        /// <remarks/>
        public event InsertMEG_PrimaryCompletedEventHandler InsertMEG_PrimaryCompleted;
        
        /// <remarks/>
        public event GetMEG_PrimaryCompletedEventHandler GetMEG_PrimaryCompleted;
        
        /// <remarks/>
        public event DeleteMLFByFIDCompletedEventHandler DeleteMLFByFIDCompleted;
        
        /// <remarks/>
        public event DeleteMLFByIDCompletedEventHandler DeleteMLFByIDCompleted;
        
        /// <remarks/>
        public event GetClientIDFromUserFriendlyURLCompletedEventHandler GetClientIDFromUserFriendlyURLCompleted;
        
        /// <remarks/>
        public event GetPageViewReportsCompletedEventHandler GetPageViewReportsCompleted;
        
        /// <remarks/>
        public event TrackPageViewCompletedEventHandler TrackPageViewCompleted;
        
        /// <remarks/>
        public event GetDailyEZByClientIDCompletedEventHandler GetDailyEZByClientIDCompleted;
        
        /// <remarks/>
        public event UpdateDailyEZCompletedEventHandler UpdateDailyEZCompleted;
        
        /// <remarks/>
        public event InsertDailyEZCompletedEventHandler InsertDailyEZCompleted;
        
        /// <remarks/>
        public event GetAdSeedCompletedEventHandler GetAdSeedCompleted;
        
        /// <remarks/>
        public event UpdateAdSeedCompletedEventHandler UpdateAdSeedCompleted;
        
        /// <remarks/>
        public event DeleteDailyEZCompletedEventHandler DeleteDailyEZCompleted;
        
        /// <remarks/>
        public event GetSendToFriendByIDCompletedEventHandler GetSendToFriendByIDCompleted;
        
        /// <remarks/>
        public event GetSendToFriendByClientIDCompletedEventHandler GetSendToFriendByClientIDCompleted;
        
        /// <remarks/>
        public event DeleteSendToFriendCompletedEventHandler DeleteSendToFriendCompleted;
        
        /// <remarks/>
        public event InsertSendToFriendCompletedEventHandler InsertSendToFriendCompleted;
        
        /// <remarks/>
        public event UpdateSendToFriendCompletedEventHandler UpdateSendToFriendCompleted;
        
        /// <remarks/>
        public event GetMEGv3ByClientIDCompletedEventHandler GetMEGv3ByClientIDCompleted;
        
        /// <remarks/>
        public event UpdateMEGv3CompletedEventHandler UpdateMEGv3Completed;
        
        /// <remarks/>
        public event InsertMEGv3CompletedEventHandler InsertMEGv3Completed;
        
        /// <remarks/>
        public event DeleteMEGv3CompletedEventHandler DeleteMEGv3Completed;
        
        /// <remarks/>
        public event GetResourceFileByIDCompletedEventHandler GetResourceFileByIDCompleted;
        
        /// <remarks/>
        public event GetResourceFileByMD5CompletedEventHandler GetResourceFileByMD5Completed;
        
        /// <remarks/>
        public event GetResourceFilesCompletedEventHandler GetResourceFilesCompleted;
        
        /// <remarks/>
        public event GetAllResourceFilesCompletedEventHandler GetAllResourceFilesCompleted;
        
        /// <remarks/>
        public event InsertResourceFileCompletedEventHandler InsertResourceFileCompleted;
        
        /// <remarks/>
        public event DeleteResourceFileCompletedEventHandler DeleteResourceFileCompleted;
        
        /// <remarks/>
        public event UpdateResourceFileCompletedEventHandler UpdateResourceFileCompleted;
        
        /// <remarks/>
        public event GetJetnettEZEnabledClientsCompletedEventHandler GetJetnettEZEnabledClientsCompleted;
        
        /// <remarks/>
        public event JetnettEZClientEnabledCompletedEventHandler JetnettEZClientEnabledCompleted;
        
        /// <remarks/>
        public event GetFolderPathCompletedEventHandler GetFolderPathCompleted;
        
        /// <remarks/>
        public event GetAllFoldersCompletedEventHandler GetAllFoldersCompleted;
        
        /// <remarks/>
        public event GetFolderCompletedEventHandler GetFolderCompleted;
        
        /// <remarks/>
        public event GetFavoritesCompletedEventHandler GetFavoritesCompleted;
        
        /// <remarks/>
        public event SaveFavoritesCompletedEventHandler SaveFavoritesCompleted;
        
        /// <remarks/>
        public event SaveFavoritesRePositionCompletedEventHandler SaveFavoritesRePositionCompleted;
        
        /// <remarks/>
        public event UpdateFavoriteCompletedEventHandler UpdateFavoriteCompleted;
        
        /// <remarks/>
        public event GetUsesThisMonthCompletedEventHandler GetUsesThisMonthCompleted;
        
        /// <remarks/>
        public event GetUsesInMonthCompletedEventHandler GetUsesInMonthCompleted;
        
        /// <remarks/>
        public event GetMonthlyReportCompletedEventHandler GetMonthlyReportCompleted;
        
        /// <remarks/>
        public event EndUserExistsCompletedEventHandler EndUserExistsCompleted;
        
        /// <remarks/>
        public event CreateEndUserCompletedEventHandler CreateEndUserCompleted;
        
        /// <remarks/>
        public event GetEndUserIDByEmailCompletedEventHandler GetEndUserIDByEmailCompleted;
        
        /// <remarks/>
        public event GetEndUserByEmailCompletedEventHandler GetEndUserByEmailCompleted;
        
        /// <remarks/>
        public event GetEndUserCompletedEventHandler GetEndUserCompleted;
        
        /// <remarks/>
        public event UpdateUsesCompletedEventHandler UpdateUsesCompleted;
        
        /// <remarks/>
        public event GetDesktopUsesCompletedEventHandler GetDesktopUsesCompleted;
        
        /// <remarks/>
        public event InsertDesktopUseCompletedEventHandler InsertDesktopUseCompleted;
        
        /// <remarks/>
        public event GetAllEndUsersCompletedEventHandler GetAllEndUsersCompleted;
        
        /// <remarks/>
        public event UpdateEndUserCompletedEventHandler UpdateEndUserCompleted;
        
        /// <remarks/>
        public event GetEndUsersByClassificationGroupCompletedEventHandler GetEndUsersByClassificationGroupCompleted;
        
        /// <remarks/>
        public event UpdateClientCompletedEventHandler UpdateClientCompleted;
        
        /// <remarks/>
        public event InsertClientCompletedEventHandler InsertClientCompleted;
        
        /// <remarks/>
        public event GetClientIDByRegistrationCodeCompletedEventHandler GetClientIDByRegistrationCodeCompleted;
        
        /// <remarks/>
        public event GetClientUpdatePageCompletedEventHandler GetClientUpdatePageCompleted;
        
        /// <remarks/>
        public event GetClientIDByEndUserEmailCompletedEventHandler GetClientIDByEndUserEmailCompleted;
        
        /// <remarks/>
        public event GetClientUpdateVersionCompletedEventHandler GetClientUpdateVersionCompleted;
        
        /// <remarks/>
        public event GetUpdateScriptCompletedEventHandler GetUpdateScriptCompleted;
        
        /// <remarks/>
        public event GetClientIDBySubLicenseCodeCompletedEventHandler GetClientIDBySubLicenseCodeCompleted;
        
        /// <remarks/>
        public event GetTargetURLCompletedEventHandler GetTargetURLCompleted;
        
        /// <remarks/>
        public event GetClientByNameAndPasswordCompletedEventHandler GetClientByNameAndPasswordCompleted;
        
        /// <remarks/>
        public event GetClientCompletedEventHandler GetClientCompleted;
        
        /// <remarks/>
        public event GetAllClientsCompletedEventHandler GetAllClientsCompleted;
        
        /// <remarks/>
        public event GetSubLicenseByTargetURLCompletedEventHandler GetSubLicenseByTargetURLCompleted;
        
        /// <remarks/>
        public event GetTargetURLByRegIDCompletedEventHandler GetTargetURLByRegIDCompleted;
        
        /// <remarks/>
        public event GetSubLicenseCompletedEventHandler GetSubLicenseCompleted;
        
        /// <remarks/>
        public event InsertSubLicenseCompletedEventHandler InsertSubLicenseCompleted;
        
        /// <remarks/>
        public event DeleteSubLicenseCompletedEventHandler DeleteSubLicenseCompleted;
        
        /// <remarks/>
        public event UpdateSubLicenseCompletedEventHandler UpdateSubLicenseCompleted;
        
        /// <remarks/>
        public event GetSubLicenseByClientIDCompletedEventHandler GetSubLicenseByClientIDCompleted;
        
        /// <remarks/>
        public event SendOptimaNotificationEmailsCompletedEventHandler SendOptimaNotificationEmailsCompleted;
        
        /// <remarks/>
        public event GetProductNameCompletedEventHandler GetProductNameCompleted;
        
        /// <remarks/>
        public event SetProductNameCompletedEventHandler SetProductNameCompleted;
        
        /// <remarks/>
        public event UpdateJetnettEZVersionCompletedEventHandler UpdateJetnettEZVersionCompleted;
        
        /// <remarks/>
        public event JetnettEZUpdateAvailCompletedEventHandler JetnettEZUpdateAvailCompleted;
        
        /// <remarks/>
        public event SetXMLURLCompletedEventHandler SetXMLURLCompleted;
        
        /// <remarks/>
        public event SetDesktopXMLURLCompletedEventHandler SetDesktopXMLURLCompleted;
        
        /// <remarks/>
        public event GetXMLURLCompletedEventHandler GetXMLURLCompleted;
        
        /// <remarks/>
        public event GetDesktopXMLURLCompletedEventHandler GetDesktopXMLURLCompleted;
        
        /// <remarks/>
        public event GetAbandonClientIDCompletedEventHandler GetAbandonClientIDCompleted;
        
        /// <remarks/>
        public event SendNotificationEmailsCompletedEventHandler SendNotificationEmailsCompleted;
        
        /// <remarks/>
        public event CoreUpdateAvailableCompletedEventHandler CoreUpdateAvailableCompleted;
        
        /// <remarks/>
        public event CoreOptimaUpdateAvailableCompletedEventHandler CoreOptimaUpdateAvailableCompleted;
        
        /// <remarks/>
        public event GetMEGByClientIDCompletedEventHandler GetMEGByClientIDCompleted;
        
        /// <remarks/>
        public event GetMEGIDByClientIDCompletedEventHandler GetMEGIDByClientIDCompleted;
        
        /// <remarks/>
        public event GetMEGCompletedEventHandler GetMEGCompleted;
        
        /// <remarks/>
        public event GetTokenCompletedEventHandler GetTokenCompleted;
        
        /// <remarks/>
        public event SearchFoldersCompletedEventHandler SearchFoldersCompleted;
        
        /// <remarks/>
        public event ElevateLinkCompletedEventHandler ElevateLinkCompleted;
        
        /// <remarks/>
        public event UnElevateLinkCompletedEventHandler UnElevateLinkCompleted;
        
        /// <remarks/>
        public event ReplaceAllLinksInPagesCompletedEventHandler ReplaceAllLinksInPagesCompleted;
        
        /// <remarks/>
        public event RenameFoldersCompletedEventHandler RenameFoldersCompleted;
        
        /// <remarks/>
        public event GetAccessLevelCompletedEventHandler GetAccessLevelCompleted;
        
        /// <remarks/>
        public event GetAllStacksCompletedEventHandler GetAllStacksCompleted;
        
        /// <remarks/>
        public event AddStackCompletedEventHandler AddStackCompleted;
        
        /// <remarks/>
        public event UpdateStackCompletedEventHandler UpdateStackCompleted;
        
        /// <remarks/>
        public event GetStackCompletedEventHandler GetStackCompleted;
        
        /// <remarks/>
        public event SuspendLinkCompletedEventHandler SuspendLinkCompleted;
        
        /// <remarks/>
        public event UnSuspendLinkCompletedEventHandler UnSuspendLinkCompleted;
        
        /// <remarks/>
        public event GetBadLinksByTitleAndUrlCompletedEventHandler GetBadLinksByTitleAndUrlCompleted;
        
        /// <remarks/>
        public event GetAdAssignmentCompletedEventHandler GetAdAssignmentCompleted;
        
        /// <remarks/>
        public event GetAdsModelByAssignmentCompletedEventHandler GetAdsModelByAssignmentCompleted;
        
        /// <remarks/>
        public event GetAdAssignmentsByAdGroupCompletedEventHandler GetAdAssignmentsByAdGroupCompleted;
        
        /// <remarks/>
        public event GetAdsModelCompletedEventHandler GetAdsModelCompleted;
        
        /// <remarks/>
        public event GetAllAdsModelCompletedEventHandler GetAllAdsModelCompleted;
        
        /// <remarks/>
        public event GetAdsModelsByAdGroupCompletedEventHandler GetAdsModelsByAdGroupCompleted;
        
        /// <remarks/>
        public event UserRegisteredCompletedEventHandler UserRegisteredCompleted;
        
        /// <remarks/>
        public event GetLinkCountCompletedEventHandler GetLinkCountCompleted;
        
        /// <remarks/>
        public event GetAllLinksByTitleAndURLCompletedEventHandler GetAllLinksByTitleAndURLCompleted;
        
        /// <remarks/>
        public event LogLinkViewerEventCompletedEventHandler LogLinkViewerEventCompleted;
        
        /// <remarks/>
        public event GetFormattedLatestLogsCompletedEventHandler GetFormattedLatestLogsCompleted;
        
        /// <remarks/>
        public event ReplaceAllLinkCompletedEventHandler ReplaceAllLinkCompleted;
        
        /// <remarks/>
        public event EmailTrackerCodeExistsCompletedEventHandler EmailTrackerCodeExistsCompleted;
        
        /// <remarks/>
        public event GetAllLinkViewerLogsCompletedEventHandler GetAllLinkViewerLogsCompleted;
        
        /// <remarks/>
        public event GetJetNettEZInformationCenterVersionCompletedEventHandler GetJetNettEZInformationCenterVersionCompleted;
        
        /// <remarks/>
        public event InsertSchoolInfoCompletedEventHandler InsertSchoolInfoCompleted;
        
        /// <remarks/>
        public event GetAllSchoolsCompletedEventHandler GetAllSchoolsCompleted;
        
        /// <remarks/>
        public event GetSchoolInfoCompletedEventHandler GetSchoolInfoCompleted;
        
        /// <remarks/>
        public event UpdateSchoolInfoCompletedEventHandler UpdateSchoolInfoCompleted;
        
        /// <remarks/>
        public event DeleteSchoolInfoCompletedEventHandler DeleteSchoolInfoCompleted;
        
        /// <remarks/>
        public event SearchFolderCompletedEventHandler SearchFolderCompleted;
        
        /// <remarks/>
        public event LoginCompletedEventHandler LoginCompleted;
        
        /// <remarks/>
        public event AuthCompletedEventHandler AuthCompleted;
        
        /// <remarks/>
        public event AddURLToLinkCheckerWhitelistCompletedEventHandler AddURLToLinkCheckerWhitelistCompleted;
        
        /// <remarks/>
        public event DeleteURLFromLinkCheckerWhitelistCompletedEventHandler DeleteURLFromLinkCheckerWhitelistCompleted;
        
        /// <remarks/>
        public event PurgeOldEntriesFromLinkCheckerWhitelistCompletedEventHandler PurgeOldEntriesFromLinkCheckerWhitelistCompleted;
        
        /// <remarks/>
        public event GetLinkCheckerWhitelistCompletedEventHandler GetLinkCheckerWhitelistCompleted;
        
        /// <remarks/>
        public event GetBadLinksContainingURLCompletedEventHandler GetBadLinksContainingURLCompleted;
        
        /// <remarks/>
        public event GetBadLinkCompletedEventHandler GetBadLinkCompleted;
        
        /// <remarks/>
        public event GetAllBadLinksCompletedEventHandler GetAllBadLinksCompleted;
        
        /// <remarks/>
        public event InsertBadLinkCompletedEventHandler InsertBadLinkCompleted;
        
        /// <remarks/>
        public event UpdateBadLinkCompletedEventHandler UpdateBadLinkCompleted;
        
        /// <remarks/>
        public event DeleteBadLinkCompletedEventHandler DeleteBadLinkCompleted;
        
        /// <remarks/>
        public event DeleteAdGroupCompletedEventHandler DeleteAdGroupCompleted;
        
        /// <remarks/>
        public event DeleteAdPageRelCompletedEventHandler DeleteAdPageRelCompleted;
        
        /// <remarks/>
        public event GetAdClickReportCompletedEventHandler GetAdClickReportCompleted;
        
        /// <remarks/>
        public event GetAdViewReportCompletedEventHandler GetAdViewReportCompleted;
        
        /// <remarks/>
        public event GetAllAdPageRelationshipsCompletedEventHandler GetAllAdPageRelationshipsCompleted;
        
        /// <remarks/>
        public event TrackAdClickCompletedEventHandler TrackAdClickCompleted;
        
        /// <remarks/>
        public event TrackAdViewCompletedEventHandler TrackAdViewCompleted;
        
        /// <remarks/>
        public event GetAdPageRelationshipsByAdGroupCompletedEventHandler GetAdPageRelationshipsByAdGroupCompleted;
        
        /// <remarks/>
        public event GetAdPageRelationshipByClientIDAndPageIDCompletedEventHandler GetAdPageRelationshipByClientIDAndPageIDCompleted;
        
        /// <remarks/>
        public event GetAdPageRelationshipByClientIDOnlyCompletedEventHandler GetAdPageRelationshipByClientIDOnlyCompleted;
        
        /// <remarks/>
        public event GetAdPageRelationshipByPageIDOnlyCompletedEventHandler GetAdPageRelationshipByPageIDOnlyCompleted;
        
        /// <remarks/>
        public event InsertAdPageRelationshipCompletedEventHandler InsertAdPageRelationshipCompleted;
        
        /// <remarks/>
        public event IncrementAdGroupSeedCompletedEventHandler IncrementAdGroupSeedCompleted;
        
        /// <remarks/>
        public event GetAdGroupCompletedEventHandler GetAdGroupCompleted;
        
        /// <remarks/>
        public event UpdateAdGroupCompletedEventHandler UpdateAdGroupCompleted;
        
        /// <remarks/>
        public event InsertAdGroupCompletedEventHandler InsertAdGroupCompleted;
        
        /// <remarks/>
        public event GetAllAdGroupsCompletedEventHandler GetAllAdGroupsCompleted;
        
        /// <remarks/>
        public event GetAdPageRelationshipByIDCompletedEventHandler GetAdPageRelationshipByIDCompleted;
        
        /// <remarks/>
        public event DeleteAdCompletedEventHandler DeleteAdCompleted;
        
        /// <remarks/>
        public event GetAdByIDCompletedEventHandler GetAdByIDCompleted;
        
        /// <remarks/>
        public event GetAdsByAdGroupCompletedEventHandler GetAdsByAdGroupCompleted;
        
        /// <remarks/>
        public event GetAdsByClientIDCompletedEventHandler GetAdsByClientIDCompleted;
        
        /// <remarks/>
        public event GetAllAdsCompletedEventHandler GetAllAdsCompleted;
        
        /// <remarks/>
        public event InsertAdCompletedEventHandler InsertAdCompleted;
        
        /// <remarks/>
        public event UpdateAdCompletedEventHandler UpdateAdCompleted;
        
        /// <remarks/>
        public event InsertMLFCompletedEventHandler InsertMLFCompleted;
        
        /// <remarks/>
        public event UpdateMLFByFIDCompletedEventHandler UpdateMLFByFIDCompleted;
        
        /// <remarks/>
        public event InsertMLFAutoCompletedEventHandler InsertMLFAutoCompleted;
        
        /// <remarks/>
        public event UpdateMLFByIDCompletedEventHandler UpdateMLFByIDCompleted;
        
        /// <remarks/>
        public event GetAllMLFCompletedEventHandler GetAllMLFCompleted;
        
        /// <remarks/>
        public event GetMLFByFIDCompletedEventHandler GetMLFByFIDCompleted;
        
        /// <remarks/>
        public event GetMLFByIDCompletedEventHandler GetMLFByIDCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/DeleteMEG_Contact", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteMEG_Contact(string key, int entityID) {
            this.Invoke("DeleteMEG_Contact", new object[] {
                        key,
                        entityID});
        }
        
        /// <remarks/>
        public void DeleteMEG_ContactAsync(string key, int entityID) {
            this.DeleteMEG_ContactAsync(key, entityID, null);
        }
        
        /// <remarks/>
        public void DeleteMEG_ContactAsync(string key, int entityID, object userState) {
            if ((this.DeleteMEG_ContactOperationCompleted == null)) {
                this.DeleteMEG_ContactOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteMEG_ContactOperationCompleted);
            }
            this.InvokeAsync("DeleteMEG_Contact", new object[] {
                        key,
                        entityID}, this.DeleteMEG_ContactOperationCompleted, userState);
        }
        
        private void OnDeleteMEG_ContactOperationCompleted(object arg) {
            if ((this.DeleteMEG_ContactCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteMEG_ContactCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/UpdateMEG_Primary", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpdateMEG_Primary(string key, int id, MEG_Primary entity) {
            this.Invoke("UpdateMEG_Primary", new object[] {
                        key,
                        id,
                        entity});
        }
        
        /// <remarks/>
        public void UpdateMEG_PrimaryAsync(string key, int id, MEG_Primary entity) {
            this.UpdateMEG_PrimaryAsync(key, id, entity, null);
        }
        
        /// <remarks/>
        public void UpdateMEG_PrimaryAsync(string key, int id, MEG_Primary entity, object userState) {
            if ((this.UpdateMEG_PrimaryOperationCompleted == null)) {
                this.UpdateMEG_PrimaryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateMEG_PrimaryOperationCompleted);
            }
            this.InvokeAsync("UpdateMEG_Primary", new object[] {
                        key,
                        id,
                        entity}, this.UpdateMEG_PrimaryOperationCompleted, userState);
        }
        
        private void OnUpdateMEG_PrimaryOperationCompleted(object arg) {
            if ((this.UpdateMEG_PrimaryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateMEG_PrimaryCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/MEGCodeExists", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool MEGCodeExists(string key, string code) {
            object[] results = this.Invoke("MEGCodeExists", new object[] {
                        key,
                        code});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void MEGCodeExistsAsync(string key, string code) {
            this.MEGCodeExistsAsync(key, code, null);
        }
        
        /// <remarks/>
        public void MEGCodeExistsAsync(string key, string code, object userState) {
            if ((this.MEGCodeExistsOperationCompleted == null)) {
                this.MEGCodeExistsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMEGCodeExistsOperationCompleted);
            }
            this.InvokeAsync("MEGCodeExists", new object[] {
                        key,
                        code}, this.MEGCodeExistsOperationCompleted, userState);
        }
        
        private void OnMEGCodeExistsOperationCompleted(object arg) {
            if ((this.MEGCodeExistsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MEGCodeExistsCompleted(this, new MEGCodeExistsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/InsertMEG", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void InsertMEG(string key, Metro_eGuide entity) {
            this.Invoke("InsertMEG", new object[] {
                        key,
                        entity});
        }
        
        /// <remarks/>
        public void InsertMEGAsync(string key, Metro_eGuide entity) {
            this.InsertMEGAsync(key, entity, null);
        }
        
        /// <remarks/>
        public void InsertMEGAsync(string key, Metro_eGuide entity, object userState) {
            if ((this.InsertMEGOperationCompleted == null)) {
                this.InsertMEGOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertMEGOperationCompleted);
            }
            this.InvokeAsync("InsertMEG", new object[] {
                        key,
                        entity}, this.InsertMEGOperationCompleted, userState);
        }
        
        private void OnInsertMEGOperationCompleted(object arg) {
            if ((this.InsertMEGCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsertMEGCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/UpdateMEG", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpdateMEG(string key, Metro_eGuide entity) {
            this.Invoke("UpdateMEG", new object[] {
                        key,
                        entity});
        }
        
        /// <remarks/>
        public void UpdateMEGAsync(string key, Metro_eGuide entity) {
            this.UpdateMEGAsync(key, entity, null);
        }
        
        /// <remarks/>
        public void UpdateMEGAsync(string key, Metro_eGuide entity, object userState) {
            if ((this.UpdateMEGOperationCompleted == null)) {
                this.UpdateMEGOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateMEGOperationCompleted);
            }
            this.InvokeAsync("UpdateMEG", new object[] {
                        key,
                        entity}, this.UpdateMEGOperationCompleted, userState);
        }
        
        private void OnUpdateMEGOperationCompleted(object arg) {
            if ((this.UpdateMEGCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateMEGCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/GetClassificationGroup", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ClassificationGroup GetClassificationGroup(string key, int id) {
            object[] results = this.Invoke("GetClassificationGroup", new object[] {
                        key,
                        id});
            return ((ClassificationGroup)(results[0]));
        }
        
        /// <remarks/>
        public void GetClassificationGroupAsync(string key, int id) {
            this.GetClassificationGroupAsync(key, id, null);
        }
        
        /// <remarks/>
        public void GetClassificationGroupAsync(string key, int id, object userState) {
            if ((this.GetClassificationGroupOperationCompleted == null)) {
                this.GetClassificationGroupOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetClassificationGroupOperationCompleted);
            }
            this.InvokeAsync("GetClassificationGroup", new object[] {
                        key,
                        id}, this.GetClassificationGroupOperationCompleted, userState);
        }
        
        private void OnGetClassificationGroupOperationCompleted(object arg) {
            if ((this.GetClassificationGroupCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetClassificationGroupCompleted(this, new GetClassificationGroupCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/GetAllClassificationGroups", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ClassificationGroup[] GetAllClassificationGroups(string key, int clientID) {
            object[] results = this.Invoke("GetAllClassificationGroups", new object[] {
                        key,
                        clientID});
            return ((ClassificationGroup[])(results[0]));
        }
        
        /// <remarks/>
        public void GetAllClassificationGroupsAsync(string key, int clientID) {
            this.GetAllClassificationGroupsAsync(key, clientID, null);
        }
        
        /// <remarks/>
        public void GetAllClassificationGroupsAsync(string key, int clientID, object userState) {
            if ((this.GetAllClassificationGroupsOperationCompleted == null)) {
                this.GetAllClassificationGroupsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAllClassificationGroupsOperationCompleted);
            }
            this.InvokeAsync("GetAllClassificationGroups", new object[] {
                        key,
                        clientID}, this.GetAllClassificationGroupsOperationCompleted, userState);
        }
        
        private void OnGetAllClassificationGroupsOperationCompleted(object arg) {
            if ((this.GetAllClassificationGroupsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAllClassificationGroupsCompleted(this, new GetAllClassificationGroupsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/AddClassificationGroup", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int AddClassificationGroup(string key, int clientID, string groupName) {
            object[] results = this.Invoke("AddClassificationGroup", new object[] {
                        key,
                        clientID,
                        groupName});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void AddClassificationGroupAsync(string key, int clientID, string groupName) {
            this.AddClassificationGroupAsync(key, clientID, groupName, null);
        }
        
        /// <remarks/>
        public void AddClassificationGroupAsync(string key, int clientID, string groupName, object userState) {
            if ((this.AddClassificationGroupOperationCompleted == null)) {
                this.AddClassificationGroupOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddClassificationGroupOperationCompleted);
            }
            this.InvokeAsync("AddClassificationGroup", new object[] {
                        key,
                        clientID,
                        groupName}, this.AddClassificationGroupOperationCompleted, userState);
        }
        
        private void OnAddClassificationGroupOperationCompleted(object arg) {
            if ((this.AddClassificationGroupCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddClassificationGroupCompleted(this, new AddClassificationGroupCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/GetCustomerMessage", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CustomerMessage GetCustomerMessage(string key, int id) {
            object[] results = this.Invoke("GetCustomerMessage", new object[] {
                        key,
                        id});
            return ((CustomerMessage)(results[0]));
        }
        
        /// <remarks/>
        public void GetCustomerMessageAsync(string key, int id) {
            this.GetCustomerMessageAsync(key, id, null);
        }
        
        /// <remarks/>
        public void GetCustomerMessageAsync(string key, int id, object userState) {
            if ((this.GetCustomerMessageOperationCompleted == null)) {
                this.GetCustomerMessageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCustomerMessageOperationCompleted);
            }
            this.InvokeAsync("GetCustomerMessage", new object[] {
                        key,
                        id}, this.GetCustomerMessageOperationCompleted, userState);
        }
        
        private void OnGetCustomerMessageOperationCompleted(object arg) {
            if ((this.GetCustomerMessageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCustomerMessageCompleted(this, new GetCustomerMessageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/GetCustomerMessagesByClientID", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CustomerMessage[] GetCustomerMessagesByClientID(string key, int clientID) {
            object[] results = this.Invoke("GetCustomerMessagesByClientID", new object[] {
                        key,
                        clientID});
            return ((CustomerMessage[])(results[0]));
        }
        
        /// <remarks/>
        public void GetCustomerMessagesByClientIDAsync(string key, int clientID) {
            this.GetCustomerMessagesByClientIDAsync(key, clientID, null);
        }
        
        /// <remarks/>
        public void GetCustomerMessagesByClientIDAsync(string key, int clientID, object userState) {
            if ((this.GetCustomerMessagesByClientIDOperationCompleted == null)) {
                this.GetCustomerMessagesByClientIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCustomerMessagesByClientIDOperationCompleted);
            }
            this.InvokeAsync("GetCustomerMessagesByClientID", new object[] {
                        key,
                        clientID}, this.GetCustomerMessagesByClientIDOperationCompleted, userState);
        }
        
        private void OnGetCustomerMessagesByClientIDOperationCompleted(object arg) {
            if ((this.GetCustomerMessagesByClientIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCustomerMessagesByClientIDCompleted(this, new GetCustomerMessagesByClientIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/UpdateCustomerMessage", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpdateCustomerMessage(string key, int id, CustomerMessage message) {
            this.Invoke("UpdateCustomerMessage", new object[] {
                        key,
                        id,
                        message});
        }
        
        /// <remarks/>
        public void UpdateCustomerMessageAsync(string key, int id, CustomerMessage message) {
            this.UpdateCustomerMessageAsync(key, id, message, null);
        }
        
        /// <remarks/>
        public void UpdateCustomerMessageAsync(string key, int id, CustomerMessage message, object userState) {
            if ((this.UpdateCustomerMessageOperationCompleted == null)) {
                this.UpdateCustomerMessageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateCustomerMessageOperationCompleted);
            }
            this.InvokeAsync("UpdateCustomerMessage", new object[] {
                        key,
                        id,
                        message}, this.UpdateCustomerMessageOperationCompleted, userState);
        }
        
        private void OnUpdateCustomerMessageOperationCompleted(object arg) {
            if ((this.UpdateCustomerMessageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateCustomerMessageCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/DeleteCustomerMessage", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteCustomerMessage(string key, int id) {
            this.Invoke("DeleteCustomerMessage", new object[] {
                        key,
                        id});
        }
        
        /// <remarks/>
        public void DeleteCustomerMessageAsync(string key, int id) {
            this.DeleteCustomerMessageAsync(key, id, null);
        }
        
        /// <remarks/>
        public void DeleteCustomerMessageAsync(string key, int id, object userState) {
            if ((this.DeleteCustomerMessageOperationCompleted == null)) {
                this.DeleteCustomerMessageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteCustomerMessageOperationCompleted);
            }
            this.InvokeAsync("DeleteCustomerMessage", new object[] {
                        key,
                        id}, this.DeleteCustomerMessageOperationCompleted, userState);
        }
        
        private void OnDeleteCustomerMessageOperationCompleted(object arg) {
            if ((this.DeleteCustomerMessageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteCustomerMessageCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/AddCustomerMessage", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int AddCustomerMessage(string key, CustomerMessage message) {
            object[] results = this.Invoke("AddCustomerMessage", new object[] {
                        key,
                        message});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void AddCustomerMessageAsync(string key, CustomerMessage message) {
            this.AddCustomerMessageAsync(key, message, null);
        }
        
        /// <remarks/>
        public void AddCustomerMessageAsync(string key, CustomerMessage message, object userState) {
            if ((this.AddCustomerMessageOperationCompleted == null)) {
                this.AddCustomerMessageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddCustomerMessageOperationCompleted);
            }
            this.InvokeAsync("AddCustomerMessage", new object[] {
                        key,
                        message}, this.AddCustomerMessageOperationCompleted, userState);
        }
        
        private void OnAddCustomerMessageOperationCompleted(object arg) {
            if ((this.AddCustomerMessageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddCustomerMessageCompleted(this, new AddCustomerMessageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/GetJetnettMessage", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public JetnettMessage GetJetnettMessage(string key, int id) {
            object[] results = this.Invoke("GetJetnettMessage", new object[] {
                        key,
                        id});
            return ((JetnettMessage)(results[0]));
        }
        
        /// <remarks/>
        public void GetJetnettMessageAsync(string key, int id) {
            this.GetJetnettMessageAsync(key, id, null);
        }
        
        /// <remarks/>
        public void GetJetnettMessageAsync(string key, int id, object userState) {
            if ((this.GetJetnettMessageOperationCompleted == null)) {
                this.GetJetnettMessageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetJetnettMessageOperationCompleted);
            }
            this.InvokeAsync("GetJetnettMessage", new object[] {
                        key,
                        id}, this.GetJetnettMessageOperationCompleted, userState);
        }
        
        private void OnGetJetnettMessageOperationCompleted(object arg) {
            if ((this.GetJetnettMessageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetJetnettMessageCompleted(this, new GetJetnettMessageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/UpdateJetnettMessage", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpdateJetnettMessage(string key, int id, JetnettMessage message) {
            this.Invoke("UpdateJetnettMessage", new object[] {
                        key,
                        id,
                        message});
        }
        
        /// <remarks/>
        public void UpdateJetnettMessageAsync(string key, int id, JetnettMessage message) {
            this.UpdateJetnettMessageAsync(key, id, message, null);
        }
        
        /// <remarks/>
        public void UpdateJetnettMessageAsync(string key, int id, JetnettMessage message, object userState) {
            if ((this.UpdateJetnettMessageOperationCompleted == null)) {
                this.UpdateJetnettMessageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateJetnettMessageOperationCompleted);
            }
            this.InvokeAsync("UpdateJetnettMessage", new object[] {
                        key,
                        id,
                        message}, this.UpdateJetnettMessageOperationCompleted, userState);
        }
        
        private void OnUpdateJetnettMessageOperationCompleted(object arg) {
            if ((this.UpdateJetnettMessageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateJetnettMessageCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/GetSentMessagesByClientID", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public JetnettMessage[] GetSentMessagesByClientID(string key, int clientID) {
            object[] results = this.Invoke("GetSentMessagesByClientID", new object[] {
                        key,
                        clientID});
            return ((JetnettMessage[])(results[0]));
        }
        
        /// <remarks/>
        public void GetSentMessagesByClientIDAsync(string key, int clientID) {
            this.GetSentMessagesByClientIDAsync(key, clientID, null);
        }
        
        /// <remarks/>
        public void GetSentMessagesByClientIDAsync(string key, int clientID, object userState) {
            if ((this.GetSentMessagesByClientIDOperationCompleted == null)) {
                this.GetSentMessagesByClientIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSentMessagesByClientIDOperationCompleted);
            }
            this.InvokeAsync("GetSentMessagesByClientID", new object[] {
                        key,
                        clientID}, this.GetSentMessagesByClientIDOperationCompleted, userState);
        }
        
        private void OnGetSentMessagesByClientIDOperationCompleted(object arg) {
            if ((this.GetSentMessagesByClientIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSentMessagesByClientIDCompleted(this, new GetSentMessagesByClientIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/GetInboxByClientID", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public JetnettMessage[] GetInboxByClientID(string key, int clientID) {
            object[] results = this.Invoke("GetInboxByClientID", new object[] {
                        key,
                        clientID});
            return ((JetnettMessage[])(results[0]));
        }
        
        /// <remarks/>
        public void GetInboxByClientIDAsync(string key, int clientID) {
            this.GetInboxByClientIDAsync(key, clientID, null);
        }
        
        /// <remarks/>
        public void GetInboxByClientIDAsync(string key, int clientID, object userState) {
            if ((this.GetInboxByClientIDOperationCompleted == null)) {
                this.GetInboxByClientIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetInboxByClientIDOperationCompleted);
            }
            this.InvokeAsync("GetInboxByClientID", new object[] {
                        key,
                        clientID}, this.GetInboxByClientIDOperationCompleted, userState);
        }
        
        private void OnGetInboxByClientIDOperationCompleted(object arg) {
            if ((this.GetInboxByClientIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetInboxByClientIDCompleted(this, new GetInboxByClientIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/GetMessagesCount", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GetMessagesCount(string key, int clientID) {
            object[] results = this.Invoke("GetMessagesCount", new object[] {
                        key,
                        clientID});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetMessagesCountAsync(string key, int clientID) {
            this.GetMessagesCountAsync(key, clientID, null);
        }
        
        /// <remarks/>
        public void GetMessagesCountAsync(string key, int clientID, object userState) {
            if ((this.GetMessagesCountOperationCompleted == null)) {
                this.GetMessagesCountOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMessagesCountOperationCompleted);
            }
            this.InvokeAsync("GetMessagesCount", new object[] {
                        key,
                        clientID}, this.GetMessagesCountOperationCompleted, userState);
        }
        
        private void OnGetMessagesCountOperationCompleted(object arg) {
            if ((this.GetMessagesCountCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMessagesCountCompleted(this, new GetMessagesCountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/DeleteJetnettMessage", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteJetnettMessage(string key, int id) {
            this.Invoke("DeleteJetnettMessage", new object[] {
                        key,
                        id});
        }
        
        /// <remarks/>
        public void DeleteJetnettMessageAsync(string key, int id) {
            this.DeleteJetnettMessageAsync(key, id, null);
        }
        
        /// <remarks/>
        public void DeleteJetnettMessageAsync(string key, int id, object userState) {
            if ((this.DeleteJetnettMessageOperationCompleted == null)) {
                this.DeleteJetnettMessageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteJetnettMessageOperationCompleted);
            }
            this.InvokeAsync("DeleteJetnettMessage", new object[] {
                        key,
                        id}, this.DeleteJetnettMessageOperationCompleted, userState);
        }
        
        private void OnDeleteJetnettMessageOperationCompleted(object arg) {
            if ((this.DeleteJetnettMessageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteJetnettMessageCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/AddJetnettMessage", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int AddJetnettMessage(string key, JetnettMessage message) {
            object[] results = this.Invoke("AddJetnettMessage", new object[] {
                        key,
                        message});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void AddJetnettMessageAsync(string key, JetnettMessage message) {
            this.AddJetnettMessageAsync(key, message, null);
        }
        
        /// <remarks/>
        public void AddJetnettMessageAsync(string key, JetnettMessage message, object userState) {
            if ((this.AddJetnettMessageOperationCompleted == null)) {
                this.AddJetnettMessageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddJetnettMessageOperationCompleted);
            }
            this.InvokeAsync("AddJetnettMessage", new object[] {
                        key,
                        message}, this.AddJetnettMessageOperationCompleted, userState);
        }
        
        private void OnAddJetnettMessageOperationCompleted(object arg) {
            if ((this.AddJetnettMessageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddJetnettMessageCompleted(this, new AddJetnettMessageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/UpdateBottomRightGraphic", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpdateBottomRightGraphic(string key, int homePageID, string url) {
            this.Invoke("UpdateBottomRightGraphic", new object[] {
                        key,
                        homePageID,
                        url});
        }
        
        /// <remarks/>
        public void UpdateBottomRightGraphicAsync(string key, int homePageID, string url) {
            this.UpdateBottomRightGraphicAsync(key, homePageID, url, null);
        }
        
        /// <remarks/>
        public void UpdateBottomRightGraphicAsync(string key, int homePageID, string url, object userState) {
            if ((this.UpdateBottomRightGraphicOperationCompleted == null)) {
                this.UpdateBottomRightGraphicOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateBottomRightGraphicOperationCompleted);
            }
            this.InvokeAsync("UpdateBottomRightGraphic", new object[] {
                        key,
                        homePageID,
                        url}, this.UpdateBottomRightGraphicOperationCompleted, userState);
        }
        
        private void OnUpdateBottomRightGraphicOperationCompleted(object arg) {
            if ((this.UpdateBottomRightGraphicCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateBottomRightGraphicCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/UpdateBottomLeftGraphic", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpdateBottomLeftGraphic(string key, int homePageID, string url) {
            this.Invoke("UpdateBottomLeftGraphic", new object[] {
                        key,
                        homePageID,
                        url});
        }
        
        /// <remarks/>
        public void UpdateBottomLeftGraphicAsync(string key, int homePageID, string url) {
            this.UpdateBottomLeftGraphicAsync(key, homePageID, url, null);
        }
        
        /// <remarks/>
        public void UpdateBottomLeftGraphicAsync(string key, int homePageID, string url, object userState) {
            if ((this.UpdateBottomLeftGraphicOperationCompleted == null)) {
                this.UpdateBottomLeftGraphicOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateBottomLeftGraphicOperationCompleted);
            }
            this.InvokeAsync("UpdateBottomLeftGraphic", new object[] {
                        key,
                        homePageID,
                        url}, this.UpdateBottomLeftGraphicOperationCompleted, userState);
        }
        
        private void OnUpdateBottomLeftGraphicOperationCompleted(object arg) {
            if ((this.UpdateBottomLeftGraphicCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateBottomLeftGraphicCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/GetHomePageByClientID", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Home_Page GetHomePageByClientID(string key, int clientID) {
            object[] results = this.Invoke("GetHomePageByClientID", new object[] {
                        key,
                        clientID});
            return ((Home_Page)(results[0]));
        }
        
        /// <remarks/>
        public void GetHomePageByClientIDAsync(string key, int clientID) {
            this.GetHomePageByClientIDAsync(key, clientID, null);
        }
        
        /// <remarks/>
        public void GetHomePageByClientIDAsync(string key, int clientID, object userState) {
            if ((this.GetHomePageByClientIDOperationCompleted == null)) {
                this.GetHomePageByClientIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetHomePageByClientIDOperationCompleted);
            }
            this.InvokeAsync("GetHomePageByClientID", new object[] {
                        key,
                        clientID}, this.GetHomePageByClientIDOperationCompleted, userState);
        }
        
        private void OnGetHomePageByClientIDOperationCompleted(object arg) {
            if ((this.GetHomePageByClientIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetHomePageByClientIDCompleted(this, new GetHomePageByClientIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/InsertHomePage", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int InsertHomePage(string key, Home_Page page) {
            object[] results = this.Invoke("InsertHomePage", new object[] {
                        key,
                        page});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void InsertHomePageAsync(string key, Home_Page page) {
            this.InsertHomePageAsync(key, page, null);
        }
        
        /// <remarks/>
        public void InsertHomePageAsync(string key, Home_Page page, object userState) {
            if ((this.InsertHomePageOperationCompleted == null)) {
                this.InsertHomePageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertHomePageOperationCompleted);
            }
            this.InvokeAsync("InsertHomePage", new object[] {
                        key,
                        page}, this.InsertHomePageOperationCompleted, userState);
        }
        
        private void OnInsertHomePageOperationCompleted(object arg) {
            if ((this.InsertHomePageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsertHomePageCompleted(this, new InsertHomePageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/UpdateHomePage", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpdateHomePage(string key, int id, Home_Page entity) {
            this.Invoke("UpdateHomePage", new object[] {
                        key,
                        id,
                        entity});
        }
        
        /// <remarks/>
        public void UpdateHomePageAsync(string key, int id, Home_Page entity) {
            this.UpdateHomePageAsync(key, id, entity, null);
        }
        
        /// <remarks/>
        public void UpdateHomePageAsync(string key, int id, Home_Page entity, object userState) {
            if ((this.UpdateHomePageOperationCompleted == null)) {
                this.UpdateHomePageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateHomePageOperationCompleted);
            }
            this.InvokeAsync("UpdateHomePage", new object[] {
                        key,
                        id,
                        entity}, this.UpdateHomePageOperationCompleted, userState);
        }
        
        private void OnUpdateHomePageOperationCompleted(object arg) {
            if ((this.UpdateHomePageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateHomePageCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/GetMenuLinksByFolder", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public MenuLinks[] GetMenuLinksByFolder(string key, int folderID) {
            object[] results = this.Invoke("GetMenuLinksByFolder", new object[] {
                        key,
                        folderID});
            return ((MenuLinks[])(results[0]));
        }
        
        /// <remarks/>
        public void GetMenuLinksByFolderAsync(string key, int folderID) {
            this.GetMenuLinksByFolderAsync(key, folderID, null);
        }
        
        /// <remarks/>
        public void GetMenuLinksByFolderAsync(string key, int folderID, object userState) {
            if ((this.GetMenuLinksByFolderOperationCompleted == null)) {
                this.GetMenuLinksByFolderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMenuLinksByFolderOperationCompleted);
            }
            this.InvokeAsync("GetMenuLinksByFolder", new object[] {
                        key,
                        folderID}, this.GetMenuLinksByFolderOperationCompleted, userState);
        }
        
        private void OnGetMenuLinksByFolderOperationCompleted(object arg) {
            if ((this.GetMenuLinksByFolderCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMenuLinksByFolderCompleted(this, new GetMenuLinksByFolderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/GetMenuLinks", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public menuLink[] GetMenuLinks(string key, int folderID) {
            object[] results = this.Invoke("GetMenuLinks", new object[] {
                        key,
                        folderID});
            return ((menuLink[])(results[0]));
        }
        
        /// <remarks/>
        public void GetMenuLinksAsync(string key, int folderID) {
            this.GetMenuLinksAsync(key, folderID, null);
        }
        
        /// <remarks/>
        public void GetMenuLinksAsync(string key, int folderID, object userState) {
            if ((this.GetMenuLinksOperationCompleted == null)) {
                this.GetMenuLinksOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMenuLinksOperationCompleted);
            }
            this.InvokeAsync("GetMenuLinks", new object[] {
                        key,
                        folderID}, this.GetMenuLinksOperationCompleted, userState);
        }
        
        private void OnGetMenuLinksOperationCompleted(object arg) {
            if ((this.GetMenuLinksCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMenuLinksCompleted(this, new GetMenuLinksCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/GetMenuLink", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public MenuLinks GetMenuLink(string key, int clientID, int position) {
            object[] results = this.Invoke("GetMenuLink", new object[] {
                        key,
                        clientID,
                        position});
            return ((MenuLinks)(results[0]));
        }
        
        /// <remarks/>
        public void GetMenuLinkAsync(string key, int clientID, int position) {
            this.GetMenuLinkAsync(key, clientID, position, null);
        }
        
        /// <remarks/>
        public void GetMenuLinkAsync(string key, int clientID, int position, object userState) {
            if ((this.GetMenuLinkOperationCompleted == null)) {
                this.GetMenuLinkOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMenuLinkOperationCompleted);
            }
            this.InvokeAsync("GetMenuLink", new object[] {
                        key,
                        clientID,
                        position}, this.GetMenuLinkOperationCompleted, userState);
        }
        
        private void OnGetMenuLinkOperationCompleted(object arg) {
            if ((this.GetMenuLinkCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMenuLinkCompleted(this, new GetMenuLinkCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/CopyFolderToNewClient", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int CopyFolderToNewClient(string key, int existingFolderID, int newClientID) {
            object[] results = this.Invoke("CopyFolderToNewClient", new object[] {
                        key,
                        existingFolderID,
                        newClientID});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void CopyFolderToNewClientAsync(string key, int existingFolderID, int newClientID) {
            this.CopyFolderToNewClientAsync(key, existingFolderID, newClientID, null);
        }
        
        /// <remarks/>
        public void CopyFolderToNewClientAsync(string key, int existingFolderID, int newClientID, object userState) {
            if ((this.CopyFolderToNewClientOperationCompleted == null)) {
                this.CopyFolderToNewClientOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCopyFolderToNewClientOperationCompleted);
            }
            this.InvokeAsync("CopyFolderToNewClient", new object[] {
                        key,
                        existingFolderID,
                        newClientID}, this.CopyFolderToNewClientOperationCompleted, userState);
        }
        
        private void OnCopyFolderToNewClientOperationCompleted(object arg) {
            if ((this.CopyFolderToNewClientCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CopyFolderToNewClientCompleted(this, new CopyFolderToNewClientCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/UpdateMenuLink", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpdateMenuLink(string key, MenuLinks entity) {
            this.Invoke("UpdateMenuLink", new object[] {
                        key,
                        entity});
        }
        
        /// <remarks/>
        public void UpdateMenuLinkAsync(string key, MenuLinks entity) {
            this.UpdateMenuLinkAsync(key, entity, null);
        }
        
        /// <remarks/>
        public void UpdateMenuLinkAsync(string key, MenuLinks entity, object userState) {
            if ((this.UpdateMenuLinkOperationCompleted == null)) {
                this.UpdateMenuLinkOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateMenuLinkOperationCompleted);
            }
            this.InvokeAsync("UpdateMenuLink", new object[] {
                        key,
                        entity}, this.UpdateMenuLinkOperationCompleted, userState);
        }
        
        private void OnUpdateMenuLinkOperationCompleted(object arg) {
            if ((this.UpdateMenuLinkCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateMenuLinkCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/DeleteMenuLink", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteMenuLink(string key, int id) {
            this.Invoke("DeleteMenuLink", new object[] {
                        key,
                        id});
        }
        
        /// <remarks/>
        public void DeleteMenuLinkAsync(string key, int id) {
            this.DeleteMenuLinkAsync(key, id, null);
        }
        
        /// <remarks/>
        public void DeleteMenuLinkAsync(string key, int id, object userState) {
            if ((this.DeleteMenuLinkOperationCompleted == null)) {
                this.DeleteMenuLinkOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteMenuLinkOperationCompleted);
            }
            this.InvokeAsync("DeleteMenuLink", new object[] {
                        key,
                        id}, this.DeleteMenuLinkOperationCompleted, userState);
        }
        
        private void OnDeleteMenuLinkOperationCompleted(object arg) {
            if ((this.DeleteMenuLinkCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteMenuLinkCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/InsertMenuLink1", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int InsertMenuLink1(string key, MenuLinks menuLink) {
            object[] results = this.Invoke("InsertMenuLink1", new object[] {
                        key,
                        menuLink});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void InsertMenuLink1Async(string key, MenuLinks menuLink) {
            this.InsertMenuLink1Async(key, menuLink, null);
        }
        
        /// <remarks/>
        public void InsertMenuLink1Async(string key, MenuLinks menuLink, object userState) {
            if ((this.InsertMenuLink1OperationCompleted == null)) {
                this.InsertMenuLink1OperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertMenuLink1OperationCompleted);
            }
            this.InvokeAsync("InsertMenuLink1", new object[] {
                        key,
                        menuLink}, this.InsertMenuLink1OperationCompleted, userState);
        }
        
        private void OnInsertMenuLink1OperationCompleted(object arg) {
            if ((this.InsertMenuLink1Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsertMenuLink1Completed(this, new InsertMenuLink1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/InsertMenuFolderAndClient", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void InsertMenuFolderAndClient(string key, int clientID, int folderID) {
            this.Invoke("InsertMenuFolderAndClient", new object[] {
                        key,
                        clientID,
                        folderID});
        }
        
        /// <remarks/>
        public void InsertMenuFolderAndClientAsync(string key, int clientID, int folderID) {
            this.InsertMenuFolderAndClientAsync(key, clientID, folderID, null);
        }
        
        /// <remarks/>
        public void InsertMenuFolderAndClientAsync(string key, int clientID, int folderID, object userState) {
            if ((this.InsertMenuFolderAndClientOperationCompleted == null)) {
                this.InsertMenuFolderAndClientOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertMenuFolderAndClientOperationCompleted);
            }
            this.InvokeAsync("InsertMenuFolderAndClient", new object[] {
                        key,
                        clientID,
                        folderID}, this.InsertMenuFolderAndClientOperationCompleted, userState);
        }
        
        private void OnInsertMenuFolderAndClientOperationCompleted(object arg) {
            if ((this.InsertMenuFolderAndClientCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsertMenuFolderAndClientCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/GetMenuFolderFromClient", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GetMenuFolderFromClient(string key, int clientID) {
            object[] results = this.Invoke("GetMenuFolderFromClient", new object[] {
                        key,
                        clientID});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetMenuFolderFromClientAsync(string key, int clientID) {
            this.GetMenuFolderFromClientAsync(key, clientID, null);
        }
        
        /// <remarks/>
        public void GetMenuFolderFromClientAsync(string key, int clientID, object userState) {
            if ((this.GetMenuFolderFromClientOperationCompleted == null)) {
                this.GetMenuFolderFromClientOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMenuFolderFromClientOperationCompleted);
            }
            this.InvokeAsync("GetMenuFolderFromClient", new object[] {
                        key,
                        clientID}, this.GetMenuFolderFromClientOperationCompleted, userState);
        }
        
        private void OnGetMenuFolderFromClientOperationCompleted(object arg) {
            if ((this.GetMenuFolderFromClientCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMenuFolderFromClientCompleted(this, new GetMenuFolderFromClientCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/UpdateMenuFolderFromClient", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpdateMenuFolderFromClient(string key, int clientID, int folderID) {
            this.Invoke("UpdateMenuFolderFromClient", new object[] {
                        key,
                        clientID,
                        folderID});
        }
        
        /// <remarks/>
        public void UpdateMenuFolderFromClientAsync(string key, int clientID, int folderID) {
            this.UpdateMenuFolderFromClientAsync(key, clientID, folderID, null);
        }
        
        /// <remarks/>
        public void UpdateMenuFolderFromClientAsync(string key, int clientID, int folderID, object userState) {
            if ((this.UpdateMenuFolderFromClientOperationCompleted == null)) {
                this.UpdateMenuFolderFromClientOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateMenuFolderFromClientOperationCompleted);
            }
            this.InvokeAsync("UpdateMenuFolderFromClient", new object[] {
                        key,
                        clientID,
                        folderID}, this.UpdateMenuFolderFromClientOperationCompleted, userState);
        }
        
        private void OnUpdateMenuFolderFromClientOperationCompleted(object arg) {
            if ((this.UpdateMenuFolderFromClientCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateMenuFolderFromClientCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/GetAllMenuLinks", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public menuLink[] GetAllMenuLinks(string key, int folderID) {
            object[] results = this.Invoke("GetAllMenuLinks", new object[] {
                        key,
                        folderID});
            return ((menuLink[])(results[0]));
        }
        
        /// <remarks/>
        public void GetAllMenuLinksAsync(string key, int folderID) {
            this.GetAllMenuLinksAsync(key, folderID, null);
        }
        
        /// <remarks/>
        public void GetAllMenuLinksAsync(string key, int folderID, object userState) {
            if ((this.GetAllMenuLinksOperationCompleted == null)) {
                this.GetAllMenuLinksOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAllMenuLinksOperationCompleted);
            }
            this.InvokeAsync("GetAllMenuLinks", new object[] {
                        key,
                        folderID}, this.GetAllMenuLinksOperationCompleted, userState);
        }
        
        private void OnGetAllMenuLinksOperationCompleted(object arg) {
            if ((this.GetAllMenuLinksCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAllMenuLinksCompleted(this, new GetAllMenuLinksCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/InsertMenuLink", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int InsertMenuLink(string key, menuLink menuLink) {
            object[] results = this.Invoke("InsertMenuLink", new object[] {
                        key,
                        menuLink});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void InsertMenuLinkAsync(string key, menuLink menuLink) {
            this.InsertMenuLinkAsync(key, menuLink, null);
        }
        
        /// <remarks/>
        public void InsertMenuLinkAsync(string key, menuLink menuLink, object userState) {
            if ((this.InsertMenuLinkOperationCompleted == null)) {
                this.InsertMenuLinkOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertMenuLinkOperationCompleted);
            }
            this.InvokeAsync("InsertMenuLink", new object[] {
                        key,
                        menuLink}, this.InsertMenuLinkOperationCompleted, userState);
        }
        
        private void OnInsertMenuLinkOperationCompleted(object arg) {
            if ((this.InsertMenuLinkCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsertMenuLinkCompleted(this, new InsertMenuLinkCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/GetLinksContainingURL", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Link[] GetLinksContainingURL(string Key, string url) {
            object[] results = this.Invoke("GetLinksContainingURL", new object[] {
                        Key,
                        url});
            return ((Link[])(results[0]));
        }
        
        /// <remarks/>
        public void GetLinksContainingURLAsync(string Key, string url) {
            this.GetLinksContainingURLAsync(Key, url, null);
        }
        
        /// <remarks/>
        public void GetLinksContainingURLAsync(string Key, string url, object userState) {
            if ((this.GetLinksContainingURLOperationCompleted == null)) {
                this.GetLinksContainingURLOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLinksContainingURLOperationCompleted);
            }
            this.InvokeAsync("GetLinksContainingURL", new object[] {
                        Key,
                        url}, this.GetLinksContainingURLOperationCompleted, userState);
        }
        
        private void OnGetLinksContainingURLOperationCompleted(object arg) {
            if ((this.GetLinksContainingURLCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetLinksContainingURLCompleted(this, new GetLinksContainingURLCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/GetLinksFromPage", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Link[] GetLinksFromPage(string Key, int pageID) {
            object[] results = this.Invoke("GetLinksFromPage", new object[] {
                        Key,
                        pageID});
            return ((Link[])(results[0]));
        }
        
        /// <remarks/>
        public void GetLinksFromPageAsync(string Key, int pageID) {
            this.GetLinksFromPageAsync(Key, pageID, null);
        }
        
        /// <remarks/>
        public void GetLinksFromPageAsync(string Key, int pageID, object userState) {
            if ((this.GetLinksFromPageOperationCompleted == null)) {
                this.GetLinksFromPageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLinksFromPageOperationCompleted);
            }
            this.InvokeAsync("GetLinksFromPage", new object[] {
                        Key,
                        pageID}, this.GetLinksFromPageOperationCompleted, userState);
        }
        
        private void OnGetLinksFromPageOperationCompleted(object arg) {
            if ((this.GetLinksFromPageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetLinksFromPageCompleted(this, new GetLinksFromPageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/InsertLink", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int InsertLink(string key, Link link) {
            object[] results = this.Invoke("InsertLink", new object[] {
                        key,
                        link});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void InsertLinkAsync(string key, Link link) {
            this.InsertLinkAsync(key, link, null);
        }
        
        /// <remarks/>
        public void InsertLinkAsync(string key, Link link, object userState) {
            if ((this.InsertLinkOperationCompleted == null)) {
                this.InsertLinkOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertLinkOperationCompleted);
            }
            this.InvokeAsync("InsertLink", new object[] {
                        key,
                        link}, this.InsertLinkOperationCompleted, userState);
        }
        
        private void OnInsertLinkOperationCompleted(object arg) {
            if ((this.InsertLinkCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsertLinkCompleted(this, new InsertLinkCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/DeleteLink", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteLink(string Key, int linkID) {
            this.Invoke("DeleteLink", new object[] {
                        Key,
                        linkID});
        }
        
        /// <remarks/>
        public void DeleteLinkAsync(string Key, int linkID) {
            this.DeleteLinkAsync(Key, linkID, null);
        }
        
        /// <remarks/>
        public void DeleteLinkAsync(string Key, int linkID, object userState) {
            if ((this.DeleteLinkOperationCompleted == null)) {
                this.DeleteLinkOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteLinkOperationCompleted);
            }
            this.InvokeAsync("DeleteLink", new object[] {
                        Key,
                        linkID}, this.DeleteLinkOperationCompleted, userState);
        }
        
        private void OnDeleteLinkOperationCompleted(object arg) {
            if ((this.DeleteLinkCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteLinkCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/GetLink", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Link GetLink(string Key, int id) {
            object[] results = this.Invoke("GetLink", new object[] {
                        Key,
                        id});
            return ((Link)(results[0]));
        }
        
        /// <remarks/>
        public void GetLinkAsync(string Key, int id) {
            this.GetLinkAsync(Key, id, null);
        }
        
        /// <remarks/>
        public void GetLinkAsync(string Key, int id, object userState) {
            if ((this.GetLinkOperationCompleted == null)) {
                this.GetLinkOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLinkOperationCompleted);
            }
            this.InvokeAsync("GetLink", new object[] {
                        Key,
                        id}, this.GetLinkOperationCompleted, userState);
        }
        
        private void OnGetLinkOperationCompleted(object arg) {
            if ((this.GetLinkCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetLinkCompleted(this, new GetLinkCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/UpdateLink", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpdateLink(string Key, int id, Link link) {
            this.Invoke("UpdateLink", new object[] {
                        Key,
                        id,
                        link});
        }
        
        /// <remarks/>
        public void UpdateLinkAsync(string Key, int id, Link link) {
            this.UpdateLinkAsync(Key, id, link, null);
        }
        
        /// <remarks/>
        public void UpdateLinkAsync(string Key, int id, Link link, object userState) {
            if ((this.UpdateLinkOperationCompleted == null)) {
                this.UpdateLinkOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateLinkOperationCompleted);
            }
            this.InvokeAsync("UpdateLink", new object[] {
                        Key,
                        id,
                        link}, this.UpdateLinkOperationCompleted, userState);
        }
        
        private void OnUpdateLinkOperationCompleted(object arg) {
            if ((this.UpdateLinkCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateLinkCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/OrganizeLinksByPosition", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void OrganizeLinksByPosition(string key, int pageID) {
            this.Invoke("OrganizeLinksByPosition", new object[] {
                        key,
                        pageID});
        }
        
        /// <remarks/>
        public void OrganizeLinksByPositionAsync(string key, int pageID) {
            this.OrganizeLinksByPositionAsync(key, pageID, null);
        }
        
        /// <remarks/>
        public void OrganizeLinksByPositionAsync(string key, int pageID, object userState) {
            if ((this.OrganizeLinksByPositionOperationCompleted == null)) {
                this.OrganizeLinksByPositionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnOrganizeLinksByPositionOperationCompleted);
            }
            this.InvokeAsync("OrganizeLinksByPosition", new object[] {
                        key,
                        pageID}, this.OrganizeLinksByPositionOperationCompleted, userState);
        }
        
        private void OnOrganizeLinksByPositionOperationCompleted(object arg) {
            if ((this.OrganizeLinksByPositionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.OrganizeLinksByPositionCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/GetInformationPage", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Information_Page GetInformationPage(string key, int ID) {
            object[] results = this.Invoke("GetInformationPage", new object[] {
                        key,
                        ID});
            return ((Information_Page)(results[0]));
        }
        
        /// <remarks/>
        public void GetInformationPageAsync(string key, int ID) {
            this.GetInformationPageAsync(key, ID, null);
        }
        
        /// <remarks/>
        public void GetInformationPageAsync(string key, int ID, object userState) {
            if ((this.GetInformationPageOperationCompleted == null)) {
                this.GetInformationPageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetInformationPageOperationCompleted);
            }
            this.InvokeAsync("GetInformationPage", new object[] {
                        key,
                        ID}, this.GetInformationPageOperationCompleted, userState);
        }
        
        private void OnGetInformationPageOperationCompleted(object arg) {
            if ((this.GetInformationPageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetInformationPageCompleted(this, new GetInformationPageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/InsertInformationPage", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int InsertInformationPage(string key, Information_Page entity) {
            object[] results = this.Invoke("InsertInformationPage", new object[] {
                        key,
                        entity});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void InsertInformationPageAsync(string key, Information_Page entity) {
            this.InsertInformationPageAsync(key, entity, null);
        }
        
        /// <remarks/>
        public void InsertInformationPageAsync(string key, Information_Page entity, object userState) {
            if ((this.InsertInformationPageOperationCompleted == null)) {
                this.InsertInformationPageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertInformationPageOperationCompleted);
            }
            this.InvokeAsync("InsertInformationPage", new object[] {
                        key,
                        entity}, this.InsertInformationPageOperationCompleted, userState);
        }
        
        private void OnInsertInformationPageOperationCompleted(object arg) {
            if ((this.InsertInformationPageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsertInformationPageCompleted(this, new InsertInformationPageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/DeleteInformationPage", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteInformationPage(string key, int entityID) {
            this.Invoke("DeleteInformationPage", new object[] {
                        key,
                        entityID});
        }
        
        /// <remarks/>
        public void DeleteInformationPageAsync(string key, int entityID) {
            this.DeleteInformationPageAsync(key, entityID, null);
        }
        
        /// <remarks/>
        public void DeleteInformationPageAsync(string key, int entityID, object userState) {
            if ((this.DeleteInformationPageOperationCompleted == null)) {
                this.DeleteInformationPageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteInformationPageOperationCompleted);
            }
            this.InvokeAsync("DeleteInformationPage", new object[] {
                        key,
                        entityID}, this.DeleteInformationPageOperationCompleted, userState);
        }
        
        private void OnDeleteInformationPageOperationCompleted(object arg) {
            if ((this.DeleteInformationPageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteInformationPageCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/UpdateInformationPage", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpdateInformationPage(string key, int id, Information_Page entity) {
            this.Invoke("UpdateInformationPage", new object[] {
                        key,
                        id,
                        entity});
        }
        
        /// <remarks/>
        public void UpdateInformationPageAsync(string key, int id, Information_Page entity) {
            this.UpdateInformationPageAsync(key, id, entity, null);
        }
        
        /// <remarks/>
        public void UpdateInformationPageAsync(string key, int id, Information_Page entity, object userState) {
            if ((this.UpdateInformationPageOperationCompleted == null)) {
                this.UpdateInformationPageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateInformationPageOperationCompleted);
            }
            this.InvokeAsync("UpdateInformationPage", new object[] {
                        key,
                        id,
                        entity}, this.UpdateInformationPageOperationCompleted, userState);
        }
        
        private void OnUpdateInformationPageOperationCompleted(object arg) {
            if ((this.UpdateInformationPageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateInformationPageCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/GetInformationPageByClientID", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Information_Page[] GetInformationPageByClientID(string key, int clientID) {
            object[] results = this.Invoke("GetInformationPageByClientID", new object[] {
                        key,
                        clientID});
            return ((Information_Page[])(results[0]));
        }
        
        /// <remarks/>
        public void GetInformationPageByClientIDAsync(string key, int clientID) {
            this.GetInformationPageByClientIDAsync(key, clientID, null);
        }
        
        /// <remarks/>
        public void GetInformationPageByClientIDAsync(string key, int clientID, object userState) {
            if ((this.GetInformationPageByClientIDOperationCompleted == null)) {
                this.GetInformationPageByClientIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetInformationPageByClientIDOperationCompleted);
            }
            this.InvokeAsync("GetInformationPageByClientID", new object[] {
                        key,
                        clientID}, this.GetInformationPageByClientIDOperationCompleted, userState);
        }
        
        private void OnGetInformationPageByClientIDOperationCompleted(object arg) {
            if ((this.GetInformationPageByClientIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetInformationPageByClientIDCompleted(this, new GetInformationPageByClientIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/GetContactPage", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Contact_Page GetContactPage(string key, int ID) {
            object[] results = this.Invoke("GetContactPage", new object[] {
                        key,
                        ID});
            return ((Contact_Page)(results[0]));
        }
        
        /// <remarks/>
        public void GetContactPageAsync(string key, int ID) {
            this.GetContactPageAsync(key, ID, null);
        }
        
        /// <remarks/>
        public void GetContactPageAsync(string key, int ID, object userState) {
            if ((this.GetContactPageOperationCompleted == null)) {
                this.GetContactPageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetContactPageOperationCompleted);
            }
            this.InvokeAsync("GetContactPage", new object[] {
                        key,
                        ID}, this.GetContactPageOperationCompleted, userState);
        }
        
        private void OnGetContactPageOperationCompleted(object arg) {
            if ((this.GetContactPageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetContactPageCompleted(this, new GetContactPageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/InsertContactPage", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int InsertContactPage(string key, Contact_Page entity) {
            object[] results = this.Invoke("InsertContactPage", new object[] {
                        key,
                        entity});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void InsertContactPageAsync(string key, Contact_Page entity) {
            this.InsertContactPageAsync(key, entity, null);
        }
        
        /// <remarks/>
        public void InsertContactPageAsync(string key, Contact_Page entity, object userState) {
            if ((this.InsertContactPageOperationCompleted == null)) {
                this.InsertContactPageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertContactPageOperationCompleted);
            }
            this.InvokeAsync("InsertContactPage", new object[] {
                        key,
                        entity}, this.InsertContactPageOperationCompleted, userState);
        }
        
        private void OnInsertContactPageOperationCompleted(object arg) {
            if ((this.InsertContactPageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsertContactPageCompleted(this, new InsertContactPageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/DeleteContactPage", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteContactPage(string key, int entityID) {
            this.Invoke("DeleteContactPage", new object[] {
                        key,
                        entityID});
        }
        
        /// <remarks/>
        public void DeleteContactPageAsync(string key, int entityID) {
            this.DeleteContactPageAsync(key, entityID, null);
        }
        
        /// <remarks/>
        public void DeleteContactPageAsync(string key, int entityID, object userState) {
            if ((this.DeleteContactPageOperationCompleted == null)) {
                this.DeleteContactPageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteContactPageOperationCompleted);
            }
            this.InvokeAsync("DeleteContactPage", new object[] {
                        key,
                        entityID}, this.DeleteContactPageOperationCompleted, userState);
        }
        
        private void OnDeleteContactPageOperationCompleted(object arg) {
            if ((this.DeleteContactPageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteContactPageCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/UpdateContactPage", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpdateContactPage(string key, int id, Contact_Page entity) {
            this.Invoke("UpdateContactPage", new object[] {
                        key,
                        id,
                        entity});
        }
        
        /// <remarks/>
        public void UpdateContactPageAsync(string key, int id, Contact_Page entity) {
            this.UpdateContactPageAsync(key, id, entity, null);
        }
        
        /// <remarks/>
        public void UpdateContactPageAsync(string key, int id, Contact_Page entity, object userState) {
            if ((this.UpdateContactPageOperationCompleted == null)) {
                this.UpdateContactPageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateContactPageOperationCompleted);
            }
            this.InvokeAsync("UpdateContactPage", new object[] {
                        key,
                        id,
                        entity}, this.UpdateContactPageOperationCompleted, userState);
        }
        
        private void OnUpdateContactPageOperationCompleted(object arg) {
            if ((this.UpdateContactPageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateContactPageCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/GetContactPagesByClientID", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Contact_Page[] GetContactPagesByClientID(string key, int clientID) {
            object[] results = this.Invoke("GetContactPagesByClientID", new object[] {
                        key,
                        clientID});
            return ((Contact_Page[])(results[0]));
        }
        
        /// <remarks/>
        public void GetContactPagesByClientIDAsync(string key, int clientID) {
            this.GetContactPagesByClientIDAsync(key, clientID, null);
        }
        
        /// <remarks/>
        public void GetContactPagesByClientIDAsync(string key, int clientID, object userState) {
            if ((this.GetContactPagesByClientIDOperationCompleted == null)) {
                this.GetContactPagesByClientIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetContactPagesByClientIDOperationCompleted);
            }
            this.InvokeAsync("GetContactPagesByClientID", new object[] {
                        key,
                        clientID}, this.GetContactPagesByClientIDOperationCompleted, userState);
        }
        
        private void OnGetContactPagesByClientIDOperationCompleted(object arg) {
            if ((this.GetContactPagesByClientIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetContactPagesByClientIDCompleted(this, new GetContactPagesByClientIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/GetCustomerLinkPagesByClientID", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Customer_Link_Page[] GetCustomerLinkPagesByClientID(string key, int clientID) {
            object[] results = this.Invoke("GetCustomerLinkPagesByClientID", new object[] {
                        key,
                        clientID});
            return ((Customer_Link_Page[])(results[0]));
        }
        
        /// <remarks/>
        public void GetCustomerLinkPagesByClientIDAsync(string key, int clientID) {
            this.GetCustomerLinkPagesByClientIDAsync(key, clientID, null);
        }
        
        /// <remarks/>
        public void GetCustomerLinkPagesByClientIDAsync(string key, int clientID, object userState) {
            if ((this.GetCustomerLinkPagesByClientIDOperationCompleted == null)) {
                this.GetCustomerLinkPagesByClientIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCustomerLinkPagesByClientIDOperationCompleted);
            }
            this.InvokeAsync("GetCustomerLinkPagesByClientID", new object[] {
                        key,
                        clientID}, this.GetCustomerLinkPagesByClientIDOperationCompleted, userState);
        }
        
        private void OnGetCustomerLinkPagesByClientIDOperationCompleted(object arg) {
            if ((this.GetCustomerLinkPagesByClientIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCustomerLinkPagesByClientIDCompleted(this, new GetCustomerLinkPagesByClientIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/InsertCustomerLinkPage", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void InsertCustomerLinkPage(string key, Customer_Link_Page entity) {
            this.Invoke("InsertCustomerLinkPage", new object[] {
                        key,
                        entity});
        }
        
        /// <remarks/>
        public void InsertCustomerLinkPageAsync(string key, Customer_Link_Page entity) {
            this.InsertCustomerLinkPageAsync(key, entity, null);
        }
        
        /// <remarks/>
        public void InsertCustomerLinkPageAsync(string key, Customer_Link_Page entity, object userState) {
            if ((this.InsertCustomerLinkPageOperationCompleted == null)) {
                this.InsertCustomerLinkPageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertCustomerLinkPageOperationCompleted);
            }
            this.InvokeAsync("InsertCustomerLinkPage", new object[] {
                        key,
                        entity}, this.InsertCustomerLinkPageOperationCompleted, userState);
        }
        
        private void OnInsertCustomerLinkPageOperationCompleted(object arg) {
            if ((this.InsertCustomerLinkPageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsertCustomerLinkPageCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/DeleteCustomerLinkPage", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteCustomerLinkPage(string key, int pageID) {
            this.Invoke("DeleteCustomerLinkPage", new object[] {
                        key,
                        pageID});
        }
        
        /// <remarks/>
        public void DeleteCustomerLinkPageAsync(string key, int pageID) {
            this.DeleteCustomerLinkPageAsync(key, pageID, null);
        }
        
        /// <remarks/>
        public void DeleteCustomerLinkPageAsync(string key, int pageID, object userState) {
            if ((this.DeleteCustomerLinkPageOperationCompleted == null)) {
                this.DeleteCustomerLinkPageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteCustomerLinkPageOperationCompleted);
            }
            this.InvokeAsync("DeleteCustomerLinkPage", new object[] {
                        key,
                        pageID}, this.DeleteCustomerLinkPageOperationCompleted, userState);
        }
        
        private void OnDeleteCustomerLinkPageOperationCompleted(object arg) {
            if ((this.DeleteCustomerLinkPageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteCustomerLinkPageCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/InsertPage", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int InsertPage(string key, Page entity) {
            object[] results = this.Invoke("InsertPage", new object[] {
                        key,
                        entity});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void InsertPageAsync(string key, Page entity) {
            this.InsertPageAsync(key, entity, null);
        }
        
        /// <remarks/>
        public void InsertPageAsync(string key, Page entity, object userState) {
            if ((this.InsertPageOperationCompleted == null)) {
                this.InsertPageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertPageOperationCompleted);
            }
            this.InvokeAsync("InsertPage", new object[] {
                        key,
                        entity}, this.InsertPageOperationCompleted, userState);
        }
        
        private void OnInsertPageOperationCompleted(object arg) {
            if ((this.InsertPageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsertPageCompleted(this, new InsertPageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/GetPage", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Page GetPage(string Key, int ID) {
            object[] results = this.Invoke("GetPage", new object[] {
                        Key,
                        ID});
            return ((Page)(results[0]));
        }
        
        /// <remarks/>
        public void GetPageAsync(string Key, int ID) {
            this.GetPageAsync(Key, ID, null);
        }
        
        /// <remarks/>
        public void GetPageAsync(string Key, int ID, object userState) {
            if ((this.GetPageOperationCompleted == null)) {
                this.GetPageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPageOperationCompleted);
            }
            this.InvokeAsync("GetPage", new object[] {
                        Key,
                        ID}, this.GetPageOperationCompleted, userState);
        }
        
        private void OnGetPageOperationCompleted(object arg) {
            if ((this.GetPageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPageCompleted(this, new GetPageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/UpdatePage", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpdatePage(string key, int id, Page entity) {
            this.Invoke("UpdatePage", new object[] {
                        key,
                        id,
                        entity});
        }
        
        /// <remarks/>
        public void UpdatePageAsync(string key, int id, Page entity) {
            this.UpdatePageAsync(key, id, entity, null);
        }
        
        /// <remarks/>
        public void UpdatePageAsync(string key, int id, Page entity, object userState) {
            if ((this.UpdatePageOperationCompleted == null)) {
                this.UpdatePageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdatePageOperationCompleted);
            }
            this.InvokeAsync("UpdatePage", new object[] {
                        key,
                        id,
                        entity}, this.UpdatePageOperationCompleted, userState);
        }
        
        private void OnUpdatePageOperationCompleted(object arg) {
            if ((this.UpdatePageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdatePageCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/GetZipCode", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetZipCode(string key, int pageID) {
            object[] results = this.Invoke("GetZipCode", new object[] {
                        key,
                        pageID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetZipCodeAsync(string key, int pageID) {
            this.GetZipCodeAsync(key, pageID, null);
        }
        
        /// <remarks/>
        public void GetZipCodeAsync(string key, int pageID, object userState) {
            if ((this.GetZipCodeOperationCompleted == null)) {
                this.GetZipCodeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetZipCodeOperationCompleted);
            }
            this.InvokeAsync("GetZipCode", new object[] {
                        key,
                        pageID}, this.GetZipCodeOperationCompleted, userState);
        }
        
        private void OnGetZipCodeOperationCompleted(object arg) {
            if ((this.GetZipCodeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetZipCodeCompleted(this, new GetZipCodeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/DeletePage", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeletePage(string key, int entityID) {
            this.Invoke("DeletePage", new object[] {
                        key,
                        entityID});
        }
        
        /// <remarks/>
        public void DeletePageAsync(string key, int entityID) {
            this.DeletePageAsync(key, entityID, null);
        }
        
        /// <remarks/>
        public void DeletePageAsync(string key, int entityID, object userState) {
            if ((this.DeletePageOperationCompleted == null)) {
                this.DeletePageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeletePageOperationCompleted);
            }
            this.InvokeAsync("DeletePage", new object[] {
                        key,
                        entityID}, this.DeletePageOperationCompleted, userState);
        }
        
        private void OnDeletePageOperationCompleted(object arg) {
            if ((this.DeletePageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeletePageCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/GetAllPages", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Page[] GetAllPages(string Key, int folderID) {
            object[] results = this.Invoke("GetAllPages", new object[] {
                        Key,
                        folderID});
            return ((Page[])(results[0]));
        }
        
        /// <remarks/>
        public void GetAllPagesAsync(string Key, int folderID) {
            this.GetAllPagesAsync(Key, folderID, null);
        }
        
        /// <remarks/>
        public void GetAllPagesAsync(string Key, int folderID, object userState) {
            if ((this.GetAllPagesOperationCompleted == null)) {
                this.GetAllPagesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAllPagesOperationCompleted);
            }
            this.InvokeAsync("GetAllPages", new object[] {
                        Key,
                        folderID}, this.GetAllPagesOperationCompleted, userState);
        }
        
        private void OnGetAllPagesOperationCompleted(object arg) {
            if ((this.GetAllPagesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAllPagesCompleted(this, new GetAllPagesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/GetContactPageStaffMember", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Contact_Page_Staff_Members GetContactPageStaffMember(string key, int ID) {
            object[] results = this.Invoke("GetContactPageStaffMember", new object[] {
                        key,
                        ID});
            return ((Contact_Page_Staff_Members)(results[0]));
        }
        
        /// <remarks/>
        public void GetContactPageStaffMemberAsync(string key, int ID) {
            this.GetContactPageStaffMemberAsync(key, ID, null);
        }
        
        /// <remarks/>
        public void GetContactPageStaffMemberAsync(string key, int ID, object userState) {
            if ((this.GetContactPageStaffMemberOperationCompleted == null)) {
                this.GetContactPageStaffMemberOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetContactPageStaffMemberOperationCompleted);
            }
            this.InvokeAsync("GetContactPageStaffMember", new object[] {
                        key,
                        ID}, this.GetContactPageStaffMemberOperationCompleted, userState);
        }
        
        private void OnGetContactPageStaffMemberOperationCompleted(object arg) {
            if ((this.GetContactPageStaffMemberCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetContactPageStaffMemberCompleted(this, new GetContactPageStaffMemberCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/InsertContactPageStaffMember", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int InsertContactPageStaffMember(string key, Contact_Page_Staff_Members entity) {
            object[] results = this.Invoke("InsertContactPageStaffMember", new object[] {
                        key,
                        entity});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void InsertContactPageStaffMemberAsync(string key, Contact_Page_Staff_Members entity) {
            this.InsertContactPageStaffMemberAsync(key, entity, null);
        }
        
        /// <remarks/>
        public void InsertContactPageStaffMemberAsync(string key, Contact_Page_Staff_Members entity, object userState) {
            if ((this.InsertContactPageStaffMemberOperationCompleted == null)) {
                this.InsertContactPageStaffMemberOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertContactPageStaffMemberOperationCompleted);
            }
            this.InvokeAsync("InsertContactPageStaffMember", new object[] {
                        key,
                        entity}, this.InsertContactPageStaffMemberOperationCompleted, userState);
        }
        
        private void OnInsertContactPageStaffMemberOperationCompleted(object arg) {
            if ((this.InsertContactPageStaffMemberCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsertContactPageStaffMemberCompleted(this, new InsertContactPageStaffMemberCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/DeleteContactPageStaffMember", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteContactPageStaffMember(string key, int entityID) {
            this.Invoke("DeleteContactPageStaffMember", new object[] {
                        key,
                        entityID});
        }
        
        /// <remarks/>
        public void DeleteContactPageStaffMemberAsync(string key, int entityID) {
            this.DeleteContactPageStaffMemberAsync(key, entityID, null);
        }
        
        /// <remarks/>
        public void DeleteContactPageStaffMemberAsync(string key, int entityID, object userState) {
            if ((this.DeleteContactPageStaffMemberOperationCompleted == null)) {
                this.DeleteContactPageStaffMemberOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteContactPageStaffMemberOperationCompleted);
            }
            this.InvokeAsync("DeleteContactPageStaffMember", new object[] {
                        key,
                        entityID}, this.DeleteContactPageStaffMemberOperationCompleted, userState);
        }
        
        private void OnDeleteContactPageStaffMemberOperationCompleted(object arg) {
            if ((this.DeleteContactPageStaffMemberCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteContactPageStaffMemberCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/UpdateContactPageStaffMember", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpdateContactPageStaffMember(string key, int id, Contact_Page_Staff_Members entity) {
            this.Invoke("UpdateContactPageStaffMember", new object[] {
                        key,
                        id,
                        entity});
        }
        
        /// <remarks/>
        public void UpdateContactPageStaffMemberAsync(string key, int id, Contact_Page_Staff_Members entity) {
            this.UpdateContactPageStaffMemberAsync(key, id, entity, null);
        }
        
        /// <remarks/>
        public void UpdateContactPageStaffMemberAsync(string key, int id, Contact_Page_Staff_Members entity, object userState) {
            if ((this.UpdateContactPageStaffMemberOperationCompleted == null)) {
                this.UpdateContactPageStaffMemberOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateContactPageStaffMemberOperationCompleted);
            }
            this.InvokeAsync("UpdateContactPageStaffMember", new object[] {
                        key,
                        id,
                        entity}, this.UpdateContactPageStaffMemberOperationCompleted, userState);
        }
        
        private void OnUpdateContactPageStaffMemberOperationCompleted(object arg) {
            if ((this.UpdateContactPageStaffMemberCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateContactPageStaffMemberCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/GetPropertyListing", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Property_Listing GetPropertyListing(string key, int ID) {
            object[] results = this.Invoke("GetPropertyListing", new object[] {
                        key,
                        ID});
            return ((Property_Listing)(results[0]));
        }
        
        /// <remarks/>
        public void GetPropertyListingAsync(string key, int ID) {
            this.GetPropertyListingAsync(key, ID, null);
        }
        
        /// <remarks/>
        public void GetPropertyListingAsync(string key, int ID, object userState) {
            if ((this.GetPropertyListingOperationCompleted == null)) {
                this.GetPropertyListingOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPropertyListingOperationCompleted);
            }
            this.InvokeAsync("GetPropertyListing", new object[] {
                        key,
                        ID}, this.GetPropertyListingOperationCompleted, userState);
        }
        
        private void OnGetPropertyListingOperationCompleted(object arg) {
            if ((this.GetPropertyListingCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPropertyListingCompleted(this, new GetPropertyListingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/InsertPropertyListing", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int InsertPropertyListing(string key, Property_Listing entity) {
            object[] results = this.Invoke("InsertPropertyListing", new object[] {
                        key,
                        entity});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void InsertPropertyListingAsync(string key, Property_Listing entity) {
            this.InsertPropertyListingAsync(key, entity, null);
        }
        
        /// <remarks/>
        public void InsertPropertyListingAsync(string key, Property_Listing entity, object userState) {
            if ((this.InsertPropertyListingOperationCompleted == null)) {
                this.InsertPropertyListingOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertPropertyListingOperationCompleted);
            }
            this.InvokeAsync("InsertPropertyListing", new object[] {
                        key,
                        entity}, this.InsertPropertyListingOperationCompleted, userState);
        }
        
        private void OnInsertPropertyListingOperationCompleted(object arg) {
            if ((this.InsertPropertyListingCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsertPropertyListingCompleted(this, new InsertPropertyListingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/DeletePropertyListing", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeletePropertyListing(string key, int entityID) {
            this.Invoke("DeletePropertyListing", new object[] {
                        key,
                        entityID});
        }
        
        /// <remarks/>
        public void DeletePropertyListingAsync(string key, int entityID) {
            this.DeletePropertyListingAsync(key, entityID, null);
        }
        
        /// <remarks/>
        public void DeletePropertyListingAsync(string key, int entityID, object userState) {
            if ((this.DeletePropertyListingOperationCompleted == null)) {
                this.DeletePropertyListingOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeletePropertyListingOperationCompleted);
            }
            this.InvokeAsync("DeletePropertyListing", new object[] {
                        key,
                        entityID}, this.DeletePropertyListingOperationCompleted, userState);
        }
        
        private void OnDeletePropertyListingOperationCompleted(object arg) {
            if ((this.DeletePropertyListingCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeletePropertyListingCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/UpdatePropertyListing", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpdatePropertyListing(string key, int id, Property_Listing entity) {
            this.Invoke("UpdatePropertyListing", new object[] {
                        key,
                        id,
                        entity});
        }
        
        /// <remarks/>
        public void UpdatePropertyListingAsync(string key, int id, Property_Listing entity) {
            this.UpdatePropertyListingAsync(key, id, entity, null);
        }
        
        /// <remarks/>
        public void UpdatePropertyListingAsync(string key, int id, Property_Listing entity, object userState) {
            if ((this.UpdatePropertyListingOperationCompleted == null)) {
                this.UpdatePropertyListingOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdatePropertyListingOperationCompleted);
            }
            this.InvokeAsync("UpdatePropertyListing", new object[] {
                        key,
                        id,
                        entity}, this.UpdatePropertyListingOperationCompleted, userState);
        }
        
        private void OnUpdatePropertyListingOperationCompleted(object arg) {
            if ((this.UpdatePropertyListingCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdatePropertyListingCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/GetAvailablePropertiesPage", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Available_Properties_Page GetAvailablePropertiesPage(string key, int ID) {
            object[] results = this.Invoke("GetAvailablePropertiesPage", new object[] {
                        key,
                        ID});
            return ((Available_Properties_Page)(results[0]));
        }
        
        /// <remarks/>
        public void GetAvailablePropertiesPageAsync(string key, int ID) {
            this.GetAvailablePropertiesPageAsync(key, ID, null);
        }
        
        /// <remarks/>
        public void GetAvailablePropertiesPageAsync(string key, int ID, object userState) {
            if ((this.GetAvailablePropertiesPageOperationCompleted == null)) {
                this.GetAvailablePropertiesPageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAvailablePropertiesPageOperationCompleted);
            }
            this.InvokeAsync("GetAvailablePropertiesPage", new object[] {
                        key,
                        ID}, this.GetAvailablePropertiesPageOperationCompleted, userState);
        }
        
        private void OnGetAvailablePropertiesPageOperationCompleted(object arg) {
            if ((this.GetAvailablePropertiesPageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAvailablePropertiesPageCompleted(this, new GetAvailablePropertiesPageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/GetAvailablePropertiesPagesByClientID", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Available_Properties_Page[] GetAvailablePropertiesPagesByClientID(string key, int clientID) {
            object[] results = this.Invoke("GetAvailablePropertiesPagesByClientID", new object[] {
                        key,
                        clientID});
            return ((Available_Properties_Page[])(results[0]));
        }
        
        /// <remarks/>
        public void GetAvailablePropertiesPagesByClientIDAsync(string key, int clientID) {
            this.GetAvailablePropertiesPagesByClientIDAsync(key, clientID, null);
        }
        
        /// <remarks/>
        public void GetAvailablePropertiesPagesByClientIDAsync(string key, int clientID, object userState) {
            if ((this.GetAvailablePropertiesPagesByClientIDOperationCompleted == null)) {
                this.GetAvailablePropertiesPagesByClientIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAvailablePropertiesPagesByClientIDOperationCompleted);
            }
            this.InvokeAsync("GetAvailablePropertiesPagesByClientID", new object[] {
                        key,
                        clientID}, this.GetAvailablePropertiesPagesByClientIDOperationCompleted, userState);
        }
        
        private void OnGetAvailablePropertiesPagesByClientIDOperationCompleted(object arg) {
            if ((this.GetAvailablePropertiesPagesByClientIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAvailablePropertiesPagesByClientIDCompleted(this, new GetAvailablePropertiesPagesByClientIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/InsertAvailablePropertiesPage", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int InsertAvailablePropertiesPage(string key, Available_Properties_Page entity) {
            object[] results = this.Invoke("InsertAvailablePropertiesPage", new object[] {
                        key,
                        entity});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void InsertAvailablePropertiesPageAsync(string key, Available_Properties_Page entity) {
            this.InsertAvailablePropertiesPageAsync(key, entity, null);
        }
        
        /// <remarks/>
        public void InsertAvailablePropertiesPageAsync(string key, Available_Properties_Page entity, object userState) {
            if ((this.InsertAvailablePropertiesPageOperationCompleted == null)) {
                this.InsertAvailablePropertiesPageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertAvailablePropertiesPageOperationCompleted);
            }
            this.InvokeAsync("InsertAvailablePropertiesPage", new object[] {
                        key,
                        entity}, this.InsertAvailablePropertiesPageOperationCompleted, userState);
        }
        
        private void OnInsertAvailablePropertiesPageOperationCompleted(object arg) {
            if ((this.InsertAvailablePropertiesPageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsertAvailablePropertiesPageCompleted(this, new InsertAvailablePropertiesPageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/DeleteAvailablePropertiesPage", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteAvailablePropertiesPage(string key, int entityID) {
            this.Invoke("DeleteAvailablePropertiesPage", new object[] {
                        key,
                        entityID});
        }
        
        /// <remarks/>
        public void DeleteAvailablePropertiesPageAsync(string key, int entityID) {
            this.DeleteAvailablePropertiesPageAsync(key, entityID, null);
        }
        
        /// <remarks/>
        public void DeleteAvailablePropertiesPageAsync(string key, int entityID, object userState) {
            if ((this.DeleteAvailablePropertiesPageOperationCompleted == null)) {
                this.DeleteAvailablePropertiesPageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteAvailablePropertiesPageOperationCompleted);
            }
            this.InvokeAsync("DeleteAvailablePropertiesPage", new object[] {
                        key,
                        entityID}, this.DeleteAvailablePropertiesPageOperationCompleted, userState);
        }
        
        private void OnDeleteAvailablePropertiesPageOperationCompleted(object arg) {
            if ((this.DeleteAvailablePropertiesPageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteAvailablePropertiesPageCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/UpdateAvailableProperitesPage", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpdateAvailableProperitesPage(string key, int id, Available_Properties_Page entity) {
            this.Invoke("UpdateAvailableProperitesPage", new object[] {
                        key,
                        id,
                        entity});
        }
        
        /// <remarks/>
        public void UpdateAvailableProperitesPageAsync(string key, int id, Available_Properties_Page entity) {
            this.UpdateAvailableProperitesPageAsync(key, id, entity, null);
        }
        
        /// <remarks/>
        public void UpdateAvailableProperitesPageAsync(string key, int id, Available_Properties_Page entity, object userState) {
            if ((this.UpdateAvailableProperitesPageOperationCompleted == null)) {
                this.UpdateAvailableProperitesPageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateAvailableProperitesPageOperationCompleted);
            }
            this.InvokeAsync("UpdateAvailableProperitesPage", new object[] {
                        key,
                        id,
                        entity}, this.UpdateAvailableProperitesPageOperationCompleted, userState);
        }
        
        private void OnUpdateAvailableProperitesPageOperationCompleted(object arg) {
            if ((this.UpdateAvailableProperitesPageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateAvailableProperitesPageCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/ClientManagerUpdateAvailable", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool ClientManagerUpdateAvailable(string key, string version, int appID) {
            object[] results = this.Invoke("ClientManagerUpdateAvailable", new object[] {
                        key,
                        version,
                        appID});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void ClientManagerUpdateAvailableAsync(string key, string version, int appID) {
            this.ClientManagerUpdateAvailableAsync(key, version, appID, null);
        }
        
        /// <remarks/>
        public void ClientManagerUpdateAvailableAsync(string key, string version, int appID, object userState) {
            if ((this.ClientManagerUpdateAvailableOperationCompleted == null)) {
                this.ClientManagerUpdateAvailableOperationCompleted = new System.Threading.SendOrPostCallback(this.OnClientManagerUpdateAvailableOperationCompleted);
            }
            this.InvokeAsync("ClientManagerUpdateAvailable", new object[] {
                        key,
                        version,
                        appID}, this.ClientManagerUpdateAvailableOperationCompleted, userState);
        }
        
        private void OnClientManagerUpdateAvailableOperationCompleted(object arg) {
            if ((this.ClientManagerUpdateAvailableCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ClientManagerUpdateAvailableCompleted(this, new ClientManagerUpdateAvailableCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/InsertMEG_SubLicense", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int InsertMEG_SubLicense(string key, MEG_SubLicense entity) {
            object[] results = this.Invoke("InsertMEG_SubLicense", new object[] {
                        key,
                        entity});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void InsertMEG_SubLicenseAsync(string key, MEG_SubLicense entity) {
            this.InsertMEG_SubLicenseAsync(key, entity, null);
        }
        
        /// <remarks/>
        public void InsertMEG_SubLicenseAsync(string key, MEG_SubLicense entity, object userState) {
            if ((this.InsertMEG_SubLicenseOperationCompleted == null)) {
                this.InsertMEG_SubLicenseOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertMEG_SubLicenseOperationCompleted);
            }
            this.InvokeAsync("InsertMEG_SubLicense", new object[] {
                        key,
                        entity}, this.InsertMEG_SubLicenseOperationCompleted, userState);
        }
        
        private void OnInsertMEG_SubLicenseOperationCompleted(object arg) {
            if ((this.InsertMEG_SubLicenseCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsertMEG_SubLicenseCompleted(this, new InsertMEG_SubLicenseCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/GetMEG_SubLicense", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public MEG_SubLicense[] GetMEG_SubLicense(string key, int id, int clientID) {
            object[] results = this.Invoke("GetMEG_SubLicense", new object[] {
                        key,
                        id,
                        clientID});
            return ((MEG_SubLicense[])(results[0]));
        }
        
        /// <remarks/>
        public void GetMEG_SubLicenseAsync(string key, int id, int clientID) {
            this.GetMEG_SubLicenseAsync(key, id, clientID, null);
        }
        
        /// <remarks/>
        public void GetMEG_SubLicenseAsync(string key, int id, int clientID, object userState) {
            if ((this.GetMEG_SubLicenseOperationCompleted == null)) {
                this.GetMEG_SubLicenseOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMEG_SubLicenseOperationCompleted);
            }
            this.InvokeAsync("GetMEG_SubLicense", new object[] {
                        key,
                        id,
                        clientID}, this.GetMEG_SubLicenseOperationCompleted, userState);
        }
        
        private void OnGetMEG_SubLicenseOperationCompleted(object arg) {
            if ((this.GetMEG_SubLicenseCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMEG_SubLicenseCompleted(this, new GetMEG_SubLicenseCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/DeleteMEG_SubLicense", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteMEG_SubLicense(string key, int entityID) {
            this.Invoke("DeleteMEG_SubLicense", new object[] {
                        key,
                        entityID});
        }
        
        /// <remarks/>
        public void DeleteMEG_SubLicenseAsync(string key, int entityID) {
            this.DeleteMEG_SubLicenseAsync(key, entityID, null);
        }
        
        /// <remarks/>
        public void DeleteMEG_SubLicenseAsync(string key, int entityID, object userState) {
            if ((this.DeleteMEG_SubLicenseOperationCompleted == null)) {
                this.DeleteMEG_SubLicenseOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteMEG_SubLicenseOperationCompleted);
            }
            this.InvokeAsync("DeleteMEG_SubLicense", new object[] {
                        key,
                        entityID}, this.DeleteMEG_SubLicenseOperationCompleted, userState);
        }
        
        private void OnDeleteMEG_SubLicenseOperationCompleted(object arg) {
            if ((this.DeleteMEG_SubLicenseCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteMEG_SubLicenseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/UpdateMEG_SubLicense", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpdateMEG_SubLicense(string key, int id, MEG_SubLicense entity) {
            this.Invoke("UpdateMEG_SubLicense", new object[] {
                        key,
                        id,
                        entity});
        }
        
        /// <remarks/>
        public void UpdateMEG_SubLicenseAsync(string key, int id, MEG_SubLicense entity) {
            this.UpdateMEG_SubLicenseAsync(key, id, entity, null);
        }
        
        /// <remarks/>
        public void UpdateMEG_SubLicenseAsync(string key, int id, MEG_SubLicense entity, object userState) {
            if ((this.UpdateMEG_SubLicenseOperationCompleted == null)) {
                this.UpdateMEG_SubLicenseOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateMEG_SubLicenseOperationCompleted);
            }
            this.InvokeAsync("UpdateMEG_SubLicense", new object[] {
                        key,
                        id,
                        entity}, this.UpdateMEG_SubLicenseOperationCompleted, userState);
        }
        
        private void OnUpdateMEG_SubLicenseOperationCompleted(object arg) {
            if ((this.UpdateMEG_SubLicenseCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateMEG_SubLicenseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/InsertMEG_Contact", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int InsertMEG_Contact(string key, MEG_Contact entity) {
            object[] results = this.Invoke("InsertMEG_Contact", new object[] {
                        key,
                        entity});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void InsertMEG_ContactAsync(string key, MEG_Contact entity) {
            this.InsertMEG_ContactAsync(key, entity, null);
        }
        
        /// <remarks/>
        public void InsertMEG_ContactAsync(string key, MEG_Contact entity, object userState) {
            if ((this.InsertMEG_ContactOperationCompleted == null)) {
                this.InsertMEG_ContactOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertMEG_ContactOperationCompleted);
            }
            this.InvokeAsync("InsertMEG_Contact", new object[] {
                        key,
                        entity}, this.InsertMEG_ContactOperationCompleted, userState);
        }
        
        private void OnInsertMEG_ContactOperationCompleted(object arg) {
            if ((this.InsertMEG_ContactCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsertMEG_ContactCompleted(this, new InsertMEG_ContactCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/GetMEG_Contact", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public MEG_Contact GetMEG_Contact(string key, int id, int clientID) {
            object[] results = this.Invoke("GetMEG_Contact", new object[] {
                        key,
                        id,
                        clientID});
            return ((MEG_Contact)(results[0]));
        }
        
        /// <remarks/>
        public void GetMEG_ContactAsync(string key, int id, int clientID) {
            this.GetMEG_ContactAsync(key, id, clientID, null);
        }
        
        /// <remarks/>
        public void GetMEG_ContactAsync(string key, int id, int clientID, object userState) {
            if ((this.GetMEG_ContactOperationCompleted == null)) {
                this.GetMEG_ContactOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMEG_ContactOperationCompleted);
            }
            this.InvokeAsync("GetMEG_Contact", new object[] {
                        key,
                        id,
                        clientID}, this.GetMEG_ContactOperationCompleted, userState);
        }
        
        private void OnGetMEG_ContactOperationCompleted(object arg) {
            if ((this.GetMEG_ContactCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMEG_ContactCompleted(this, new GetMEG_ContactCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/DeleteMEG_Primary", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteMEG_Primary(string key, int entityID) {
            this.Invoke("DeleteMEG_Primary", new object[] {
                        key,
                        entityID});
        }
        
        /// <remarks/>
        public void DeleteMEG_PrimaryAsync(string key, int entityID) {
            this.DeleteMEG_PrimaryAsync(key, entityID, null);
        }
        
        /// <remarks/>
        public void DeleteMEG_PrimaryAsync(string key, int entityID, object userState) {
            if ((this.DeleteMEG_PrimaryOperationCompleted == null)) {
                this.DeleteMEG_PrimaryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteMEG_PrimaryOperationCompleted);
            }
            this.InvokeAsync("DeleteMEG_Primary", new object[] {
                        key,
                        entityID}, this.DeleteMEG_PrimaryOperationCompleted, userState);
        }
        
        private void OnDeleteMEG_PrimaryOperationCompleted(object arg) {
            if ((this.DeleteMEG_PrimaryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteMEG_PrimaryCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/UpdateMEG_Contact", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpdateMEG_Contact(string key, int id, MEG_Contact entity) {
            this.Invoke("UpdateMEG_Contact", new object[] {
                        key,
                        id,
                        entity});
        }
        
        /// <remarks/>
        public void UpdateMEG_ContactAsync(string key, int id, MEG_Contact entity) {
            this.UpdateMEG_ContactAsync(key, id, entity, null);
        }
        
        /// <remarks/>
        public void UpdateMEG_ContactAsync(string key, int id, MEG_Contact entity, object userState) {
            if ((this.UpdateMEG_ContactOperationCompleted == null)) {
                this.UpdateMEG_ContactOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateMEG_ContactOperationCompleted);
            }
            this.InvokeAsync("UpdateMEG_Contact", new object[] {
                        key,
                        id,
                        entity}, this.UpdateMEG_ContactOperationCompleted, userState);
        }
        
        private void OnUpdateMEG_ContactOperationCompleted(object arg) {
            if ((this.UpdateMEG_ContactCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateMEG_ContactCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/InsertMEG_Primary", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int InsertMEG_Primary(string key, MEG_Primary entity) {
            object[] results = this.Invoke("InsertMEG_Primary", new object[] {
                        key,
                        entity});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void InsertMEG_PrimaryAsync(string key, MEG_Primary entity) {
            this.InsertMEG_PrimaryAsync(key, entity, null);
        }
        
        /// <remarks/>
        public void InsertMEG_PrimaryAsync(string key, MEG_Primary entity, object userState) {
            if ((this.InsertMEG_PrimaryOperationCompleted == null)) {
                this.InsertMEG_PrimaryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertMEG_PrimaryOperationCompleted);
            }
            this.InvokeAsync("InsertMEG_Primary", new object[] {
                        key,
                        entity}, this.InsertMEG_PrimaryOperationCompleted, userState);
        }
        
        private void OnInsertMEG_PrimaryOperationCompleted(object arg) {
            if ((this.InsertMEG_PrimaryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsertMEG_PrimaryCompleted(this, new InsertMEG_PrimaryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/GetMEG_Primary", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public MEG_Primary GetMEG_Primary(string key, int id, int clientID) {
            object[] results = this.Invoke("GetMEG_Primary", new object[] {
                        key,
                        id,
                        clientID});
            return ((MEG_Primary)(results[0]));
        }
        
        /// <remarks/>
        public void GetMEG_PrimaryAsync(string key, int id, int clientID) {
            this.GetMEG_PrimaryAsync(key, id, clientID, null);
        }
        
        /// <remarks/>
        public void GetMEG_PrimaryAsync(string key, int id, int clientID, object userState) {
            if ((this.GetMEG_PrimaryOperationCompleted == null)) {
                this.GetMEG_PrimaryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMEG_PrimaryOperationCompleted);
            }
            this.InvokeAsync("GetMEG_Primary", new object[] {
                        key,
                        id,
                        clientID}, this.GetMEG_PrimaryOperationCompleted, userState);
        }
        
        private void OnGetMEG_PrimaryOperationCompleted(object arg) {
            if ((this.GetMEG_PrimaryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMEG_PrimaryCompleted(this, new GetMEG_PrimaryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/DeleteMLFByFID", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteMLFByFID(string key, int fID) {
            this.Invoke("DeleteMLFByFID", new object[] {
                        key,
                        fID});
        }
        
        /// <remarks/>
        public void DeleteMLFByFIDAsync(string key, int fID) {
            this.DeleteMLFByFIDAsync(key, fID, null);
        }
        
        /// <remarks/>
        public void DeleteMLFByFIDAsync(string key, int fID, object userState) {
            if ((this.DeleteMLFByFIDOperationCompleted == null)) {
                this.DeleteMLFByFIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteMLFByFIDOperationCompleted);
            }
            this.InvokeAsync("DeleteMLFByFID", new object[] {
                        key,
                        fID}, this.DeleteMLFByFIDOperationCompleted, userState);
        }
        
        private void OnDeleteMLFByFIDOperationCompleted(object arg) {
            if ((this.DeleteMLFByFIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteMLFByFIDCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/DeleteMLFByID", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteMLFByID(string key, int id) {
            this.Invoke("DeleteMLFByID", new object[] {
                        key,
                        id});
        }
        
        /// <remarks/>
        public void DeleteMLFByIDAsync(string key, int id) {
            this.DeleteMLFByIDAsync(key, id, null);
        }
        
        /// <remarks/>
        public void DeleteMLFByIDAsync(string key, int id, object userState) {
            if ((this.DeleteMLFByIDOperationCompleted == null)) {
                this.DeleteMLFByIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteMLFByIDOperationCompleted);
            }
            this.InvokeAsync("DeleteMLFByID", new object[] {
                        key,
                        id}, this.DeleteMLFByIDOperationCompleted, userState);
        }
        
        private void OnDeleteMLFByIDOperationCompleted(object arg) {
            if ((this.DeleteMLFByIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteMLFByIDCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/GetClientIDFromUserFriendlyURL", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GetClientIDFromUserFriendlyURL(string key, string url) {
            object[] results = this.Invoke("GetClientIDFromUserFriendlyURL", new object[] {
                        key,
                        url});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetClientIDFromUserFriendlyURLAsync(string key, string url) {
            this.GetClientIDFromUserFriendlyURLAsync(key, url, null);
        }
        
        /// <remarks/>
        public void GetClientIDFromUserFriendlyURLAsync(string key, string url, object userState) {
            if ((this.GetClientIDFromUserFriendlyURLOperationCompleted == null)) {
                this.GetClientIDFromUserFriendlyURLOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetClientIDFromUserFriendlyURLOperationCompleted);
            }
            this.InvokeAsync("GetClientIDFromUserFriendlyURL", new object[] {
                        key,
                        url}, this.GetClientIDFromUserFriendlyURLOperationCompleted, userState);
        }
        
        private void OnGetClientIDFromUserFriendlyURLOperationCompleted(object arg) {
            if ((this.GetClientIDFromUserFriendlyURLCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetClientIDFromUserFriendlyURLCompleted(this, new GetClientIDFromUserFriendlyURLCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/GetPageViewReports", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Page_Views[] GetPageViewReports(string key, System.DateTime start, System.DateTime end, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] System.Nullable<int> optionalPageID, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] System.Nullable<int> optionalClientID) {
            object[] results = this.Invoke("GetPageViewReports", new object[] {
                        key,
                        start,
                        end,
                        optionalPageID,
                        optionalClientID});
            return ((Page_Views[])(results[0]));
        }
        
        /// <remarks/>
        public void GetPageViewReportsAsync(string key, System.DateTime start, System.DateTime end, System.Nullable<int> optionalPageID, System.Nullable<int> optionalClientID) {
            this.GetPageViewReportsAsync(key, start, end, optionalPageID, optionalClientID, null);
        }
        
        /// <remarks/>
        public void GetPageViewReportsAsync(string key, System.DateTime start, System.DateTime end, System.Nullable<int> optionalPageID, System.Nullable<int> optionalClientID, object userState) {
            if ((this.GetPageViewReportsOperationCompleted == null)) {
                this.GetPageViewReportsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPageViewReportsOperationCompleted);
            }
            this.InvokeAsync("GetPageViewReports", new object[] {
                        key,
                        start,
                        end,
                        optionalPageID,
                        optionalClientID}, this.GetPageViewReportsOperationCompleted, userState);
        }
        
        private void OnGetPageViewReportsOperationCompleted(object arg) {
            if ((this.GetPageViewReportsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPageViewReportsCompleted(this, new GetPageViewReportsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/TrackPageView", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int TrackPageView(string key, Page_Views objPageView) {
            object[] results = this.Invoke("TrackPageView", new object[] {
                        key,
                        objPageView});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void TrackPageViewAsync(string key, Page_Views objPageView) {
            this.TrackPageViewAsync(key, objPageView, null);
        }
        
        /// <remarks/>
        public void TrackPageViewAsync(string key, Page_Views objPageView, object userState) {
            if ((this.TrackPageViewOperationCompleted == null)) {
                this.TrackPageViewOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTrackPageViewOperationCompleted);
            }
            this.InvokeAsync("TrackPageView", new object[] {
                        key,
                        objPageView}, this.TrackPageViewOperationCompleted, userState);
        }
        
        private void OnTrackPageViewOperationCompleted(object arg) {
            if ((this.TrackPageViewCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TrackPageViewCompleted(this, new TrackPageViewCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/GetDailyEZByClientID", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Daily_EZ GetDailyEZByClientID(string key, int clientID) {
            object[] results = this.Invoke("GetDailyEZByClientID", new object[] {
                        key,
                        clientID});
            return ((Daily_EZ)(results[0]));
        }
        
        /// <remarks/>
        public void GetDailyEZByClientIDAsync(string key, int clientID) {
            this.GetDailyEZByClientIDAsync(key, clientID, null);
        }
        
        /// <remarks/>
        public void GetDailyEZByClientIDAsync(string key, int clientID, object userState) {
            if ((this.GetDailyEZByClientIDOperationCompleted == null)) {
                this.GetDailyEZByClientIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDailyEZByClientIDOperationCompleted);
            }
            this.InvokeAsync("GetDailyEZByClientID", new object[] {
                        key,
                        clientID}, this.GetDailyEZByClientIDOperationCompleted, userState);
        }
        
        private void OnGetDailyEZByClientIDOperationCompleted(object arg) {
            if ((this.GetDailyEZByClientIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDailyEZByClientIDCompleted(this, new GetDailyEZByClientIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/UpdateDailyEZ", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpdateDailyEZ(string key, Daily_EZ entity, int id) {
            this.Invoke("UpdateDailyEZ", new object[] {
                        key,
                        entity,
                        id});
        }
        
        /// <remarks/>
        public void UpdateDailyEZAsync(string key, Daily_EZ entity, int id) {
            this.UpdateDailyEZAsync(key, entity, id, null);
        }
        
        /// <remarks/>
        public void UpdateDailyEZAsync(string key, Daily_EZ entity, int id, object userState) {
            if ((this.UpdateDailyEZOperationCompleted == null)) {
                this.UpdateDailyEZOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateDailyEZOperationCompleted);
            }
            this.InvokeAsync("UpdateDailyEZ", new object[] {
                        key,
                        entity,
                        id}, this.UpdateDailyEZOperationCompleted, userState);
        }
        
        private void OnUpdateDailyEZOperationCompleted(object arg) {
            if ((this.UpdateDailyEZCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateDailyEZCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/InsertDailyEZ", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int InsertDailyEZ(string key, Daily_EZ entity) {
            object[] results = this.Invoke("InsertDailyEZ", new object[] {
                        key,
                        entity});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void InsertDailyEZAsync(string key, Daily_EZ entity) {
            this.InsertDailyEZAsync(key, entity, null);
        }
        
        /// <remarks/>
        public void InsertDailyEZAsync(string key, Daily_EZ entity, object userState) {
            if ((this.InsertDailyEZOperationCompleted == null)) {
                this.InsertDailyEZOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertDailyEZOperationCompleted);
            }
            this.InvokeAsync("InsertDailyEZ", new object[] {
                        key,
                        entity}, this.InsertDailyEZOperationCompleted, userState);
        }
        
        private void OnInsertDailyEZOperationCompleted(object arg) {
            if ((this.InsertDailyEZCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsertDailyEZCompleted(this, new InsertDailyEZCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/GetAdSeed", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GetAdSeed(string key, int clientID) {
            object[] results = this.Invoke("GetAdSeed", new object[] {
                        key,
                        clientID});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetAdSeedAsync(string key, int clientID) {
            this.GetAdSeedAsync(key, clientID, null);
        }
        
        /// <remarks/>
        public void GetAdSeedAsync(string key, int clientID, object userState) {
            if ((this.GetAdSeedOperationCompleted == null)) {
                this.GetAdSeedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAdSeedOperationCompleted);
            }
            this.InvokeAsync("GetAdSeed", new object[] {
                        key,
                        clientID}, this.GetAdSeedOperationCompleted, userState);
        }
        
        private void OnGetAdSeedOperationCompleted(object arg) {
            if ((this.GetAdSeedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAdSeedCompleted(this, new GetAdSeedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/UpdateAdSeed", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpdateAdSeed(string key, int clientID) {
            this.Invoke("UpdateAdSeed", new object[] {
                        key,
                        clientID});
        }
        
        /// <remarks/>
        public void UpdateAdSeedAsync(string key, int clientID) {
            this.UpdateAdSeedAsync(key, clientID, null);
        }
        
        /// <remarks/>
        public void UpdateAdSeedAsync(string key, int clientID, object userState) {
            if ((this.UpdateAdSeedOperationCompleted == null)) {
                this.UpdateAdSeedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateAdSeedOperationCompleted);
            }
            this.InvokeAsync("UpdateAdSeed", new object[] {
                        key,
                        clientID}, this.UpdateAdSeedOperationCompleted, userState);
        }
        
        private void OnUpdateAdSeedOperationCompleted(object arg) {
            if ((this.UpdateAdSeedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateAdSeedCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/DeleteDailyEZ", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteDailyEZ(string key, int id) {
            this.Invoke("DeleteDailyEZ", new object[] {
                        key,
                        id});
        }
        
        /// <remarks/>
        public void DeleteDailyEZAsync(string key, int id) {
            this.DeleteDailyEZAsync(key, id, null);
        }
        
        /// <remarks/>
        public void DeleteDailyEZAsync(string key, int id, object userState) {
            if ((this.DeleteDailyEZOperationCompleted == null)) {
                this.DeleteDailyEZOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteDailyEZOperationCompleted);
            }
            this.InvokeAsync("DeleteDailyEZ", new object[] {
                        key,
                        id}, this.DeleteDailyEZOperationCompleted, userState);
        }
        
        private void OnDeleteDailyEZOperationCompleted(object arg) {
            if ((this.DeleteDailyEZCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteDailyEZCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/GetSendToFriendByID", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Send_To_Friend GetSendToFriendByID(string key, int id) {
            object[] results = this.Invoke("GetSendToFriendByID", new object[] {
                        key,
                        id});
            return ((Send_To_Friend)(results[0]));
        }
        
        /// <remarks/>
        public void GetSendToFriendByIDAsync(string key, int id) {
            this.GetSendToFriendByIDAsync(key, id, null);
        }
        
        /// <remarks/>
        public void GetSendToFriendByIDAsync(string key, int id, object userState) {
            if ((this.GetSendToFriendByIDOperationCompleted == null)) {
                this.GetSendToFriendByIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSendToFriendByIDOperationCompleted);
            }
            this.InvokeAsync("GetSendToFriendByID", new object[] {
                        key,
                        id}, this.GetSendToFriendByIDOperationCompleted, userState);
        }
        
        private void OnGetSendToFriendByIDOperationCompleted(object arg) {
            if ((this.GetSendToFriendByIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSendToFriendByIDCompleted(this, new GetSendToFriendByIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/GetSendToFriendByClientID", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Send_To_Friend GetSendToFriendByClientID(string key, int clientID) {
            object[] results = this.Invoke("GetSendToFriendByClientID", new object[] {
                        key,
                        clientID});
            return ((Send_To_Friend)(results[0]));
        }
        
        /// <remarks/>
        public void GetSendToFriendByClientIDAsync(string key, int clientID) {
            this.GetSendToFriendByClientIDAsync(key, clientID, null);
        }
        
        /// <remarks/>
        public void GetSendToFriendByClientIDAsync(string key, int clientID, object userState) {
            if ((this.GetSendToFriendByClientIDOperationCompleted == null)) {
                this.GetSendToFriendByClientIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSendToFriendByClientIDOperationCompleted);
            }
            this.InvokeAsync("GetSendToFriendByClientID", new object[] {
                        key,
                        clientID}, this.GetSendToFriendByClientIDOperationCompleted, userState);
        }
        
        private void OnGetSendToFriendByClientIDOperationCompleted(object arg) {
            if ((this.GetSendToFriendByClientIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSendToFriendByClientIDCompleted(this, new GetSendToFriendByClientIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/DeleteSendToFriend", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteSendToFriend(string key, int id) {
            this.Invoke("DeleteSendToFriend", new object[] {
                        key,
                        id});
        }
        
        /// <remarks/>
        public void DeleteSendToFriendAsync(string key, int id) {
            this.DeleteSendToFriendAsync(key, id, null);
        }
        
        /// <remarks/>
        public void DeleteSendToFriendAsync(string key, int id, object userState) {
            if ((this.DeleteSendToFriendOperationCompleted == null)) {
                this.DeleteSendToFriendOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteSendToFriendOperationCompleted);
            }
            this.InvokeAsync("DeleteSendToFriend", new object[] {
                        key,
                        id}, this.DeleteSendToFriendOperationCompleted, userState);
        }
        
        private void OnDeleteSendToFriendOperationCompleted(object arg) {
            if ((this.DeleteSendToFriendCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteSendToFriendCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/InsertSendToFriend", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int InsertSendToFriend(string key, Send_To_Friend entity) {
            object[] results = this.Invoke("InsertSendToFriend", new object[] {
                        key,
                        entity});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void InsertSendToFriendAsync(string key, Send_To_Friend entity) {
            this.InsertSendToFriendAsync(key, entity, null);
        }
        
        /// <remarks/>
        public void InsertSendToFriendAsync(string key, Send_To_Friend entity, object userState) {
            if ((this.InsertSendToFriendOperationCompleted == null)) {
                this.InsertSendToFriendOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertSendToFriendOperationCompleted);
            }
            this.InvokeAsync("InsertSendToFriend", new object[] {
                        key,
                        entity}, this.InsertSendToFriendOperationCompleted, userState);
        }
        
        private void OnInsertSendToFriendOperationCompleted(object arg) {
            if ((this.InsertSendToFriendCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsertSendToFriendCompleted(this, new InsertSendToFriendCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/UpdateSendToFriend", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpdateSendToFriend(string key, Send_To_Friend entity, int id) {
            this.Invoke("UpdateSendToFriend", new object[] {
                        key,
                        entity,
                        id});
        }
        
        /// <remarks/>
        public void UpdateSendToFriendAsync(string key, Send_To_Friend entity, int id) {
            this.UpdateSendToFriendAsync(key, entity, id, null);
        }
        
        /// <remarks/>
        public void UpdateSendToFriendAsync(string key, Send_To_Friend entity, int id, object userState) {
            if ((this.UpdateSendToFriendOperationCompleted == null)) {
                this.UpdateSendToFriendOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateSendToFriendOperationCompleted);
            }
            this.InvokeAsync("UpdateSendToFriend", new object[] {
                        key,
                        entity,
                        id}, this.UpdateSendToFriendOperationCompleted, userState);
        }
        
        private void OnUpdateSendToFriendOperationCompleted(object arg) {
            if ((this.UpdateSendToFriendCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateSendToFriendCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/GetMEGv3ByClientID", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public MEG_v3 GetMEGv3ByClientID(string key, int clientID) {
            object[] results = this.Invoke("GetMEGv3ByClientID", new object[] {
                        key,
                        clientID});
            return ((MEG_v3)(results[0]));
        }
        
        /// <remarks/>
        public void GetMEGv3ByClientIDAsync(string key, int clientID) {
            this.GetMEGv3ByClientIDAsync(key, clientID, null);
        }
        
        /// <remarks/>
        public void GetMEGv3ByClientIDAsync(string key, int clientID, object userState) {
            if ((this.GetMEGv3ByClientIDOperationCompleted == null)) {
                this.GetMEGv3ByClientIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMEGv3ByClientIDOperationCompleted);
            }
            this.InvokeAsync("GetMEGv3ByClientID", new object[] {
                        key,
                        clientID}, this.GetMEGv3ByClientIDOperationCompleted, userState);
        }
        
        private void OnGetMEGv3ByClientIDOperationCompleted(object arg) {
            if ((this.GetMEGv3ByClientIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMEGv3ByClientIDCompleted(this, new GetMEGv3ByClientIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/UpdateMEGv3", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpdateMEGv3(string key, MEG_v3 entity) {
            this.Invoke("UpdateMEGv3", new object[] {
                        key,
                        entity});
        }
        
        /// <remarks/>
        public void UpdateMEGv3Async(string key, MEG_v3 entity) {
            this.UpdateMEGv3Async(key, entity, null);
        }
        
        /// <remarks/>
        public void UpdateMEGv3Async(string key, MEG_v3 entity, object userState) {
            if ((this.UpdateMEGv3OperationCompleted == null)) {
                this.UpdateMEGv3OperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateMEGv3OperationCompleted);
            }
            this.InvokeAsync("UpdateMEGv3", new object[] {
                        key,
                        entity}, this.UpdateMEGv3OperationCompleted, userState);
        }
        
        private void OnUpdateMEGv3OperationCompleted(object arg) {
            if ((this.UpdateMEGv3Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateMEGv3Completed(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/InsertMEGv3", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int InsertMEGv3(string key, MEG_v3 entity) {
            object[] results = this.Invoke("InsertMEGv3", new object[] {
                        key,
                        entity});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void InsertMEGv3Async(string key, MEG_v3 entity) {
            this.InsertMEGv3Async(key, entity, null);
        }
        
        /// <remarks/>
        public void InsertMEGv3Async(string key, MEG_v3 entity, object userState) {
            if ((this.InsertMEGv3OperationCompleted == null)) {
                this.InsertMEGv3OperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertMEGv3OperationCompleted);
            }
            this.InvokeAsync("InsertMEGv3", new object[] {
                        key,
                        entity}, this.InsertMEGv3OperationCompleted, userState);
        }
        
        private void OnInsertMEGv3OperationCompleted(object arg) {
            if ((this.InsertMEGv3Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsertMEGv3Completed(this, new InsertMEGv3CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/DeleteMEGv3", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteMEGv3(string key, int id) {
            this.Invoke("DeleteMEGv3", new object[] {
                        key,
                        id});
        }
        
        /// <remarks/>
        public void DeleteMEGv3Async(string key, int id) {
            this.DeleteMEGv3Async(key, id, null);
        }
        
        /// <remarks/>
        public void DeleteMEGv3Async(string key, int id, object userState) {
            if ((this.DeleteMEGv3OperationCompleted == null)) {
                this.DeleteMEGv3OperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteMEGv3OperationCompleted);
            }
            this.InvokeAsync("DeleteMEGv3", new object[] {
                        key,
                        id}, this.DeleteMEGv3OperationCompleted, userState);
        }
        
        private void OnDeleteMEGv3OperationCompleted(object arg) {
            if ((this.DeleteMEGv3Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteMEGv3Completed(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/GetResourceFileByID", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Resource_File GetResourceFileByID(string key, int id) {
            object[] results = this.Invoke("GetResourceFileByID", new object[] {
                        key,
                        id});
            return ((Resource_File)(results[0]));
        }
        
        /// <remarks/>
        public void GetResourceFileByIDAsync(string key, int id) {
            this.GetResourceFileByIDAsync(key, id, null);
        }
        
        /// <remarks/>
        public void GetResourceFileByIDAsync(string key, int id, object userState) {
            if ((this.GetResourceFileByIDOperationCompleted == null)) {
                this.GetResourceFileByIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetResourceFileByIDOperationCompleted);
            }
            this.InvokeAsync("GetResourceFileByID", new object[] {
                        key,
                        id}, this.GetResourceFileByIDOperationCompleted, userState);
        }
        
        private void OnGetResourceFileByIDOperationCompleted(object arg) {
            if ((this.GetResourceFileByIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetResourceFileByIDCompleted(this, new GetResourceFileByIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/GetResourceFileByMD5", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Resource_File GetResourceFileByMD5(string key, string md5) {
            object[] results = this.Invoke("GetResourceFileByMD5", new object[] {
                        key,
                        md5});
            return ((Resource_File)(results[0]));
        }
        
        /// <remarks/>
        public void GetResourceFileByMD5Async(string key, string md5) {
            this.GetResourceFileByMD5Async(key, md5, null);
        }
        
        /// <remarks/>
        public void GetResourceFileByMD5Async(string key, string md5, object userState) {
            if ((this.GetResourceFileByMD5OperationCompleted == null)) {
                this.GetResourceFileByMD5OperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetResourceFileByMD5OperationCompleted);
            }
            this.InvokeAsync("GetResourceFileByMD5", new object[] {
                        key,
                        md5}, this.GetResourceFileByMD5OperationCompleted, userState);
        }
        
        private void OnGetResourceFileByMD5OperationCompleted(object arg) {
            if ((this.GetResourceFileByMD5Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetResourceFileByMD5Completed(this, new GetResourceFileByMD5CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/GetResourceFiles", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Resource_File[] GetResourceFiles(string key, string name) {
            object[] results = this.Invoke("GetResourceFiles", new object[] {
                        key,
                        name});
            return ((Resource_File[])(results[0]));
        }
        
        /// <remarks/>
        public void GetResourceFilesAsync(string key, string name) {
            this.GetResourceFilesAsync(key, name, null);
        }
        
        /// <remarks/>
        public void GetResourceFilesAsync(string key, string name, object userState) {
            if ((this.GetResourceFilesOperationCompleted == null)) {
                this.GetResourceFilesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetResourceFilesOperationCompleted);
            }
            this.InvokeAsync("GetResourceFiles", new object[] {
                        key,
                        name}, this.GetResourceFilesOperationCompleted, userState);
        }
        
        private void OnGetResourceFilesOperationCompleted(object arg) {
            if ((this.GetResourceFilesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetResourceFilesCompleted(this, new GetResourceFilesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/GetAllResourceFiles", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Resource_File[] GetAllResourceFiles(string key) {
            object[] results = this.Invoke("GetAllResourceFiles", new object[] {
                        key});
            return ((Resource_File[])(results[0]));
        }
        
        /// <remarks/>
        public void GetAllResourceFilesAsync(string key) {
            this.GetAllResourceFilesAsync(key, null);
        }
        
        /// <remarks/>
        public void GetAllResourceFilesAsync(string key, object userState) {
            if ((this.GetAllResourceFilesOperationCompleted == null)) {
                this.GetAllResourceFilesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAllResourceFilesOperationCompleted);
            }
            this.InvokeAsync("GetAllResourceFiles", new object[] {
                        key}, this.GetAllResourceFilesOperationCompleted, userState);
        }
        
        private void OnGetAllResourceFilesOperationCompleted(object arg) {
            if ((this.GetAllResourceFilesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAllResourceFilesCompleted(this, new GetAllResourceFilesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/InsertResourceFile", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int InsertResourceFile(string key, Resource_File entity) {
            object[] results = this.Invoke("InsertResourceFile", new object[] {
                        key,
                        entity});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void InsertResourceFileAsync(string key, Resource_File entity) {
            this.InsertResourceFileAsync(key, entity, null);
        }
        
        /// <remarks/>
        public void InsertResourceFileAsync(string key, Resource_File entity, object userState) {
            if ((this.InsertResourceFileOperationCompleted == null)) {
                this.InsertResourceFileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertResourceFileOperationCompleted);
            }
            this.InvokeAsync("InsertResourceFile", new object[] {
                        key,
                        entity}, this.InsertResourceFileOperationCompleted, userState);
        }
        
        private void OnInsertResourceFileOperationCompleted(object arg) {
            if ((this.InsertResourceFileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsertResourceFileCompleted(this, new InsertResourceFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/DeleteResourceFile", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteResourceFile(string key, int id) {
            this.Invoke("DeleteResourceFile", new object[] {
                        key,
                        id});
        }
        
        /// <remarks/>
        public void DeleteResourceFileAsync(string key, int id) {
            this.DeleteResourceFileAsync(key, id, null);
        }
        
        /// <remarks/>
        public void DeleteResourceFileAsync(string key, int id, object userState) {
            if ((this.DeleteResourceFileOperationCompleted == null)) {
                this.DeleteResourceFileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteResourceFileOperationCompleted);
            }
            this.InvokeAsync("DeleteResourceFile", new object[] {
                        key,
                        id}, this.DeleteResourceFileOperationCompleted, userState);
        }
        
        private void OnDeleteResourceFileOperationCompleted(object arg) {
            if ((this.DeleteResourceFileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteResourceFileCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/UpdateResourceFile", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpdateResourceFile(string key, Resource_File entity, int id) {
            this.Invoke("UpdateResourceFile", new object[] {
                        key,
                        entity,
                        id});
        }
        
        /// <remarks/>
        public void UpdateResourceFileAsync(string key, Resource_File entity, int id) {
            this.UpdateResourceFileAsync(key, entity, id, null);
        }
        
        /// <remarks/>
        public void UpdateResourceFileAsync(string key, Resource_File entity, int id, object userState) {
            if ((this.UpdateResourceFileOperationCompleted == null)) {
                this.UpdateResourceFileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateResourceFileOperationCompleted);
            }
            this.InvokeAsync("UpdateResourceFile", new object[] {
                        key,
                        entity,
                        id}, this.UpdateResourceFileOperationCompleted, userState);
        }
        
        private void OnUpdateResourceFileOperationCompleted(object arg) {
            if ((this.UpdateResourceFileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateResourceFileCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/GetJetnettEZEnabledClients", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Client[] GetJetnettEZEnabledClients(string key) {
            object[] results = this.Invoke("GetJetnettEZEnabledClients", new object[] {
                        key});
            return ((Client[])(results[0]));
        }
        
        /// <remarks/>
        public void GetJetnettEZEnabledClientsAsync(string key) {
            this.GetJetnettEZEnabledClientsAsync(key, null);
        }
        
        /// <remarks/>
        public void GetJetnettEZEnabledClientsAsync(string key, object userState) {
            if ((this.GetJetnettEZEnabledClientsOperationCompleted == null)) {
                this.GetJetnettEZEnabledClientsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetJetnettEZEnabledClientsOperationCompleted);
            }
            this.InvokeAsync("GetJetnettEZEnabledClients", new object[] {
                        key}, this.GetJetnettEZEnabledClientsOperationCompleted, userState);
        }
        
        private void OnGetJetnettEZEnabledClientsOperationCompleted(object arg) {
            if ((this.GetJetnettEZEnabledClientsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetJetnettEZEnabledClientsCompleted(this, new GetJetnettEZEnabledClientsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/JetnettEZClientEnabled", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool JetnettEZClientEnabled(string key, int clientID) {
            object[] results = this.Invoke("JetnettEZClientEnabled", new object[] {
                        key,
                        clientID});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void JetnettEZClientEnabledAsync(string key, int clientID) {
            this.JetnettEZClientEnabledAsync(key, clientID, null);
        }
        
        /// <remarks/>
        public void JetnettEZClientEnabledAsync(string key, int clientID, object userState) {
            if ((this.JetnettEZClientEnabledOperationCompleted == null)) {
                this.JetnettEZClientEnabledOperationCompleted = new System.Threading.SendOrPostCallback(this.OnJetnettEZClientEnabledOperationCompleted);
            }
            this.InvokeAsync("JetnettEZClientEnabled", new object[] {
                        key,
                        clientID}, this.JetnettEZClientEnabledOperationCompleted, userState);
        }
        
        private void OnJetnettEZClientEnabledOperationCompleted(object arg) {
            if ((this.JetnettEZClientEnabledCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.JetnettEZClientEnabledCompleted(this, new JetnettEZClientEnabledCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/GetFolderPath", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetFolderPath(string key, int folderID) {
            object[] results = this.Invoke("GetFolderPath", new object[] {
                        key,
                        folderID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetFolderPathAsync(string key, int folderID) {
            this.GetFolderPathAsync(key, folderID, null);
        }
        
        /// <remarks/>
        public void GetFolderPathAsync(string key, int folderID, object userState) {
            if ((this.GetFolderPathOperationCompleted == null)) {
                this.GetFolderPathOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFolderPathOperationCompleted);
            }
            this.InvokeAsync("GetFolderPath", new object[] {
                        key,
                        folderID}, this.GetFolderPathOperationCompleted, userState);
        }
        
        private void OnGetFolderPathOperationCompleted(object arg) {
            if ((this.GetFolderPathCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFolderPathCompleted(this, new GetFolderPathCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/GetAllFolders", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Folder[] GetAllFolders(string key) {
            object[] results = this.Invoke("GetAllFolders", new object[] {
                        key});
            return ((Folder[])(results[0]));
        }
        
        /// <remarks/>
        public void GetAllFoldersAsync(string key) {
            this.GetAllFoldersAsync(key, null);
        }
        
        /// <remarks/>
        public void GetAllFoldersAsync(string key, object userState) {
            if ((this.GetAllFoldersOperationCompleted == null)) {
                this.GetAllFoldersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAllFoldersOperationCompleted);
            }
            this.InvokeAsync("GetAllFolders", new object[] {
                        key}, this.GetAllFoldersOperationCompleted, userState);
        }
        
        private void OnGetAllFoldersOperationCompleted(object arg) {
            if ((this.GetAllFoldersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAllFoldersCompleted(this, new GetAllFoldersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/GetFolder", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Folder GetFolder(string key, int ID) {
            object[] results = this.Invoke("GetFolder", new object[] {
                        key,
                        ID});
            return ((Folder)(results[0]));
        }
        
        /// <remarks/>
        public void GetFolderAsync(string key, int ID) {
            this.GetFolderAsync(key, ID, null);
        }
        
        /// <remarks/>
        public void GetFolderAsync(string key, int ID, object userState) {
            if ((this.GetFolderOperationCompleted == null)) {
                this.GetFolderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFolderOperationCompleted);
            }
            this.InvokeAsync("GetFolder", new object[] {
                        key,
                        ID}, this.GetFolderOperationCompleted, userState);
        }
        
        private void OnGetFolderOperationCompleted(object arg) {
            if ((this.GetFolderCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFolderCompleted(this, new GetFolderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/GetFavorites", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public FavLink[] GetFavorites(string key, int endUserID) {
            object[] results = this.Invoke("GetFavorites", new object[] {
                        key,
                        endUserID});
            return ((FavLink[])(results[0]));
        }
        
        /// <remarks/>
        public void GetFavoritesAsync(string key, int endUserID) {
            this.GetFavoritesAsync(key, endUserID, null);
        }
        
        /// <remarks/>
        public void GetFavoritesAsync(string key, int endUserID, object userState) {
            if ((this.GetFavoritesOperationCompleted == null)) {
                this.GetFavoritesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFavoritesOperationCompleted);
            }
            this.InvokeAsync("GetFavorites", new object[] {
                        key,
                        endUserID}, this.GetFavoritesOperationCompleted, userState);
        }
        
        private void OnGetFavoritesOperationCompleted(object arg) {
            if ((this.GetFavoritesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFavoritesCompleted(this, new GetFavoritesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/SaveFavorites", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SaveFavorites(string key, FavLink[] favLinks, int endUserID) {
            object[] results = this.Invoke("SaveFavorites", new object[] {
                        key,
                        favLinks,
                        endUserID});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SaveFavoritesAsync(string key, FavLink[] favLinks, int endUserID) {
            this.SaveFavoritesAsync(key, favLinks, endUserID, null);
        }
        
        /// <remarks/>
        public void SaveFavoritesAsync(string key, FavLink[] favLinks, int endUserID, object userState) {
            if ((this.SaveFavoritesOperationCompleted == null)) {
                this.SaveFavoritesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSaveFavoritesOperationCompleted);
            }
            this.InvokeAsync("SaveFavorites", new object[] {
                        key,
                        favLinks,
                        endUserID}, this.SaveFavoritesOperationCompleted, userState);
        }
        
        private void OnSaveFavoritesOperationCompleted(object arg) {
            if ((this.SaveFavoritesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SaveFavoritesCompleted(this, new SaveFavoritesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/SaveFavoritesRePosition", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SaveFavoritesRePosition(string key, FavLink[] favLinks, int endUserID) {
            object[] results = this.Invoke("SaveFavoritesRePosition", new object[] {
                        key,
                        favLinks,
                        endUserID});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SaveFavoritesRePositionAsync(string key, FavLink[] favLinks, int endUserID) {
            this.SaveFavoritesRePositionAsync(key, favLinks, endUserID, null);
        }
        
        /// <remarks/>
        public void SaveFavoritesRePositionAsync(string key, FavLink[] favLinks, int endUserID, object userState) {
            if ((this.SaveFavoritesRePositionOperationCompleted == null)) {
                this.SaveFavoritesRePositionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSaveFavoritesRePositionOperationCompleted);
            }
            this.InvokeAsync("SaveFavoritesRePosition", new object[] {
                        key,
                        favLinks,
                        endUserID}, this.SaveFavoritesRePositionOperationCompleted, userState);
        }
        
        private void OnSaveFavoritesRePositionOperationCompleted(object arg) {
            if ((this.SaveFavoritesRePositionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SaveFavoritesRePositionCompleted(this, new SaveFavoritesRePositionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/UpdateFavorite", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpdateFavorite(string key, FavLink favLink) {
            this.Invoke("UpdateFavorite", new object[] {
                        key,
                        favLink});
        }
        
        /// <remarks/>
        public void UpdateFavoriteAsync(string key, FavLink favLink) {
            this.UpdateFavoriteAsync(key, favLink, null);
        }
        
        /// <remarks/>
        public void UpdateFavoriteAsync(string key, FavLink favLink, object userState) {
            if ((this.UpdateFavoriteOperationCompleted == null)) {
                this.UpdateFavoriteOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateFavoriteOperationCompleted);
            }
            this.InvokeAsync("UpdateFavorite", new object[] {
                        key,
                        favLink}, this.UpdateFavoriteOperationCompleted, userState);
        }
        
        private void OnUpdateFavoriteOperationCompleted(object arg) {
            if ((this.UpdateFavoriteCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateFavoriteCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/GetUsesThisMonth", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GetUsesThisMonth(string key, int clientID) {
            object[] results = this.Invoke("GetUsesThisMonth", new object[] {
                        key,
                        clientID});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetUsesThisMonthAsync(string key, int clientID) {
            this.GetUsesThisMonthAsync(key, clientID, null);
        }
        
        /// <remarks/>
        public void GetUsesThisMonthAsync(string key, int clientID, object userState) {
            if ((this.GetUsesThisMonthOperationCompleted == null)) {
                this.GetUsesThisMonthOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUsesThisMonthOperationCompleted);
            }
            this.InvokeAsync("GetUsesThisMonth", new object[] {
                        key,
                        clientID}, this.GetUsesThisMonthOperationCompleted, userState);
        }
        
        private void OnGetUsesThisMonthOperationCompleted(object arg) {
            if ((this.GetUsesThisMonthCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUsesThisMonthCompleted(this, new GetUsesThisMonthCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/GetUsesInMonth", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GetUsesInMonth(string key, int clientID, int month, int year) {
            object[] results = this.Invoke("GetUsesInMonth", new object[] {
                        key,
                        clientID,
                        month,
                        year});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetUsesInMonthAsync(string key, int clientID, int month, int year) {
            this.GetUsesInMonthAsync(key, clientID, month, year, null);
        }
        
        /// <remarks/>
        public void GetUsesInMonthAsync(string key, int clientID, int month, int year, object userState) {
            if ((this.GetUsesInMonthOperationCompleted == null)) {
                this.GetUsesInMonthOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUsesInMonthOperationCompleted);
            }
            this.InvokeAsync("GetUsesInMonth", new object[] {
                        key,
                        clientID,
                        month,
                        year}, this.GetUsesInMonthOperationCompleted, userState);
        }
        
        private void OnGetUsesInMonthOperationCompleted(object arg) {
            if ((this.GetUsesInMonthCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUsesInMonthCompleted(this, new GetUsesInMonthCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/GetMonthlyReport", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public EndUser[] GetMonthlyReport(string key, int clientID, int month, int year) {
            object[] results = this.Invoke("GetMonthlyReport", new object[] {
                        key,
                        clientID,
                        month,
                        year});
            return ((EndUser[])(results[0]));
        }
        
        /// <remarks/>
        public void GetMonthlyReportAsync(string key, int clientID, int month, int year) {
            this.GetMonthlyReportAsync(key, clientID, month, year, null);
        }
        
        /// <remarks/>
        public void GetMonthlyReportAsync(string key, int clientID, int month, int year, object userState) {
            if ((this.GetMonthlyReportOperationCompleted == null)) {
                this.GetMonthlyReportOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMonthlyReportOperationCompleted);
            }
            this.InvokeAsync("GetMonthlyReport", new object[] {
                        key,
                        clientID,
                        month,
                        year}, this.GetMonthlyReportOperationCompleted, userState);
        }
        
        private void OnGetMonthlyReportOperationCompleted(object arg) {
            if ((this.GetMonthlyReportCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMonthlyReportCompleted(this, new GetMonthlyReportCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/EndUserExists", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool EndUserExists(string key, string emailAddress) {
            object[] results = this.Invoke("EndUserExists", new object[] {
                        key,
                        emailAddress});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void EndUserExistsAsync(string key, string emailAddress) {
            this.EndUserExistsAsync(key, emailAddress, null);
        }
        
        /// <remarks/>
        public void EndUserExistsAsync(string key, string emailAddress, object userState) {
            if ((this.EndUserExistsOperationCompleted == null)) {
                this.EndUserExistsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnEndUserExistsOperationCompleted);
            }
            this.InvokeAsync("EndUserExists", new object[] {
                        key,
                        emailAddress}, this.EndUserExistsOperationCompleted, userState);
        }
        
        private void OnEndUserExistsOperationCompleted(object arg) {
            if ((this.EndUserExistsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.EndUserExistsCompleted(this, new EndUserExistsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/CreateEndUser", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void CreateEndUser(string key, EndUser endUser) {
            this.Invoke("CreateEndUser", new object[] {
                        key,
                        endUser});
        }
        
        /// <remarks/>
        public void CreateEndUserAsync(string key, EndUser endUser) {
            this.CreateEndUserAsync(key, endUser, null);
        }
        
        /// <remarks/>
        public void CreateEndUserAsync(string key, EndUser endUser, object userState) {
            if ((this.CreateEndUserOperationCompleted == null)) {
                this.CreateEndUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateEndUserOperationCompleted);
            }
            this.InvokeAsync("CreateEndUser", new object[] {
                        key,
                        endUser}, this.CreateEndUserOperationCompleted, userState);
        }
        
        private void OnCreateEndUserOperationCompleted(object arg) {
            if ((this.CreateEndUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateEndUserCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/GetEndUserIDByEmail", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GetEndUserIDByEmail(string key, string emailAddress) {
            object[] results = this.Invoke("GetEndUserIDByEmail", new object[] {
                        key,
                        emailAddress});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetEndUserIDByEmailAsync(string key, string emailAddress) {
            this.GetEndUserIDByEmailAsync(key, emailAddress, null);
        }
        
        /// <remarks/>
        public void GetEndUserIDByEmailAsync(string key, string emailAddress, object userState) {
            if ((this.GetEndUserIDByEmailOperationCompleted == null)) {
                this.GetEndUserIDByEmailOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetEndUserIDByEmailOperationCompleted);
            }
            this.InvokeAsync("GetEndUserIDByEmail", new object[] {
                        key,
                        emailAddress}, this.GetEndUserIDByEmailOperationCompleted, userState);
        }
        
        private void OnGetEndUserIDByEmailOperationCompleted(object arg) {
            if ((this.GetEndUserIDByEmailCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetEndUserIDByEmailCompleted(this, new GetEndUserIDByEmailCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/GetEndUserByEmail", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public EndUser GetEndUserByEmail(string key, string emailAddress) {
            object[] results = this.Invoke("GetEndUserByEmail", new object[] {
                        key,
                        emailAddress});
            return ((EndUser)(results[0]));
        }
        
        /// <remarks/>
        public void GetEndUserByEmailAsync(string key, string emailAddress) {
            this.GetEndUserByEmailAsync(key, emailAddress, null);
        }
        
        /// <remarks/>
        public void GetEndUserByEmailAsync(string key, string emailAddress, object userState) {
            if ((this.GetEndUserByEmailOperationCompleted == null)) {
                this.GetEndUserByEmailOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetEndUserByEmailOperationCompleted);
            }
            this.InvokeAsync("GetEndUserByEmail", new object[] {
                        key,
                        emailAddress}, this.GetEndUserByEmailOperationCompleted, userState);
        }
        
        private void OnGetEndUserByEmailOperationCompleted(object arg) {
            if ((this.GetEndUserByEmailCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetEndUserByEmailCompleted(this, new GetEndUserByEmailCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/GetEndUser", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public EndUser GetEndUser(string key, int id) {
            object[] results = this.Invoke("GetEndUser", new object[] {
                        key,
                        id});
            return ((EndUser)(results[0]));
        }
        
        /// <remarks/>
        public void GetEndUserAsync(string key, int id) {
            this.GetEndUserAsync(key, id, null);
        }
        
        /// <remarks/>
        public void GetEndUserAsync(string key, int id, object userState) {
            if ((this.GetEndUserOperationCompleted == null)) {
                this.GetEndUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetEndUserOperationCompleted);
            }
            this.InvokeAsync("GetEndUser", new object[] {
                        key,
                        id}, this.GetEndUserOperationCompleted, userState);
        }
        
        private void OnGetEndUserOperationCompleted(object arg) {
            if ((this.GetEndUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetEndUserCompleted(this, new GetEndUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/UpdateUses", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpdateUses(string key, int id) {
            this.Invoke("UpdateUses", new object[] {
                        key,
                        id});
        }
        
        /// <remarks/>
        public void UpdateUsesAsync(string key, int id) {
            this.UpdateUsesAsync(key, id, null);
        }
        
        /// <remarks/>
        public void UpdateUsesAsync(string key, int id, object userState) {
            if ((this.UpdateUsesOperationCompleted == null)) {
                this.UpdateUsesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateUsesOperationCompleted);
            }
            this.InvokeAsync("UpdateUses", new object[] {
                        key,
                        id}, this.UpdateUsesOperationCompleted, userState);
        }
        
        private void OnUpdateUsesOperationCompleted(object arg) {
            if ((this.UpdateUsesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateUsesCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/GetDesktopUses", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GetDesktopUses(string key, string email, int month, int year) {
            object[] results = this.Invoke("GetDesktopUses", new object[] {
                        key,
                        email,
                        month,
                        year});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetDesktopUsesAsync(string key, string email, int month, int year) {
            this.GetDesktopUsesAsync(key, email, month, year, null);
        }
        
        /// <remarks/>
        public void GetDesktopUsesAsync(string key, string email, int month, int year, object userState) {
            if ((this.GetDesktopUsesOperationCompleted == null)) {
                this.GetDesktopUsesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDesktopUsesOperationCompleted);
            }
            this.InvokeAsync("GetDesktopUses", new object[] {
                        key,
                        email,
                        month,
                        year}, this.GetDesktopUsesOperationCompleted, userState);
        }
        
        private void OnGetDesktopUsesOperationCompleted(object arg) {
            if ((this.GetDesktopUsesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDesktopUsesCompleted(this, new GetDesktopUsesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/InsertDesktopUse", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void InsertDesktopUse(string key, string name, string email, string zip, int clientID) {
            this.Invoke("InsertDesktopUse", new object[] {
                        key,
                        name,
                        email,
                        zip,
                        clientID});
        }
        
        /// <remarks/>
        public void InsertDesktopUseAsync(string key, string name, string email, string zip, int clientID) {
            this.InsertDesktopUseAsync(key, name, email, zip, clientID, null);
        }
        
        /// <remarks/>
        public void InsertDesktopUseAsync(string key, string name, string email, string zip, int clientID, object userState) {
            if ((this.InsertDesktopUseOperationCompleted == null)) {
                this.InsertDesktopUseOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertDesktopUseOperationCompleted);
            }
            this.InvokeAsync("InsertDesktopUse", new object[] {
                        key,
                        name,
                        email,
                        zip,
                        clientID}, this.InsertDesktopUseOperationCompleted, userState);
        }
        
        private void OnInsertDesktopUseOperationCompleted(object arg) {
            if ((this.InsertDesktopUseCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsertDesktopUseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/GetAllEndUsers", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public EndUser[] GetAllEndUsers(string key, int clientID) {
            object[] results = this.Invoke("GetAllEndUsers", new object[] {
                        key,
                        clientID});
            return ((EndUser[])(results[0]));
        }
        
        /// <remarks/>
        public void GetAllEndUsersAsync(string key, int clientID) {
            this.GetAllEndUsersAsync(key, clientID, null);
        }
        
        /// <remarks/>
        public void GetAllEndUsersAsync(string key, int clientID, object userState) {
            if ((this.GetAllEndUsersOperationCompleted == null)) {
                this.GetAllEndUsersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAllEndUsersOperationCompleted);
            }
            this.InvokeAsync("GetAllEndUsers", new object[] {
                        key,
                        clientID}, this.GetAllEndUsersOperationCompleted, userState);
        }
        
        private void OnGetAllEndUsersOperationCompleted(object arg) {
            if ((this.GetAllEndUsersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAllEndUsersCompleted(this, new GetAllEndUsersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/UpdateEndUser", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpdateEndUser(string key, int id, EndUser endUser) {
            this.Invoke("UpdateEndUser", new object[] {
                        key,
                        id,
                        endUser});
        }
        
        /// <remarks/>
        public void UpdateEndUserAsync(string key, int id, EndUser endUser) {
            this.UpdateEndUserAsync(key, id, endUser, null);
        }
        
        /// <remarks/>
        public void UpdateEndUserAsync(string key, int id, EndUser endUser, object userState) {
            if ((this.UpdateEndUserOperationCompleted == null)) {
                this.UpdateEndUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateEndUserOperationCompleted);
            }
            this.InvokeAsync("UpdateEndUser", new object[] {
                        key,
                        id,
                        endUser}, this.UpdateEndUserOperationCompleted, userState);
        }
        
        private void OnUpdateEndUserOperationCompleted(object arg) {
            if ((this.UpdateEndUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateEndUserCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/GetEndUsersByClassificationGroup", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public EndUser[] GetEndUsersByClassificationGroup(string key, int classID) {
            object[] results = this.Invoke("GetEndUsersByClassificationGroup", new object[] {
                        key,
                        classID});
            return ((EndUser[])(results[0]));
        }
        
        /// <remarks/>
        public void GetEndUsersByClassificationGroupAsync(string key, int classID) {
            this.GetEndUsersByClassificationGroupAsync(key, classID, null);
        }
        
        /// <remarks/>
        public void GetEndUsersByClassificationGroupAsync(string key, int classID, object userState) {
            if ((this.GetEndUsersByClassificationGroupOperationCompleted == null)) {
                this.GetEndUsersByClassificationGroupOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetEndUsersByClassificationGroupOperationCompleted);
            }
            this.InvokeAsync("GetEndUsersByClassificationGroup", new object[] {
                        key,
                        classID}, this.GetEndUsersByClassificationGroupOperationCompleted, userState);
        }
        
        private void OnGetEndUsersByClassificationGroupOperationCompleted(object arg) {
            if ((this.GetEndUsersByClassificationGroupCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetEndUsersByClassificationGroupCompleted(this, new GetEndUsersByClassificationGroupCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/UpdateClient", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpdateClient(string key, Client client) {
            this.Invoke("UpdateClient", new object[] {
                        key,
                        client});
        }
        
        /// <remarks/>
        public void UpdateClientAsync(string key, Client client) {
            this.UpdateClientAsync(key, client, null);
        }
        
        /// <remarks/>
        public void UpdateClientAsync(string key, Client client, object userState) {
            if ((this.UpdateClientOperationCompleted == null)) {
                this.UpdateClientOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateClientOperationCompleted);
            }
            this.InvokeAsync("UpdateClient", new object[] {
                        key,
                        client}, this.UpdateClientOperationCompleted, userState);
        }
        
        private void OnUpdateClientOperationCompleted(object arg) {
            if ((this.UpdateClientCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateClientCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/InsertClient", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int InsertClient(string key, Client client) {
            object[] results = this.Invoke("InsertClient", new object[] {
                        key,
                        client});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void InsertClientAsync(string key, Client client) {
            this.InsertClientAsync(key, client, null);
        }
        
        /// <remarks/>
        public void InsertClientAsync(string key, Client client, object userState) {
            if ((this.InsertClientOperationCompleted == null)) {
                this.InsertClientOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertClientOperationCompleted);
            }
            this.InvokeAsync("InsertClient", new object[] {
                        key,
                        client}, this.InsertClientOperationCompleted, userState);
        }
        
        private void OnInsertClientOperationCompleted(object arg) {
            if ((this.InsertClientCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsertClientCompleted(this, new InsertClientCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/GetClientIDByRegistrationCode", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GetClientIDByRegistrationCode(string key, string regCode) {
            object[] results = this.Invoke("GetClientIDByRegistrationCode", new object[] {
                        key,
                        regCode});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetClientIDByRegistrationCodeAsync(string key, string regCode) {
            this.GetClientIDByRegistrationCodeAsync(key, regCode, null);
        }
        
        /// <remarks/>
        public void GetClientIDByRegistrationCodeAsync(string key, string regCode, object userState) {
            if ((this.GetClientIDByRegistrationCodeOperationCompleted == null)) {
                this.GetClientIDByRegistrationCodeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetClientIDByRegistrationCodeOperationCompleted);
            }
            this.InvokeAsync("GetClientIDByRegistrationCode", new object[] {
                        key,
                        regCode}, this.GetClientIDByRegistrationCodeOperationCompleted, userState);
        }
        
        private void OnGetClientIDByRegistrationCodeOperationCompleted(object arg) {
            if ((this.GetClientIDByRegistrationCodeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetClientIDByRegistrationCodeCompleted(this, new GetClientIDByRegistrationCodeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/GetClientUpdatePage", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetClientUpdatePage(string key, int clientID) {
            object[] results = this.Invoke("GetClientUpdatePage", new object[] {
                        key,
                        clientID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetClientUpdatePageAsync(string key, int clientID) {
            this.GetClientUpdatePageAsync(key, clientID, null);
        }
        
        /// <remarks/>
        public void GetClientUpdatePageAsync(string key, int clientID, object userState) {
            if ((this.GetClientUpdatePageOperationCompleted == null)) {
                this.GetClientUpdatePageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetClientUpdatePageOperationCompleted);
            }
            this.InvokeAsync("GetClientUpdatePage", new object[] {
                        key,
                        clientID}, this.GetClientUpdatePageOperationCompleted, userState);
        }
        
        private void OnGetClientUpdatePageOperationCompleted(object arg) {
            if ((this.GetClientUpdatePageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetClientUpdatePageCompleted(this, new GetClientUpdatePageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/GetClientIDByEndUserEmail", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GetClientIDByEndUserEmail(string key, string email) {
            object[] results = this.Invoke("GetClientIDByEndUserEmail", new object[] {
                        key,
                        email});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetClientIDByEndUserEmailAsync(string key, string email) {
            this.GetClientIDByEndUserEmailAsync(key, email, null);
        }
        
        /// <remarks/>
        public void GetClientIDByEndUserEmailAsync(string key, string email, object userState) {
            if ((this.GetClientIDByEndUserEmailOperationCompleted == null)) {
                this.GetClientIDByEndUserEmailOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetClientIDByEndUserEmailOperationCompleted);
            }
            this.InvokeAsync("GetClientIDByEndUserEmail", new object[] {
                        key,
                        email}, this.GetClientIDByEndUserEmailOperationCompleted, userState);
        }
        
        private void OnGetClientIDByEndUserEmailOperationCompleted(object arg) {
            if ((this.GetClientIDByEndUserEmailCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetClientIDByEndUserEmailCompleted(this, new GetClientIDByEndUserEmailCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/GetClientUpdateVersion", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GetClientUpdateVersion(string key, int clientID) {
            object[] results = this.Invoke("GetClientUpdateVersion", new object[] {
                        key,
                        clientID});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetClientUpdateVersionAsync(string key, int clientID) {
            this.GetClientUpdateVersionAsync(key, clientID, null);
        }
        
        /// <remarks/>
        public void GetClientUpdateVersionAsync(string key, int clientID, object userState) {
            if ((this.GetClientUpdateVersionOperationCompleted == null)) {
                this.GetClientUpdateVersionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetClientUpdateVersionOperationCompleted);
            }
            this.InvokeAsync("GetClientUpdateVersion", new object[] {
                        key,
                        clientID}, this.GetClientUpdateVersionOperationCompleted, userState);
        }
        
        private void OnGetClientUpdateVersionOperationCompleted(object arg) {
            if ((this.GetClientUpdateVersionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetClientUpdateVersionCompleted(this, new GetClientUpdateVersionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/GetUpdateScript", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetUpdateScript(string key, int clientID) {
            object[] results = this.Invoke("GetUpdateScript", new object[] {
                        key,
                        clientID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetUpdateScriptAsync(string key, int clientID) {
            this.GetUpdateScriptAsync(key, clientID, null);
        }
        
        /// <remarks/>
        public void GetUpdateScriptAsync(string key, int clientID, object userState) {
            if ((this.GetUpdateScriptOperationCompleted == null)) {
                this.GetUpdateScriptOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUpdateScriptOperationCompleted);
            }
            this.InvokeAsync("GetUpdateScript", new object[] {
                        key,
                        clientID}, this.GetUpdateScriptOperationCompleted, userState);
        }
        
        private void OnGetUpdateScriptOperationCompleted(object arg) {
            if ((this.GetUpdateScriptCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUpdateScriptCompleted(this, new GetUpdateScriptCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/GetClientIDBySubLicenseCode", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GetClientIDBySubLicenseCode(string key, string subLicenseCode) {
            object[] results = this.Invoke("GetClientIDBySubLicenseCode", new object[] {
                        key,
                        subLicenseCode});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetClientIDBySubLicenseCodeAsync(string key, string subLicenseCode) {
            this.GetClientIDBySubLicenseCodeAsync(key, subLicenseCode, null);
        }
        
        /// <remarks/>
        public void GetClientIDBySubLicenseCodeAsync(string key, string subLicenseCode, object userState) {
            if ((this.GetClientIDBySubLicenseCodeOperationCompleted == null)) {
                this.GetClientIDBySubLicenseCodeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetClientIDBySubLicenseCodeOperationCompleted);
            }
            this.InvokeAsync("GetClientIDBySubLicenseCode", new object[] {
                        key,
                        subLicenseCode}, this.GetClientIDBySubLicenseCodeOperationCompleted, userState);
        }
        
        private void OnGetClientIDBySubLicenseCodeOperationCompleted(object arg) {
            if ((this.GetClientIDBySubLicenseCodeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetClientIDBySubLicenseCodeCompleted(this, new GetClientIDBySubLicenseCodeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/GetTargetURL", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetTargetURL(string key, int clientID) {
            object[] results = this.Invoke("GetTargetURL", new object[] {
                        key,
                        clientID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetTargetURLAsync(string key, int clientID) {
            this.GetTargetURLAsync(key, clientID, null);
        }
        
        /// <remarks/>
        public void GetTargetURLAsync(string key, int clientID, object userState) {
            if ((this.GetTargetURLOperationCompleted == null)) {
                this.GetTargetURLOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTargetURLOperationCompleted);
            }
            this.InvokeAsync("GetTargetURL", new object[] {
                        key,
                        clientID}, this.GetTargetURLOperationCompleted, userState);
        }
        
        private void OnGetTargetURLOperationCompleted(object arg) {
            if ((this.GetTargetURLCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTargetURLCompleted(this, new GetTargetURLCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/GetClientByNameAndPassword", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Client GetClientByNameAndPassword(string key, string name, string password) {
            object[] results = this.Invoke("GetClientByNameAndPassword", new object[] {
                        key,
                        name,
                        password});
            return ((Client)(results[0]));
        }
        
        /// <remarks/>
        public void GetClientByNameAndPasswordAsync(string key, string name, string password) {
            this.GetClientByNameAndPasswordAsync(key, name, password, null);
        }
        
        /// <remarks/>
        public void GetClientByNameAndPasswordAsync(string key, string name, string password, object userState) {
            if ((this.GetClientByNameAndPasswordOperationCompleted == null)) {
                this.GetClientByNameAndPasswordOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetClientByNameAndPasswordOperationCompleted);
            }
            this.InvokeAsync("GetClientByNameAndPassword", new object[] {
                        key,
                        name,
                        password}, this.GetClientByNameAndPasswordOperationCompleted, userState);
        }
        
        private void OnGetClientByNameAndPasswordOperationCompleted(object arg) {
            if ((this.GetClientByNameAndPasswordCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetClientByNameAndPasswordCompleted(this, new GetClientByNameAndPasswordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/GetClient", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Client GetClient(string key, int clientID) {
            object[] results = this.Invoke("GetClient", new object[] {
                        key,
                        clientID});
            return ((Client)(results[0]));
        }
        
        /// <remarks/>
        public void GetClientAsync(string key, int clientID) {
            this.GetClientAsync(key, clientID, null);
        }
        
        /// <remarks/>
        public void GetClientAsync(string key, int clientID, object userState) {
            if ((this.GetClientOperationCompleted == null)) {
                this.GetClientOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetClientOperationCompleted);
            }
            this.InvokeAsync("GetClient", new object[] {
                        key,
                        clientID}, this.GetClientOperationCompleted, userState);
        }
        
        private void OnGetClientOperationCompleted(object arg) {
            if ((this.GetClientCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetClientCompleted(this, new GetClientCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/GetAllClients", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Client[] GetAllClients(string key) {
            object[] results = this.Invoke("GetAllClients", new object[] {
                        key});
            return ((Client[])(results[0]));
        }
        
        /// <remarks/>
        public void GetAllClientsAsync(string key) {
            this.GetAllClientsAsync(key, null);
        }
        
        /// <remarks/>
        public void GetAllClientsAsync(string key, object userState) {
            if ((this.GetAllClientsOperationCompleted == null)) {
                this.GetAllClientsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAllClientsOperationCompleted);
            }
            this.InvokeAsync("GetAllClients", new object[] {
                        key}, this.GetAllClientsOperationCompleted, userState);
        }
        
        private void OnGetAllClientsOperationCompleted(object arg) {
            if ((this.GetAllClientsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAllClientsCompleted(this, new GetAllClientsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/GetSubLicenseByTargetURL", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public SubLicense GetSubLicenseByTargetURL(string key, string targetURL) {
            object[] results = this.Invoke("GetSubLicenseByTargetURL", new object[] {
                        key,
                        targetURL});
            return ((SubLicense)(results[0]));
        }
        
        /// <remarks/>
        public void GetSubLicenseByTargetURLAsync(string key, string targetURL) {
            this.GetSubLicenseByTargetURLAsync(key, targetURL, null);
        }
        
        /// <remarks/>
        public void GetSubLicenseByTargetURLAsync(string key, string targetURL, object userState) {
            if ((this.GetSubLicenseByTargetURLOperationCompleted == null)) {
                this.GetSubLicenseByTargetURLOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSubLicenseByTargetURLOperationCompleted);
            }
            this.InvokeAsync("GetSubLicenseByTargetURL", new object[] {
                        key,
                        targetURL}, this.GetSubLicenseByTargetURLOperationCompleted, userState);
        }
        
        private void OnGetSubLicenseByTargetURLOperationCompleted(object arg) {
            if ((this.GetSubLicenseByTargetURLCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSubLicenseByTargetURLCompleted(this, new GetSubLicenseByTargetURLCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/GetTargetURLByRegID", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetTargetURLByRegID(string key, string regID) {
            object[] results = this.Invoke("GetTargetURLByRegID", new object[] {
                        key,
                        regID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetTargetURLByRegIDAsync(string key, string regID) {
            this.GetTargetURLByRegIDAsync(key, regID, null);
        }
        
        /// <remarks/>
        public void GetTargetURLByRegIDAsync(string key, string regID, object userState) {
            if ((this.GetTargetURLByRegIDOperationCompleted == null)) {
                this.GetTargetURLByRegIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTargetURLByRegIDOperationCompleted);
            }
            this.InvokeAsync("GetTargetURLByRegID", new object[] {
                        key,
                        regID}, this.GetTargetURLByRegIDOperationCompleted, userState);
        }
        
        private void OnGetTargetURLByRegIDOperationCompleted(object arg) {
            if ((this.GetTargetURLByRegIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTargetURLByRegIDCompleted(this, new GetTargetURLByRegIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/GetSubLicense", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public SubLicense GetSubLicense(string key, int ID) {
            object[] results = this.Invoke("GetSubLicense", new object[] {
                        key,
                        ID});
            return ((SubLicense)(results[0]));
        }
        
        /// <remarks/>
        public void GetSubLicenseAsync(string key, int ID) {
            this.GetSubLicenseAsync(key, ID, null);
        }
        
        /// <remarks/>
        public void GetSubLicenseAsync(string key, int ID, object userState) {
            if ((this.GetSubLicenseOperationCompleted == null)) {
                this.GetSubLicenseOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSubLicenseOperationCompleted);
            }
            this.InvokeAsync("GetSubLicense", new object[] {
                        key,
                        ID}, this.GetSubLicenseOperationCompleted, userState);
        }
        
        private void OnGetSubLicenseOperationCompleted(object arg) {
            if ((this.GetSubLicenseCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSubLicenseCompleted(this, new GetSubLicenseCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/InsertSubLicense", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int InsertSubLicense(string key, SubLicense entity) {
            object[] results = this.Invoke("InsertSubLicense", new object[] {
                        key,
                        entity});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void InsertSubLicenseAsync(string key, SubLicense entity) {
            this.InsertSubLicenseAsync(key, entity, null);
        }
        
        /// <remarks/>
        public void InsertSubLicenseAsync(string key, SubLicense entity, object userState) {
            if ((this.InsertSubLicenseOperationCompleted == null)) {
                this.InsertSubLicenseOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertSubLicenseOperationCompleted);
            }
            this.InvokeAsync("InsertSubLicense", new object[] {
                        key,
                        entity}, this.InsertSubLicenseOperationCompleted, userState);
        }
        
        private void OnInsertSubLicenseOperationCompleted(object arg) {
            if ((this.InsertSubLicenseCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsertSubLicenseCompleted(this, new InsertSubLicenseCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/DeleteSubLicense", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteSubLicense(string key, int entityID) {
            this.Invoke("DeleteSubLicense", new object[] {
                        key,
                        entityID});
        }
        
        /// <remarks/>
        public void DeleteSubLicenseAsync(string key, int entityID) {
            this.DeleteSubLicenseAsync(key, entityID, null);
        }
        
        /// <remarks/>
        public void DeleteSubLicenseAsync(string key, int entityID, object userState) {
            if ((this.DeleteSubLicenseOperationCompleted == null)) {
                this.DeleteSubLicenseOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteSubLicenseOperationCompleted);
            }
            this.InvokeAsync("DeleteSubLicense", new object[] {
                        key,
                        entityID}, this.DeleteSubLicenseOperationCompleted, userState);
        }
        
        private void OnDeleteSubLicenseOperationCompleted(object arg) {
            if ((this.DeleteSubLicenseCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteSubLicenseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/UpdateSubLicense", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpdateSubLicense(string key, int id, SubLicense entity) {
            this.Invoke("UpdateSubLicense", new object[] {
                        key,
                        id,
                        entity});
        }
        
        /// <remarks/>
        public void UpdateSubLicenseAsync(string key, int id, SubLicense entity) {
            this.UpdateSubLicenseAsync(key, id, entity, null);
        }
        
        /// <remarks/>
        public void UpdateSubLicenseAsync(string key, int id, SubLicense entity, object userState) {
            if ((this.UpdateSubLicenseOperationCompleted == null)) {
                this.UpdateSubLicenseOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateSubLicenseOperationCompleted);
            }
            this.InvokeAsync("UpdateSubLicense", new object[] {
                        key,
                        id,
                        entity}, this.UpdateSubLicenseOperationCompleted, userState);
        }
        
        private void OnUpdateSubLicenseOperationCompleted(object arg) {
            if ((this.UpdateSubLicenseCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateSubLicenseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/GetSubLicenseByClientID", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public SubLicense[] GetSubLicenseByClientID(string key, int clientID) {
            object[] results = this.Invoke("GetSubLicenseByClientID", new object[] {
                        key,
                        clientID});
            return ((SubLicense[])(results[0]));
        }
        
        /// <remarks/>
        public void GetSubLicenseByClientIDAsync(string key, int clientID) {
            this.GetSubLicenseByClientIDAsync(key, clientID, null);
        }
        
        /// <remarks/>
        public void GetSubLicenseByClientIDAsync(string key, int clientID, object userState) {
            if ((this.GetSubLicenseByClientIDOperationCompleted == null)) {
                this.GetSubLicenseByClientIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSubLicenseByClientIDOperationCompleted);
            }
            this.InvokeAsync("GetSubLicenseByClientID", new object[] {
                        key,
                        clientID}, this.GetSubLicenseByClientIDOperationCompleted, userState);
        }
        
        private void OnGetSubLicenseByClientIDOperationCompleted(object arg) {
            if ((this.GetSubLicenseByClientIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSubLicenseByClientIDCompleted(this, new GetSubLicenseByClientIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/SendOptimaNotificationEmails", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SendOptimaNotificationEmails(string key, string regID, string name, string email, string zipcode) {
            this.Invoke("SendOptimaNotificationEmails", new object[] {
                        key,
                        regID,
                        name,
                        email,
                        zipcode});
        }
        
        /// <remarks/>
        public void SendOptimaNotificationEmailsAsync(string key, string regID, string name, string email, string zipcode) {
            this.SendOptimaNotificationEmailsAsync(key, regID, name, email, zipcode, null);
        }
        
        /// <remarks/>
        public void SendOptimaNotificationEmailsAsync(string key, string regID, string name, string email, string zipcode, object userState) {
            if ((this.SendOptimaNotificationEmailsOperationCompleted == null)) {
                this.SendOptimaNotificationEmailsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendOptimaNotificationEmailsOperationCompleted);
            }
            this.InvokeAsync("SendOptimaNotificationEmails", new object[] {
                        key,
                        regID,
                        name,
                        email,
                        zipcode}, this.SendOptimaNotificationEmailsOperationCompleted, userState);
        }
        
        private void OnSendOptimaNotificationEmailsOperationCompleted(object arg) {
            if ((this.SendOptimaNotificationEmailsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendOptimaNotificationEmailsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/GetProductName", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetProductName(string key, int clientID) {
            object[] results = this.Invoke("GetProductName", new object[] {
                        key,
                        clientID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetProductNameAsync(string key, int clientID) {
            this.GetProductNameAsync(key, clientID, null);
        }
        
        /// <remarks/>
        public void GetProductNameAsync(string key, int clientID, object userState) {
            if ((this.GetProductNameOperationCompleted == null)) {
                this.GetProductNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetProductNameOperationCompleted);
            }
            this.InvokeAsync("GetProductName", new object[] {
                        key,
                        clientID}, this.GetProductNameOperationCompleted, userState);
        }
        
        private void OnGetProductNameOperationCompleted(object arg) {
            if ((this.GetProductNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetProductNameCompleted(this, new GetProductNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/SetProductName", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SetProductName(string key, int clientID, string productName) {
            this.Invoke("SetProductName", new object[] {
                        key,
                        clientID,
                        productName});
        }
        
        /// <remarks/>
        public void SetProductNameAsync(string key, int clientID, string productName) {
            this.SetProductNameAsync(key, clientID, productName, null);
        }
        
        /// <remarks/>
        public void SetProductNameAsync(string key, int clientID, string productName, object userState) {
            if ((this.SetProductNameOperationCompleted == null)) {
                this.SetProductNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetProductNameOperationCompleted);
            }
            this.InvokeAsync("SetProductName", new object[] {
                        key,
                        clientID,
                        productName}, this.SetProductNameOperationCompleted, userState);
        }
        
        private void OnSetProductNameOperationCompleted(object arg) {
            if ((this.SetProductNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetProductNameCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/UpdateJetnettEZVersion", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int UpdateJetnettEZVersion(string key, int version) {
            object[] results = this.Invoke("UpdateJetnettEZVersion", new object[] {
                        key,
                        version});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateJetnettEZVersionAsync(string key, int version) {
            this.UpdateJetnettEZVersionAsync(key, version, null);
        }
        
        /// <remarks/>
        public void UpdateJetnettEZVersionAsync(string key, int version, object userState) {
            if ((this.UpdateJetnettEZVersionOperationCompleted == null)) {
                this.UpdateJetnettEZVersionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateJetnettEZVersionOperationCompleted);
            }
            this.InvokeAsync("UpdateJetnettEZVersion", new object[] {
                        key,
                        version}, this.UpdateJetnettEZVersionOperationCompleted, userState);
        }
        
        private void OnUpdateJetnettEZVersionOperationCompleted(object arg) {
            if ((this.UpdateJetnettEZVersionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateJetnettEZVersionCompleted(this, new UpdateJetnettEZVersionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/JetnettEZUpdateAvail", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool JetnettEZUpdateAvail(string key, int version) {
            object[] results = this.Invoke("JetnettEZUpdateAvail", new object[] {
                        key,
                        version});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void JetnettEZUpdateAvailAsync(string key, int version) {
            this.JetnettEZUpdateAvailAsync(key, version, null);
        }
        
        /// <remarks/>
        public void JetnettEZUpdateAvailAsync(string key, int version, object userState) {
            if ((this.JetnettEZUpdateAvailOperationCompleted == null)) {
                this.JetnettEZUpdateAvailOperationCompleted = new System.Threading.SendOrPostCallback(this.OnJetnettEZUpdateAvailOperationCompleted);
            }
            this.InvokeAsync("JetnettEZUpdateAvail", new object[] {
                        key,
                        version}, this.JetnettEZUpdateAvailOperationCompleted, userState);
        }
        
        private void OnJetnettEZUpdateAvailOperationCompleted(object arg) {
            if ((this.JetnettEZUpdateAvailCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.JetnettEZUpdateAvailCompleted(this, new JetnettEZUpdateAvailCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/SetXMLURL", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SetXMLURL(string key, int clientID, string url) {
            this.Invoke("SetXMLURL", new object[] {
                        key,
                        clientID,
                        url});
        }
        
        /// <remarks/>
        public void SetXMLURLAsync(string key, int clientID, string url) {
            this.SetXMLURLAsync(key, clientID, url, null);
        }
        
        /// <remarks/>
        public void SetXMLURLAsync(string key, int clientID, string url, object userState) {
            if ((this.SetXMLURLOperationCompleted == null)) {
                this.SetXMLURLOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetXMLURLOperationCompleted);
            }
            this.InvokeAsync("SetXMLURL", new object[] {
                        key,
                        clientID,
                        url}, this.SetXMLURLOperationCompleted, userState);
        }
        
        private void OnSetXMLURLOperationCompleted(object arg) {
            if ((this.SetXMLURLCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetXMLURLCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/SetDesktopXMLURL", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SetDesktopXMLURL(string key, int clientID, string url) {
            this.Invoke("SetDesktopXMLURL", new object[] {
                        key,
                        clientID,
                        url});
        }
        
        /// <remarks/>
        public void SetDesktopXMLURLAsync(string key, int clientID, string url) {
            this.SetDesktopXMLURLAsync(key, clientID, url, null);
        }
        
        /// <remarks/>
        public void SetDesktopXMLURLAsync(string key, int clientID, string url, object userState) {
            if ((this.SetDesktopXMLURLOperationCompleted == null)) {
                this.SetDesktopXMLURLOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetDesktopXMLURLOperationCompleted);
            }
            this.InvokeAsync("SetDesktopXMLURL", new object[] {
                        key,
                        clientID,
                        url}, this.SetDesktopXMLURLOperationCompleted, userState);
        }
        
        private void OnSetDesktopXMLURLOperationCompleted(object arg) {
            if ((this.SetDesktopXMLURLCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetDesktopXMLURLCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/GetXMLURL", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetXMLURL(string key, int clientID) {
            object[] results = this.Invoke("GetXMLURL", new object[] {
                        key,
                        clientID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetXMLURLAsync(string key, int clientID) {
            this.GetXMLURLAsync(key, clientID, null);
        }
        
        /// <remarks/>
        public void GetXMLURLAsync(string key, int clientID, object userState) {
            if ((this.GetXMLURLOperationCompleted == null)) {
                this.GetXMLURLOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetXMLURLOperationCompleted);
            }
            this.InvokeAsync("GetXMLURL", new object[] {
                        key,
                        clientID}, this.GetXMLURLOperationCompleted, userState);
        }
        
        private void OnGetXMLURLOperationCompleted(object arg) {
            if ((this.GetXMLURLCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetXMLURLCompleted(this, new GetXMLURLCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/GetDesktopXMLURL", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetDesktopXMLURL(string key, int clientID) {
            object[] results = this.Invoke("GetDesktopXMLURL", new object[] {
                        key,
                        clientID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetDesktopXMLURLAsync(string key, int clientID) {
            this.GetDesktopXMLURLAsync(key, clientID, null);
        }
        
        /// <remarks/>
        public void GetDesktopXMLURLAsync(string key, int clientID, object userState) {
            if ((this.GetDesktopXMLURLOperationCompleted == null)) {
                this.GetDesktopXMLURLOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDesktopXMLURLOperationCompleted);
            }
            this.InvokeAsync("GetDesktopXMLURL", new object[] {
                        key,
                        clientID}, this.GetDesktopXMLURLOperationCompleted, userState);
        }
        
        private void OnGetDesktopXMLURLOperationCompleted(object arg) {
            if ((this.GetDesktopXMLURLCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDesktopXMLURLCompleted(this, new GetDesktopXMLURLCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/GetAbandonClientID", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GetAbandonClientID(string key, int megID) {
            object[] results = this.Invoke("GetAbandonClientID", new object[] {
                        key,
                        megID});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetAbandonClientIDAsync(string key, int megID) {
            this.GetAbandonClientIDAsync(key, megID, null);
        }
        
        /// <remarks/>
        public void GetAbandonClientIDAsync(string key, int megID, object userState) {
            if ((this.GetAbandonClientIDOperationCompleted == null)) {
                this.GetAbandonClientIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAbandonClientIDOperationCompleted);
            }
            this.InvokeAsync("GetAbandonClientID", new object[] {
                        key,
                        megID}, this.GetAbandonClientIDOperationCompleted, userState);
        }
        
        private void OnGetAbandonClientIDOperationCompleted(object arg) {
            if ((this.GetAbandonClientIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAbandonClientIDCompleted(this, new GetAbandonClientIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/SendNotificationEmails", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SendNotificationEmails(string key, string regID, string name, string email, string zipcode) {
            this.Invoke("SendNotificationEmails", new object[] {
                        key,
                        regID,
                        name,
                        email,
                        zipcode});
        }
        
        /// <remarks/>
        public void SendNotificationEmailsAsync(string key, string regID, string name, string email, string zipcode) {
            this.SendNotificationEmailsAsync(key, regID, name, email, zipcode, null);
        }
        
        /// <remarks/>
        public void SendNotificationEmailsAsync(string key, string regID, string name, string email, string zipcode, object userState) {
            if ((this.SendNotificationEmailsOperationCompleted == null)) {
                this.SendNotificationEmailsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendNotificationEmailsOperationCompleted);
            }
            this.InvokeAsync("SendNotificationEmails", new object[] {
                        key,
                        regID,
                        name,
                        email,
                        zipcode}, this.SendNotificationEmailsOperationCompleted, userState);
        }
        
        private void OnSendNotificationEmailsOperationCompleted(object arg) {
            if ((this.SendNotificationEmailsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendNotificationEmailsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/CoreUpdateAvailable", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool CoreUpdateAvailable(string key, string version) {
            object[] results = this.Invoke("CoreUpdateAvailable", new object[] {
                        key,
                        version});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void CoreUpdateAvailableAsync(string key, string version) {
            this.CoreUpdateAvailableAsync(key, version, null);
        }
        
        /// <remarks/>
        public void CoreUpdateAvailableAsync(string key, string version, object userState) {
            if ((this.CoreUpdateAvailableOperationCompleted == null)) {
                this.CoreUpdateAvailableOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCoreUpdateAvailableOperationCompleted);
            }
            this.InvokeAsync("CoreUpdateAvailable", new object[] {
                        key,
                        version}, this.CoreUpdateAvailableOperationCompleted, userState);
        }
        
        private void OnCoreUpdateAvailableOperationCompleted(object arg) {
            if ((this.CoreUpdateAvailableCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CoreUpdateAvailableCompleted(this, new CoreUpdateAvailableCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/CoreOptimaUpdateAvailable", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool CoreOptimaUpdateAvailable(string key, string version) {
            object[] results = this.Invoke("CoreOptimaUpdateAvailable", new object[] {
                        key,
                        version});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void CoreOptimaUpdateAvailableAsync(string key, string version) {
            this.CoreOptimaUpdateAvailableAsync(key, version, null);
        }
        
        /// <remarks/>
        public void CoreOptimaUpdateAvailableAsync(string key, string version, object userState) {
            if ((this.CoreOptimaUpdateAvailableOperationCompleted == null)) {
                this.CoreOptimaUpdateAvailableOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCoreOptimaUpdateAvailableOperationCompleted);
            }
            this.InvokeAsync("CoreOptimaUpdateAvailable", new object[] {
                        key,
                        version}, this.CoreOptimaUpdateAvailableOperationCompleted, userState);
        }
        
        private void OnCoreOptimaUpdateAvailableOperationCompleted(object arg) {
            if ((this.CoreOptimaUpdateAvailableCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CoreOptimaUpdateAvailableCompleted(this, new CoreOptimaUpdateAvailableCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/GetMEGByClientID", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Metro_eGuide GetMEGByClientID(string key, int clientID) {
            object[] results = this.Invoke("GetMEGByClientID", new object[] {
                        key,
                        clientID});
            return ((Metro_eGuide)(results[0]));
        }
        
        /// <remarks/>
        public void GetMEGByClientIDAsync(string key, int clientID) {
            this.GetMEGByClientIDAsync(key, clientID, null);
        }
        
        /// <remarks/>
        public void GetMEGByClientIDAsync(string key, int clientID, object userState) {
            if ((this.GetMEGByClientIDOperationCompleted == null)) {
                this.GetMEGByClientIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMEGByClientIDOperationCompleted);
            }
            this.InvokeAsync("GetMEGByClientID", new object[] {
                        key,
                        clientID}, this.GetMEGByClientIDOperationCompleted, userState);
        }
        
        private void OnGetMEGByClientIDOperationCompleted(object arg) {
            if ((this.GetMEGByClientIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMEGByClientIDCompleted(this, new GetMEGByClientIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/GetMEGIDByClientID", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GetMEGIDByClientID(string key, int clientID) {
            object[] results = this.Invoke("GetMEGIDByClientID", new object[] {
                        key,
                        clientID});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetMEGIDByClientIDAsync(string key, int clientID) {
            this.GetMEGIDByClientIDAsync(key, clientID, null);
        }
        
        /// <remarks/>
        public void GetMEGIDByClientIDAsync(string key, int clientID, object userState) {
            if ((this.GetMEGIDByClientIDOperationCompleted == null)) {
                this.GetMEGIDByClientIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMEGIDByClientIDOperationCompleted);
            }
            this.InvokeAsync("GetMEGIDByClientID", new object[] {
                        key,
                        clientID}, this.GetMEGIDByClientIDOperationCompleted, userState);
        }
        
        private void OnGetMEGIDByClientIDOperationCompleted(object arg) {
            if ((this.GetMEGIDByClientIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMEGIDByClientIDCompleted(this, new GetMEGIDByClientIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/GetMEG", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Metro_eGuide GetMEG(string key, int megID) {
            object[] results = this.Invoke("GetMEG", new object[] {
                        key,
                        megID});
            return ((Metro_eGuide)(results[0]));
        }
        
        /// <remarks/>
        public void GetMEGAsync(string key, int megID) {
            this.GetMEGAsync(key, megID, null);
        }
        
        /// <remarks/>
        public void GetMEGAsync(string key, int megID, object userState) {
            if ((this.GetMEGOperationCompleted == null)) {
                this.GetMEGOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMEGOperationCompleted);
            }
            this.InvokeAsync("GetMEG", new object[] {
                        key,
                        megID}, this.GetMEGOperationCompleted, userState);
        }
        
        private void OnGetMEGOperationCompleted(object arg) {
            if ((this.GetMEGCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMEGCompleted(this, new GetMEGCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/GetToken", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetToken() {
            object[] results = this.Invoke("GetToken", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetTokenAsync() {
            this.GetTokenAsync(null);
        }
        
        /// <remarks/>
        public void GetTokenAsync(object userState) {
            if ((this.GetTokenOperationCompleted == null)) {
                this.GetTokenOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTokenOperationCompleted);
            }
            this.InvokeAsync("GetToken", new object[0], this.GetTokenOperationCompleted, userState);
        }
        
        private void OnGetTokenOperationCompleted(object arg) {
            if ((this.GetTokenCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTokenCompleted(this, new GetTokenCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/SearchFolders", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public SearchResult[] SearchFolders(int[] folders, string keyword) {
            object[] results = this.Invoke("SearchFolders", new object[] {
                        folders,
                        keyword});
            return ((SearchResult[])(results[0]));
        }
        
        /// <remarks/>
        public void SearchFoldersAsync(int[] folders, string keyword) {
            this.SearchFoldersAsync(folders, keyword, null);
        }
        
        /// <remarks/>
        public void SearchFoldersAsync(int[] folders, string keyword, object userState) {
            if ((this.SearchFoldersOperationCompleted == null)) {
                this.SearchFoldersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSearchFoldersOperationCompleted);
            }
            this.InvokeAsync("SearchFolders", new object[] {
                        folders,
                        keyword}, this.SearchFoldersOperationCompleted, userState);
        }
        
        private void OnSearchFoldersOperationCompleted(object arg) {
            if ((this.SearchFoldersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SearchFoldersCompleted(this, new SearchFoldersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/ElevateLink", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void ElevateLink(int linkID) {
            this.Invoke("ElevateLink", new object[] {
                        linkID});
        }
        
        /// <remarks/>
        public void ElevateLinkAsync(int linkID) {
            this.ElevateLinkAsync(linkID, null);
        }
        
        /// <remarks/>
        public void ElevateLinkAsync(int linkID, object userState) {
            if ((this.ElevateLinkOperationCompleted == null)) {
                this.ElevateLinkOperationCompleted = new System.Threading.SendOrPostCallback(this.OnElevateLinkOperationCompleted);
            }
            this.InvokeAsync("ElevateLink", new object[] {
                        linkID}, this.ElevateLinkOperationCompleted, userState);
        }
        
        private void OnElevateLinkOperationCompleted(object arg) {
            if ((this.ElevateLinkCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ElevateLinkCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/UnElevateLink", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UnElevateLink(int linkID) {
            this.Invoke("UnElevateLink", new object[] {
                        linkID});
        }
        
        /// <remarks/>
        public void UnElevateLinkAsync(int linkID) {
            this.UnElevateLinkAsync(linkID, null);
        }
        
        /// <remarks/>
        public void UnElevateLinkAsync(int linkID, object userState) {
            if ((this.UnElevateLinkOperationCompleted == null)) {
                this.UnElevateLinkOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUnElevateLinkOperationCompleted);
            }
            this.InvokeAsync("UnElevateLink", new object[] {
                        linkID}, this.UnElevateLinkOperationCompleted, userState);
        }
        
        private void OnUnElevateLinkOperationCompleted(object arg) {
            if ((this.UnElevateLinkCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UnElevateLinkCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/ReplaceAllLinksInPages", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void ReplaceAllLinksInPages(string oldUrl, string newUrl, string oldTitle, string newTitle, int[] pages) {
            this.Invoke("ReplaceAllLinksInPages", new object[] {
                        oldUrl,
                        newUrl,
                        oldTitle,
                        newTitle,
                        pages});
        }
        
        /// <remarks/>
        public void ReplaceAllLinksInPagesAsync(string oldUrl, string newUrl, string oldTitle, string newTitle, int[] pages) {
            this.ReplaceAllLinksInPagesAsync(oldUrl, newUrl, oldTitle, newTitle, pages, null);
        }
        
        /// <remarks/>
        public void ReplaceAllLinksInPagesAsync(string oldUrl, string newUrl, string oldTitle, string newTitle, int[] pages, object userState) {
            if ((this.ReplaceAllLinksInPagesOperationCompleted == null)) {
                this.ReplaceAllLinksInPagesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnReplaceAllLinksInPagesOperationCompleted);
            }
            this.InvokeAsync("ReplaceAllLinksInPages", new object[] {
                        oldUrl,
                        newUrl,
                        oldTitle,
                        newTitle,
                        pages}, this.ReplaceAllLinksInPagesOperationCompleted, userState);
        }
        
        private void OnReplaceAllLinksInPagesOperationCompleted(object arg) {
            if ((this.ReplaceAllLinksInPagesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ReplaceAllLinksInPagesCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/RenameFolders", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void RenameFolders(string name, int folderID) {
            this.Invoke("RenameFolders", new object[] {
                        name,
                        folderID});
        }
        
        /// <remarks/>
        public void RenameFoldersAsync(string name, int folderID) {
            this.RenameFoldersAsync(name, folderID, null);
        }
        
        /// <remarks/>
        public void RenameFoldersAsync(string name, int folderID, object userState) {
            if ((this.RenameFoldersOperationCompleted == null)) {
                this.RenameFoldersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRenameFoldersOperationCompleted);
            }
            this.InvokeAsync("RenameFolders", new object[] {
                        name,
                        folderID}, this.RenameFoldersOperationCompleted, userState);
        }
        
        private void OnRenameFoldersOperationCompleted(object arg) {
            if ((this.RenameFoldersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RenameFoldersCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/GetAccessLevel", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GetAccessLevel(string Key, string user) {
            object[] results = this.Invoke("GetAccessLevel", new object[] {
                        Key,
                        user});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetAccessLevelAsync(string Key, string user) {
            this.GetAccessLevelAsync(Key, user, null);
        }
        
        /// <remarks/>
        public void GetAccessLevelAsync(string Key, string user, object userState) {
            if ((this.GetAccessLevelOperationCompleted == null)) {
                this.GetAccessLevelOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAccessLevelOperationCompleted);
            }
            this.InvokeAsync("GetAccessLevel", new object[] {
                        Key,
                        user}, this.GetAccessLevelOperationCompleted, userState);
        }
        
        private void OnGetAccessLevelOperationCompleted(object arg) {
            if ((this.GetAccessLevelCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAccessLevelCompleted(this, new GetAccessLevelCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/GetAllStacks", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Stack[] GetAllStacks() {
            object[] results = this.Invoke("GetAllStacks", new object[0]);
            return ((Stack[])(results[0]));
        }
        
        /// <remarks/>
        public void GetAllStacksAsync() {
            this.GetAllStacksAsync(null);
        }
        
        /// <remarks/>
        public void GetAllStacksAsync(object userState) {
            if ((this.GetAllStacksOperationCompleted == null)) {
                this.GetAllStacksOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAllStacksOperationCompleted);
            }
            this.InvokeAsync("GetAllStacks", new object[0], this.GetAllStacksOperationCompleted, userState);
        }
        
        private void OnGetAllStacksOperationCompleted(object arg) {
            if ((this.GetAllStacksCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAllStacksCompleted(this, new GetAllStacksCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/AddStack", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int AddStack(string Key, Stack stack) {
            object[] results = this.Invoke("AddStack", new object[] {
                        Key,
                        stack});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void AddStackAsync(string Key, Stack stack) {
            this.AddStackAsync(Key, stack, null);
        }
        
        /// <remarks/>
        public void AddStackAsync(string Key, Stack stack, object userState) {
            if ((this.AddStackOperationCompleted == null)) {
                this.AddStackOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddStackOperationCompleted);
            }
            this.InvokeAsync("AddStack", new object[] {
                        Key,
                        stack}, this.AddStackOperationCompleted, userState);
        }
        
        private void OnAddStackOperationCompleted(object arg) {
            if ((this.AddStackCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddStackCompleted(this, new AddStackCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/UpdateStack", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpdateStack(string Key, int ID, Stack stack) {
            this.Invoke("UpdateStack", new object[] {
                        Key,
                        ID,
                        stack});
        }
        
        /// <remarks/>
        public void UpdateStackAsync(string Key, int ID, Stack stack) {
            this.UpdateStackAsync(Key, ID, stack, null);
        }
        
        /// <remarks/>
        public void UpdateStackAsync(string Key, int ID, Stack stack, object userState) {
            if ((this.UpdateStackOperationCompleted == null)) {
                this.UpdateStackOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateStackOperationCompleted);
            }
            this.InvokeAsync("UpdateStack", new object[] {
                        Key,
                        ID,
                        stack}, this.UpdateStackOperationCompleted, userState);
        }
        
        private void OnUpdateStackOperationCompleted(object arg) {
            if ((this.UpdateStackCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateStackCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/GetStack", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Stack GetStack(int id) {
            object[] results = this.Invoke("GetStack", new object[] {
                        id});
            return ((Stack)(results[0]));
        }
        
        /// <remarks/>
        public void GetStackAsync(int id) {
            this.GetStackAsync(id, null);
        }
        
        /// <remarks/>
        public void GetStackAsync(int id, object userState) {
            if ((this.GetStackOperationCompleted == null)) {
                this.GetStackOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetStackOperationCompleted);
            }
            this.InvokeAsync("GetStack", new object[] {
                        id}, this.GetStackOperationCompleted, userState);
        }
        
        private void OnGetStackOperationCompleted(object arg) {
            if ((this.GetStackCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetStackCompleted(this, new GetStackCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/SuspendLink", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SuspendLink(string Key, int linkID) {
            this.Invoke("SuspendLink", new object[] {
                        Key,
                        linkID});
        }
        
        /// <remarks/>
        public void SuspendLinkAsync(string Key, int linkID) {
            this.SuspendLinkAsync(Key, linkID, null);
        }
        
        /// <remarks/>
        public void SuspendLinkAsync(string Key, int linkID, object userState) {
            if ((this.SuspendLinkOperationCompleted == null)) {
                this.SuspendLinkOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSuspendLinkOperationCompleted);
            }
            this.InvokeAsync("SuspendLink", new object[] {
                        Key,
                        linkID}, this.SuspendLinkOperationCompleted, userState);
        }
        
        private void OnSuspendLinkOperationCompleted(object arg) {
            if ((this.SuspendLinkCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SuspendLinkCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/UnSuspendLink", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UnSuspendLink(string Key, int linkID) {
            this.Invoke("UnSuspendLink", new object[] {
                        Key,
                        linkID});
        }
        
        /// <remarks/>
        public void UnSuspendLinkAsync(string Key, int linkID) {
            this.UnSuspendLinkAsync(Key, linkID, null);
        }
        
        /// <remarks/>
        public void UnSuspendLinkAsync(string Key, int linkID, object userState) {
            if ((this.UnSuspendLinkOperationCompleted == null)) {
                this.UnSuspendLinkOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUnSuspendLinkOperationCompleted);
            }
            this.InvokeAsync("UnSuspendLink", new object[] {
                        Key,
                        linkID}, this.UnSuspendLinkOperationCompleted, userState);
        }
        
        private void OnUnSuspendLinkOperationCompleted(object arg) {
            if ((this.UnSuspendLinkCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UnSuspendLinkCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/GetBadLinksByTitleAndUrl", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Bad_Links[] GetBadLinksByTitleAndUrl(string title, string url) {
            object[] results = this.Invoke("GetBadLinksByTitleAndUrl", new object[] {
                        title,
                        url});
            return ((Bad_Links[])(results[0]));
        }
        
        /// <remarks/>
        public void GetBadLinksByTitleAndUrlAsync(string title, string url) {
            this.GetBadLinksByTitleAndUrlAsync(title, url, null);
        }
        
        /// <remarks/>
        public void GetBadLinksByTitleAndUrlAsync(string title, string url, object userState) {
            if ((this.GetBadLinksByTitleAndUrlOperationCompleted == null)) {
                this.GetBadLinksByTitleAndUrlOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetBadLinksByTitleAndUrlOperationCompleted);
            }
            this.InvokeAsync("GetBadLinksByTitleAndUrl", new object[] {
                        title,
                        url}, this.GetBadLinksByTitleAndUrlOperationCompleted, userState);
        }
        
        private void OnGetBadLinksByTitleAndUrlOperationCompleted(object arg) {
            if ((this.GetBadLinksByTitleAndUrlCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetBadLinksByTitleAndUrlCompleted(this, new GetBadLinksByTitleAndUrlCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/GetAdAssignment", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Ad_Assignments GetAdAssignment(int id) {
            object[] results = this.Invoke("GetAdAssignment", new object[] {
                        id});
            return ((Ad_Assignments)(results[0]));
        }
        
        /// <remarks/>
        public void GetAdAssignmentAsync(int id) {
            this.GetAdAssignmentAsync(id, null);
        }
        
        /// <remarks/>
        public void GetAdAssignmentAsync(int id, object userState) {
            if ((this.GetAdAssignmentOperationCompleted == null)) {
                this.GetAdAssignmentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAdAssignmentOperationCompleted);
            }
            this.InvokeAsync("GetAdAssignment", new object[] {
                        id}, this.GetAdAssignmentOperationCompleted, userState);
        }
        
        private void OnGetAdAssignmentOperationCompleted(object arg) {
            if ((this.GetAdAssignmentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAdAssignmentCompleted(this, new GetAdAssignmentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/GetAdsModelByAssignment", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Ads_Model GetAdsModelByAssignment(int assignmentID) {
            object[] results = this.Invoke("GetAdsModelByAssignment", new object[] {
                        assignmentID});
            return ((Ads_Model)(results[0]));
        }
        
        /// <remarks/>
        public void GetAdsModelByAssignmentAsync(int assignmentID) {
            this.GetAdsModelByAssignmentAsync(assignmentID, null);
        }
        
        /// <remarks/>
        public void GetAdsModelByAssignmentAsync(int assignmentID, object userState) {
            if ((this.GetAdsModelByAssignmentOperationCompleted == null)) {
                this.GetAdsModelByAssignmentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAdsModelByAssignmentOperationCompleted);
            }
            this.InvokeAsync("GetAdsModelByAssignment", new object[] {
                        assignmentID}, this.GetAdsModelByAssignmentOperationCompleted, userState);
        }
        
        private void OnGetAdsModelByAssignmentOperationCompleted(object arg) {
            if ((this.GetAdsModelByAssignmentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAdsModelByAssignmentCompleted(this, new GetAdsModelByAssignmentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/GetAdAssignmentsByAdGroup", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Ad_Assignments[] GetAdAssignmentsByAdGroup(int adGroup) {
            object[] results = this.Invoke("GetAdAssignmentsByAdGroup", new object[] {
                        adGroup});
            return ((Ad_Assignments[])(results[0]));
        }
        
        /// <remarks/>
        public void GetAdAssignmentsByAdGroupAsync(int adGroup) {
            this.GetAdAssignmentsByAdGroupAsync(adGroup, null);
        }
        
        /// <remarks/>
        public void GetAdAssignmentsByAdGroupAsync(int adGroup, object userState) {
            if ((this.GetAdAssignmentsByAdGroupOperationCompleted == null)) {
                this.GetAdAssignmentsByAdGroupOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAdAssignmentsByAdGroupOperationCompleted);
            }
            this.InvokeAsync("GetAdAssignmentsByAdGroup", new object[] {
                        adGroup}, this.GetAdAssignmentsByAdGroupOperationCompleted, userState);
        }
        
        private void OnGetAdAssignmentsByAdGroupOperationCompleted(object arg) {
            if ((this.GetAdAssignmentsByAdGroupCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAdAssignmentsByAdGroupCompleted(this, new GetAdAssignmentsByAdGroupCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/GetAdsModel", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Ads_Model GetAdsModel(int id) {
            object[] results = this.Invoke("GetAdsModel", new object[] {
                        id});
            return ((Ads_Model)(results[0]));
        }
        
        /// <remarks/>
        public void GetAdsModelAsync(int id) {
            this.GetAdsModelAsync(id, null);
        }
        
        /// <remarks/>
        public void GetAdsModelAsync(int id, object userState) {
            if ((this.GetAdsModelOperationCompleted == null)) {
                this.GetAdsModelOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAdsModelOperationCompleted);
            }
            this.InvokeAsync("GetAdsModel", new object[] {
                        id}, this.GetAdsModelOperationCompleted, userState);
        }
        
        private void OnGetAdsModelOperationCompleted(object arg) {
            if ((this.GetAdsModelCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAdsModelCompleted(this, new GetAdsModelCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/GetAllAdsModel", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Ads_Model[] GetAllAdsModel() {
            object[] results = this.Invoke("GetAllAdsModel", new object[0]);
            return ((Ads_Model[])(results[0]));
        }
        
        /// <remarks/>
        public void GetAllAdsModelAsync() {
            this.GetAllAdsModelAsync(null);
        }
        
        /// <remarks/>
        public void GetAllAdsModelAsync(object userState) {
            if ((this.GetAllAdsModelOperationCompleted == null)) {
                this.GetAllAdsModelOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAllAdsModelOperationCompleted);
            }
            this.InvokeAsync("GetAllAdsModel", new object[0], this.GetAllAdsModelOperationCompleted, userState);
        }
        
        private void OnGetAllAdsModelOperationCompleted(object arg) {
            if ((this.GetAllAdsModelCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAllAdsModelCompleted(this, new GetAllAdsModelCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/GetAdsModelsByAdGroup", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Ads_Model[] GetAdsModelsByAdGroup(int adGroup) {
            object[] results = this.Invoke("GetAdsModelsByAdGroup", new object[] {
                        adGroup});
            return ((Ads_Model[])(results[0]));
        }
        
        /// <remarks/>
        public void GetAdsModelsByAdGroupAsync(int adGroup) {
            this.GetAdsModelsByAdGroupAsync(adGroup, null);
        }
        
        /// <remarks/>
        public void GetAdsModelsByAdGroupAsync(int adGroup, object userState) {
            if ((this.GetAdsModelsByAdGroupOperationCompleted == null)) {
                this.GetAdsModelsByAdGroupOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAdsModelsByAdGroupOperationCompleted);
            }
            this.InvokeAsync("GetAdsModelsByAdGroup", new object[] {
                        adGroup}, this.GetAdsModelsByAdGroupOperationCompleted, userState);
        }
        
        private void OnGetAdsModelsByAdGroupOperationCompleted(object arg) {
            if ((this.GetAdsModelsByAdGroupCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAdsModelsByAdGroupCompleted(this, new GetAdsModelsByAdGroupCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/UserRegistered", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UserRegistered(string key, string code) {
            this.Invoke("UserRegistered", new object[] {
                        key,
                        code});
        }
        
        /// <remarks/>
        public void UserRegisteredAsync(string key, string code) {
            this.UserRegisteredAsync(key, code, null);
        }
        
        /// <remarks/>
        public void UserRegisteredAsync(string key, string code, object userState) {
            if ((this.UserRegisteredOperationCompleted == null)) {
                this.UserRegisteredOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUserRegisteredOperationCompleted);
            }
            this.InvokeAsync("UserRegistered", new object[] {
                        key,
                        code}, this.UserRegisteredOperationCompleted, userState);
        }
        
        private void OnUserRegisteredOperationCompleted(object arg) {
            if ((this.UserRegisteredCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UserRegisteredCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/GetLinkCount", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GetLinkCount(string Key, string title, string url) {
            object[] results = this.Invoke("GetLinkCount", new object[] {
                        Key,
                        title,
                        url});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetLinkCountAsync(string Key, string title, string url) {
            this.GetLinkCountAsync(Key, title, url, null);
        }
        
        /// <remarks/>
        public void GetLinkCountAsync(string Key, string title, string url, object userState) {
            if ((this.GetLinkCountOperationCompleted == null)) {
                this.GetLinkCountOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLinkCountOperationCompleted);
            }
            this.InvokeAsync("GetLinkCount", new object[] {
                        Key,
                        title,
                        url}, this.GetLinkCountOperationCompleted, userState);
        }
        
        private void OnGetLinkCountOperationCompleted(object arg) {
            if ((this.GetLinkCountCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetLinkCountCompleted(this, new GetLinkCountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/GetAllLinksByTitleAndURL", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Link[] GetAllLinksByTitleAndURL(string title, string url) {
            object[] results = this.Invoke("GetAllLinksByTitleAndURL", new object[] {
                        title,
                        url});
            return ((Link[])(results[0]));
        }
        
        /// <remarks/>
        public void GetAllLinksByTitleAndURLAsync(string title, string url) {
            this.GetAllLinksByTitleAndURLAsync(title, url, null);
        }
        
        /// <remarks/>
        public void GetAllLinksByTitleAndURLAsync(string title, string url, object userState) {
            if ((this.GetAllLinksByTitleAndURLOperationCompleted == null)) {
                this.GetAllLinksByTitleAndURLOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAllLinksByTitleAndURLOperationCompleted);
            }
            this.InvokeAsync("GetAllLinksByTitleAndURL", new object[] {
                        title,
                        url}, this.GetAllLinksByTitleAndURLOperationCompleted, userState);
        }
        
        private void OnGetAllLinksByTitleAndURLOperationCompleted(object arg) {
            if ((this.GetAllLinksByTitleAndURLCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAllLinksByTitleAndURLCompleted(this, new GetAllLinksByTitleAndURLCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/LogLinkViewerEvent", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int LogLinkViewerEvent(string Key, System.DateTime date, string Username, int folderID, int pageID, int linkID, string eventMessage) {
            object[] results = this.Invoke("LogLinkViewerEvent", new object[] {
                        Key,
                        date,
                        Username,
                        folderID,
                        pageID,
                        linkID,
                        eventMessage});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void LogLinkViewerEventAsync(string Key, System.DateTime date, string Username, int folderID, int pageID, int linkID, string eventMessage) {
            this.LogLinkViewerEventAsync(Key, date, Username, folderID, pageID, linkID, eventMessage, null);
        }
        
        /// <remarks/>
        public void LogLinkViewerEventAsync(string Key, System.DateTime date, string Username, int folderID, int pageID, int linkID, string eventMessage, object userState) {
            if ((this.LogLinkViewerEventOperationCompleted == null)) {
                this.LogLinkViewerEventOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLogLinkViewerEventOperationCompleted);
            }
            this.InvokeAsync("LogLinkViewerEvent", new object[] {
                        Key,
                        date,
                        Username,
                        folderID,
                        pageID,
                        linkID,
                        eventMessage}, this.LogLinkViewerEventOperationCompleted, userState);
        }
        
        private void OnLogLinkViewerEventOperationCompleted(object arg) {
            if ((this.LogLinkViewerEventCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LogLinkViewerEventCompleted(this, new LogLinkViewerEventCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/GetFormattedLatestLogs", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] GetFormattedLatestLogs(int amount) {
            object[] results = this.Invoke("GetFormattedLatestLogs", new object[] {
                        amount});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void GetFormattedLatestLogsAsync(int amount) {
            this.GetFormattedLatestLogsAsync(amount, null);
        }
        
        /// <remarks/>
        public void GetFormattedLatestLogsAsync(int amount, object userState) {
            if ((this.GetFormattedLatestLogsOperationCompleted == null)) {
                this.GetFormattedLatestLogsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFormattedLatestLogsOperationCompleted);
            }
            this.InvokeAsync("GetFormattedLatestLogs", new object[] {
                        amount}, this.GetFormattedLatestLogsOperationCompleted, userState);
        }
        
        private void OnGetFormattedLatestLogsOperationCompleted(object arg) {
            if ((this.GetFormattedLatestLogsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFormattedLatestLogsCompleted(this, new GetFormattedLatestLogsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/ReplaceAllLink", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void ReplaceAllLink(string Key, string newTitle, string newURL, string oldTitle, string oldURL) {
            this.Invoke("ReplaceAllLink", new object[] {
                        Key,
                        newTitle,
                        newURL,
                        oldTitle,
                        oldURL});
        }
        
        /// <remarks/>
        public void ReplaceAllLinkAsync(string Key, string newTitle, string newURL, string oldTitle, string oldURL) {
            this.ReplaceAllLinkAsync(Key, newTitle, newURL, oldTitle, oldURL, null);
        }
        
        /// <remarks/>
        public void ReplaceAllLinkAsync(string Key, string newTitle, string newURL, string oldTitle, string oldURL, object userState) {
            if ((this.ReplaceAllLinkOperationCompleted == null)) {
                this.ReplaceAllLinkOperationCompleted = new System.Threading.SendOrPostCallback(this.OnReplaceAllLinkOperationCompleted);
            }
            this.InvokeAsync("ReplaceAllLink", new object[] {
                        Key,
                        newTitle,
                        newURL,
                        oldTitle,
                        oldURL}, this.ReplaceAllLinkOperationCompleted, userState);
        }
        
        private void OnReplaceAllLinkOperationCompleted(object arg) {
            if ((this.ReplaceAllLinkCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ReplaceAllLinkCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/EmailTrackerCodeExists", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool EmailTrackerCodeExists(string key, string code) {
            object[] results = this.Invoke("EmailTrackerCodeExists", new object[] {
                        key,
                        code});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void EmailTrackerCodeExistsAsync(string key, string code) {
            this.EmailTrackerCodeExistsAsync(key, code, null);
        }
        
        /// <remarks/>
        public void EmailTrackerCodeExistsAsync(string key, string code, object userState) {
            if ((this.EmailTrackerCodeExistsOperationCompleted == null)) {
                this.EmailTrackerCodeExistsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnEmailTrackerCodeExistsOperationCompleted);
            }
            this.InvokeAsync("EmailTrackerCodeExists", new object[] {
                        key,
                        code}, this.EmailTrackerCodeExistsOperationCompleted, userState);
        }
        
        private void OnEmailTrackerCodeExistsOperationCompleted(object arg) {
            if ((this.EmailTrackerCodeExistsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.EmailTrackerCodeExistsCompleted(this, new EmailTrackerCodeExistsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/GetAllLinkViewerLogs", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Link_Viewer_Logs[] GetAllLinkViewerLogs(string Key) {
            object[] results = this.Invoke("GetAllLinkViewerLogs", new object[] {
                        Key});
            return ((Link_Viewer_Logs[])(results[0]));
        }
        
        /// <remarks/>
        public void GetAllLinkViewerLogsAsync(string Key) {
            this.GetAllLinkViewerLogsAsync(Key, null);
        }
        
        /// <remarks/>
        public void GetAllLinkViewerLogsAsync(string Key, object userState) {
            if ((this.GetAllLinkViewerLogsOperationCompleted == null)) {
                this.GetAllLinkViewerLogsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAllLinkViewerLogsOperationCompleted);
            }
            this.InvokeAsync("GetAllLinkViewerLogs", new object[] {
                        Key}, this.GetAllLinkViewerLogsOperationCompleted, userState);
        }
        
        private void OnGetAllLinkViewerLogsOperationCompleted(object arg) {
            if ((this.GetAllLinkViewerLogsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAllLinkViewerLogsCompleted(this, new GetAllLinkViewerLogsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/GetJetNettEZInformationCenterVersion", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GetJetNettEZInformationCenterVersion(string key) {
            object[] results = this.Invoke("GetJetNettEZInformationCenterVersion", new object[] {
                        key});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetJetNettEZInformationCenterVersionAsync(string key) {
            this.GetJetNettEZInformationCenterVersionAsync(key, null);
        }
        
        /// <remarks/>
        public void GetJetNettEZInformationCenterVersionAsync(string key, object userState) {
            if ((this.GetJetNettEZInformationCenterVersionOperationCompleted == null)) {
                this.GetJetNettEZInformationCenterVersionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetJetNettEZInformationCenterVersionOperationCompleted);
            }
            this.InvokeAsync("GetJetNettEZInformationCenterVersion", new object[] {
                        key}, this.GetJetNettEZInformationCenterVersionOperationCompleted, userState);
        }
        
        private void OnGetJetNettEZInformationCenterVersionOperationCompleted(object arg) {
            if ((this.GetJetNettEZInformationCenterVersionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetJetNettEZInformationCenterVersionCompleted(this, new GetJetNettEZInformationCenterVersionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/InsertSchoolInfo", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int InsertSchoolInfo(string key, School_Info schoolInfo) {
            object[] results = this.Invoke("InsertSchoolInfo", new object[] {
                        key,
                        schoolInfo});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void InsertSchoolInfoAsync(string key, School_Info schoolInfo) {
            this.InsertSchoolInfoAsync(key, schoolInfo, null);
        }
        
        /// <remarks/>
        public void InsertSchoolInfoAsync(string key, School_Info schoolInfo, object userState) {
            if ((this.InsertSchoolInfoOperationCompleted == null)) {
                this.InsertSchoolInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertSchoolInfoOperationCompleted);
            }
            this.InvokeAsync("InsertSchoolInfo", new object[] {
                        key,
                        schoolInfo}, this.InsertSchoolInfoOperationCompleted, userState);
        }
        
        private void OnInsertSchoolInfoOperationCompleted(object arg) {
            if ((this.InsertSchoolInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsertSchoolInfoCompleted(this, new InsertSchoolInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/GetAllSchools", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public School_Info[] GetAllSchools(string key) {
            object[] results = this.Invoke("GetAllSchools", new object[] {
                        key});
            return ((School_Info[])(results[0]));
        }
        
        /// <remarks/>
        public void GetAllSchoolsAsync(string key) {
            this.GetAllSchoolsAsync(key, null);
        }
        
        /// <remarks/>
        public void GetAllSchoolsAsync(string key, object userState) {
            if ((this.GetAllSchoolsOperationCompleted == null)) {
                this.GetAllSchoolsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAllSchoolsOperationCompleted);
            }
            this.InvokeAsync("GetAllSchools", new object[] {
                        key}, this.GetAllSchoolsOperationCompleted, userState);
        }
        
        private void OnGetAllSchoolsOperationCompleted(object arg) {
            if ((this.GetAllSchoolsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAllSchoolsCompleted(this, new GetAllSchoolsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/GetSchoolInfo", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public School_Info GetSchoolInfo(string key, int id) {
            object[] results = this.Invoke("GetSchoolInfo", new object[] {
                        key,
                        id});
            return ((School_Info)(results[0]));
        }
        
        /// <remarks/>
        public void GetSchoolInfoAsync(string key, int id) {
            this.GetSchoolInfoAsync(key, id, null);
        }
        
        /// <remarks/>
        public void GetSchoolInfoAsync(string key, int id, object userState) {
            if ((this.GetSchoolInfoOperationCompleted == null)) {
                this.GetSchoolInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSchoolInfoOperationCompleted);
            }
            this.InvokeAsync("GetSchoolInfo", new object[] {
                        key,
                        id}, this.GetSchoolInfoOperationCompleted, userState);
        }
        
        private void OnGetSchoolInfoOperationCompleted(object arg) {
            if ((this.GetSchoolInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSchoolInfoCompleted(this, new GetSchoolInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/UpdateSchoolInfo", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpdateSchoolInfo(string key, School_Info schoolInfo, int id) {
            this.Invoke("UpdateSchoolInfo", new object[] {
                        key,
                        schoolInfo,
                        id});
        }
        
        /// <remarks/>
        public void UpdateSchoolInfoAsync(string key, School_Info schoolInfo, int id) {
            this.UpdateSchoolInfoAsync(key, schoolInfo, id, null);
        }
        
        /// <remarks/>
        public void UpdateSchoolInfoAsync(string key, School_Info schoolInfo, int id, object userState) {
            if ((this.UpdateSchoolInfoOperationCompleted == null)) {
                this.UpdateSchoolInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateSchoolInfoOperationCompleted);
            }
            this.InvokeAsync("UpdateSchoolInfo", new object[] {
                        key,
                        schoolInfo,
                        id}, this.UpdateSchoolInfoOperationCompleted, userState);
        }
        
        private void OnUpdateSchoolInfoOperationCompleted(object arg) {
            if ((this.UpdateSchoolInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateSchoolInfoCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/DeleteSchoolInfo", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteSchoolInfo(string key, int id) {
            this.Invoke("DeleteSchoolInfo", new object[] {
                        key,
                        id});
        }
        
        /// <remarks/>
        public void DeleteSchoolInfoAsync(string key, int id) {
            this.DeleteSchoolInfoAsync(key, id, null);
        }
        
        /// <remarks/>
        public void DeleteSchoolInfoAsync(string key, int id, object userState) {
            if ((this.DeleteSchoolInfoOperationCompleted == null)) {
                this.DeleteSchoolInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteSchoolInfoOperationCompleted);
            }
            this.InvokeAsync("DeleteSchoolInfo", new object[] {
                        key,
                        id}, this.DeleteSchoolInfoOperationCompleted, userState);
        }
        
        private void OnDeleteSchoolInfoOperationCompleted(object arg) {
            if ((this.DeleteSchoolInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteSchoolInfoCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/SearchFolder", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public SearchResult[] SearchFolder(string key, string query, int folder) {
            object[] results = this.Invoke("SearchFolder", new object[] {
                        key,
                        query,
                        folder});
            return ((SearchResult[])(results[0]));
        }
        
        /// <remarks/>
        public void SearchFolderAsync(string key, string query, int folder) {
            this.SearchFolderAsync(key, query, folder, null);
        }
        
        /// <remarks/>
        public void SearchFolderAsync(string key, string query, int folder, object userState) {
            if ((this.SearchFolderOperationCompleted == null)) {
                this.SearchFolderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSearchFolderOperationCompleted);
            }
            this.InvokeAsync("SearchFolder", new object[] {
                        key,
                        query,
                        folder}, this.SearchFolderOperationCompleted, userState);
        }
        
        private void OnSearchFolderOperationCompleted(object arg) {
            if ((this.SearchFolderCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SearchFolderCompleted(this, new SearchFolderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/Login", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool Login(string key, string user, string pass) {
            object[] results = this.Invoke("Login", new object[] {
                        key,
                        user,
                        pass});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void LoginAsync(string key, string user, string pass) {
            this.LoginAsync(key, user, pass, null);
        }
        
        /// <remarks/>
        public void LoginAsync(string key, string user, string pass, object userState) {
            if ((this.LoginOperationCompleted == null)) {
                this.LoginOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLoginOperationCompleted);
            }
            this.InvokeAsync("Login", new object[] {
                        key,
                        user,
                        pass}, this.LoginOperationCompleted, userState);
        }
        
        private void OnLoginOperationCompleted(object arg) {
            if ((this.LoginCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LoginCompleted(this, new LoginCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/Auth", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool Auth(string Key) {
            object[] results = this.Invoke("Auth", new object[] {
                        Key});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void AuthAsync(string Key) {
            this.AuthAsync(Key, null);
        }
        
        /// <remarks/>
        public void AuthAsync(string Key, object userState) {
            if ((this.AuthOperationCompleted == null)) {
                this.AuthOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAuthOperationCompleted);
            }
            this.InvokeAsync("Auth", new object[] {
                        Key}, this.AuthOperationCompleted, userState);
        }
        
        private void OnAuthOperationCompleted(object arg) {
            if ((this.AuthCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AuthCompleted(this, new AuthCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/AddURLToLinkCheckerWhitelist", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void AddURLToLinkCheckerWhitelist(string url) {
            this.Invoke("AddURLToLinkCheckerWhitelist", new object[] {
                        url});
        }
        
        /// <remarks/>
        public void AddURLToLinkCheckerWhitelistAsync(string url) {
            this.AddURLToLinkCheckerWhitelistAsync(url, null);
        }
        
        /// <remarks/>
        public void AddURLToLinkCheckerWhitelistAsync(string url, object userState) {
            if ((this.AddURLToLinkCheckerWhitelistOperationCompleted == null)) {
                this.AddURLToLinkCheckerWhitelistOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddURLToLinkCheckerWhitelistOperationCompleted);
            }
            this.InvokeAsync("AddURLToLinkCheckerWhitelist", new object[] {
                        url}, this.AddURLToLinkCheckerWhitelistOperationCompleted, userState);
        }
        
        private void OnAddURLToLinkCheckerWhitelistOperationCompleted(object arg) {
            if ((this.AddURLToLinkCheckerWhitelistCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddURLToLinkCheckerWhitelistCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/DeleteURLFromLinkCheckerWhitelist", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteURLFromLinkCheckerWhitelist(string url) {
            this.Invoke("DeleteURLFromLinkCheckerWhitelist", new object[] {
                        url});
        }
        
        /// <remarks/>
        public void DeleteURLFromLinkCheckerWhitelistAsync(string url) {
            this.DeleteURLFromLinkCheckerWhitelistAsync(url, null);
        }
        
        /// <remarks/>
        public void DeleteURLFromLinkCheckerWhitelistAsync(string url, object userState) {
            if ((this.DeleteURLFromLinkCheckerWhitelistOperationCompleted == null)) {
                this.DeleteURLFromLinkCheckerWhitelistOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteURLFromLinkCheckerWhitelistOperationCompleted);
            }
            this.InvokeAsync("DeleteURLFromLinkCheckerWhitelist", new object[] {
                        url}, this.DeleteURLFromLinkCheckerWhitelistOperationCompleted, userState);
        }
        
        private void OnDeleteURLFromLinkCheckerWhitelistOperationCompleted(object arg) {
            if ((this.DeleteURLFromLinkCheckerWhitelistCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteURLFromLinkCheckerWhitelistCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/PurgeOldEntriesFromLinkCheckerWhitelist", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void PurgeOldEntriesFromLinkCheckerWhitelist() {
            this.Invoke("PurgeOldEntriesFromLinkCheckerWhitelist", new object[0]);
        }
        
        /// <remarks/>
        public void PurgeOldEntriesFromLinkCheckerWhitelistAsync() {
            this.PurgeOldEntriesFromLinkCheckerWhitelistAsync(null);
        }
        
        /// <remarks/>
        public void PurgeOldEntriesFromLinkCheckerWhitelistAsync(object userState) {
            if ((this.PurgeOldEntriesFromLinkCheckerWhitelistOperationCompleted == null)) {
                this.PurgeOldEntriesFromLinkCheckerWhitelistOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPurgeOldEntriesFromLinkCheckerWhitelistOperationCompleted);
            }
            this.InvokeAsync("PurgeOldEntriesFromLinkCheckerWhitelist", new object[0], this.PurgeOldEntriesFromLinkCheckerWhitelistOperationCompleted, userState);
        }
        
        private void OnPurgeOldEntriesFromLinkCheckerWhitelistOperationCompleted(object arg) {
            if ((this.PurgeOldEntriesFromLinkCheckerWhitelistCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PurgeOldEntriesFromLinkCheckerWhitelistCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/GetLinkCheckerWhitelist", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] GetLinkCheckerWhitelist() {
            object[] results = this.Invoke("GetLinkCheckerWhitelist", new object[0]);
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void GetLinkCheckerWhitelistAsync() {
            this.GetLinkCheckerWhitelistAsync(null);
        }
        
        /// <remarks/>
        public void GetLinkCheckerWhitelistAsync(object userState) {
            if ((this.GetLinkCheckerWhitelistOperationCompleted == null)) {
                this.GetLinkCheckerWhitelistOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLinkCheckerWhitelistOperationCompleted);
            }
            this.InvokeAsync("GetLinkCheckerWhitelist", new object[0], this.GetLinkCheckerWhitelistOperationCompleted, userState);
        }
        
        private void OnGetLinkCheckerWhitelistOperationCompleted(object arg) {
            if ((this.GetLinkCheckerWhitelistCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetLinkCheckerWhitelistCompleted(this, new GetLinkCheckerWhitelistCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/GetBadLinksContainingURL", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Bad_Links[] GetBadLinksContainingURL(string Key, string url) {
            object[] results = this.Invoke("GetBadLinksContainingURL", new object[] {
                        Key,
                        url});
            return ((Bad_Links[])(results[0]));
        }
        
        /// <remarks/>
        public void GetBadLinksContainingURLAsync(string Key, string url) {
            this.GetBadLinksContainingURLAsync(Key, url, null);
        }
        
        /// <remarks/>
        public void GetBadLinksContainingURLAsync(string Key, string url, object userState) {
            if ((this.GetBadLinksContainingURLOperationCompleted == null)) {
                this.GetBadLinksContainingURLOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetBadLinksContainingURLOperationCompleted);
            }
            this.InvokeAsync("GetBadLinksContainingURL", new object[] {
                        Key,
                        url}, this.GetBadLinksContainingURLOperationCompleted, userState);
        }
        
        private void OnGetBadLinksContainingURLOperationCompleted(object arg) {
            if ((this.GetBadLinksContainingURLCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetBadLinksContainingURLCompleted(this, new GetBadLinksContainingURLCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/GetBadLink", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Bad_Links GetBadLink(string Key, int linkID) {
            object[] results = this.Invoke("GetBadLink", new object[] {
                        Key,
                        linkID});
            return ((Bad_Links)(results[0]));
        }
        
        /// <remarks/>
        public void GetBadLinkAsync(string Key, int linkID) {
            this.GetBadLinkAsync(Key, linkID, null);
        }
        
        /// <remarks/>
        public void GetBadLinkAsync(string Key, int linkID, object userState) {
            if ((this.GetBadLinkOperationCompleted == null)) {
                this.GetBadLinkOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetBadLinkOperationCompleted);
            }
            this.InvokeAsync("GetBadLink", new object[] {
                        Key,
                        linkID}, this.GetBadLinkOperationCompleted, userState);
        }
        
        private void OnGetBadLinkOperationCompleted(object arg) {
            if ((this.GetBadLinkCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetBadLinkCompleted(this, new GetBadLinkCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/GetAllBadLinks", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Bad_Links[] GetAllBadLinks(string Key) {
            object[] results = this.Invoke("GetAllBadLinks", new object[] {
                        Key});
            return ((Bad_Links[])(results[0]));
        }
        
        /// <remarks/>
        public void GetAllBadLinksAsync(string Key) {
            this.GetAllBadLinksAsync(Key, null);
        }
        
        /// <remarks/>
        public void GetAllBadLinksAsync(string Key, object userState) {
            if ((this.GetAllBadLinksOperationCompleted == null)) {
                this.GetAllBadLinksOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAllBadLinksOperationCompleted);
            }
            this.InvokeAsync("GetAllBadLinks", new object[] {
                        Key}, this.GetAllBadLinksOperationCompleted, userState);
        }
        
        private void OnGetAllBadLinksOperationCompleted(object arg) {
            if ((this.GetAllBadLinksCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAllBadLinksCompleted(this, new GetAllBadLinksCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/InsertBadLink", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int InsertBadLink(string Key, Bad_Links link) {
            object[] results = this.Invoke("InsertBadLink", new object[] {
                        Key,
                        link});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void InsertBadLinkAsync(string Key, Bad_Links link) {
            this.InsertBadLinkAsync(Key, link, null);
        }
        
        /// <remarks/>
        public void InsertBadLinkAsync(string Key, Bad_Links link, object userState) {
            if ((this.InsertBadLinkOperationCompleted == null)) {
                this.InsertBadLinkOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertBadLinkOperationCompleted);
            }
            this.InvokeAsync("InsertBadLink", new object[] {
                        Key,
                        link}, this.InsertBadLinkOperationCompleted, userState);
        }
        
        private void OnInsertBadLinkOperationCompleted(object arg) {
            if ((this.InsertBadLinkCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsertBadLinkCompleted(this, new InsertBadLinkCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/UpdateBadLink", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpdateBadLink(string Key, int id, Bad_Links link) {
            this.Invoke("UpdateBadLink", new object[] {
                        Key,
                        id,
                        link});
        }
        
        /// <remarks/>
        public void UpdateBadLinkAsync(string Key, int id, Bad_Links link) {
            this.UpdateBadLinkAsync(Key, id, link, null);
        }
        
        /// <remarks/>
        public void UpdateBadLinkAsync(string Key, int id, Bad_Links link, object userState) {
            if ((this.UpdateBadLinkOperationCompleted == null)) {
                this.UpdateBadLinkOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateBadLinkOperationCompleted);
            }
            this.InvokeAsync("UpdateBadLink", new object[] {
                        Key,
                        id,
                        link}, this.UpdateBadLinkOperationCompleted, userState);
        }
        
        private void OnUpdateBadLinkOperationCompleted(object arg) {
            if ((this.UpdateBadLinkCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateBadLinkCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/DeleteBadLink", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteBadLink(string Key, int id) {
            this.Invoke("DeleteBadLink", new object[] {
                        Key,
                        id});
        }
        
        /// <remarks/>
        public void DeleteBadLinkAsync(string Key, int id) {
            this.DeleteBadLinkAsync(Key, id, null);
        }
        
        /// <remarks/>
        public void DeleteBadLinkAsync(string Key, int id, object userState) {
            if ((this.DeleteBadLinkOperationCompleted == null)) {
                this.DeleteBadLinkOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteBadLinkOperationCompleted);
            }
            this.InvokeAsync("DeleteBadLink", new object[] {
                        Key,
                        id}, this.DeleteBadLinkOperationCompleted, userState);
        }
        
        private void OnDeleteBadLinkOperationCompleted(object arg) {
            if ((this.DeleteBadLinkCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteBadLinkCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/DeleteAdGroup", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteAdGroup(string key, int id) {
            this.Invoke("DeleteAdGroup", new object[] {
                        key,
                        id});
        }
        
        /// <remarks/>
        public void DeleteAdGroupAsync(string key, int id) {
            this.DeleteAdGroupAsync(key, id, null);
        }
        
        /// <remarks/>
        public void DeleteAdGroupAsync(string key, int id, object userState) {
            if ((this.DeleteAdGroupOperationCompleted == null)) {
                this.DeleteAdGroupOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteAdGroupOperationCompleted);
            }
            this.InvokeAsync("DeleteAdGroup", new object[] {
                        key,
                        id}, this.DeleteAdGroupOperationCompleted, userState);
        }
        
        private void OnDeleteAdGroupOperationCompleted(object arg) {
            if ((this.DeleteAdGroupCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteAdGroupCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/DeleteAdPageRel", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteAdPageRel(string key, int id) {
            this.Invoke("DeleteAdPageRel", new object[] {
                        key,
                        id});
        }
        
        /// <remarks/>
        public void DeleteAdPageRelAsync(string key, int id) {
            this.DeleteAdPageRelAsync(key, id, null);
        }
        
        /// <remarks/>
        public void DeleteAdPageRelAsync(string key, int id, object userState) {
            if ((this.DeleteAdPageRelOperationCompleted == null)) {
                this.DeleteAdPageRelOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteAdPageRelOperationCompleted);
            }
            this.InvokeAsync("DeleteAdPageRel", new object[] {
                        key,
                        id}, this.DeleteAdPageRelOperationCompleted, userState);
        }
        
        private void OnDeleteAdPageRelOperationCompleted(object arg) {
            if ((this.DeleteAdPageRelCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteAdPageRelCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/GetAdClickReport", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Ad_Tracker[] GetAdClickReport(string key, System.DateTime startTime, System.DateTime endTime, int adID, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] System.Nullable<int> pageID, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] System.Nullable<int> clientID) {
            object[] results = this.Invoke("GetAdClickReport", new object[] {
                        key,
                        startTime,
                        endTime,
                        adID,
                        pageID,
                        clientID});
            return ((Ad_Tracker[])(results[0]));
        }
        
        /// <remarks/>
        public void GetAdClickReportAsync(string key, System.DateTime startTime, System.DateTime endTime, int adID, System.Nullable<int> pageID, System.Nullable<int> clientID) {
            this.GetAdClickReportAsync(key, startTime, endTime, adID, pageID, clientID, null);
        }
        
        /// <remarks/>
        public void GetAdClickReportAsync(string key, System.DateTime startTime, System.DateTime endTime, int adID, System.Nullable<int> pageID, System.Nullable<int> clientID, object userState) {
            if ((this.GetAdClickReportOperationCompleted == null)) {
                this.GetAdClickReportOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAdClickReportOperationCompleted);
            }
            this.InvokeAsync("GetAdClickReport", new object[] {
                        key,
                        startTime,
                        endTime,
                        adID,
                        pageID,
                        clientID}, this.GetAdClickReportOperationCompleted, userState);
        }
        
        private void OnGetAdClickReportOperationCompleted(object arg) {
            if ((this.GetAdClickReportCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAdClickReportCompleted(this, new GetAdClickReportCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/GetAdViewReport", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Ad_View_Tracker[] GetAdViewReport(string key, System.DateTime startTime, System.DateTime endTime, int adID, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] System.Nullable<int> clientID, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] System.Nullable<int> pageID) {
            object[] results = this.Invoke("GetAdViewReport", new object[] {
                        key,
                        startTime,
                        endTime,
                        adID,
                        clientID,
                        pageID});
            return ((Ad_View_Tracker[])(results[0]));
        }
        
        /// <remarks/>
        public void GetAdViewReportAsync(string key, System.DateTime startTime, System.DateTime endTime, int adID, System.Nullable<int> clientID, System.Nullable<int> pageID) {
            this.GetAdViewReportAsync(key, startTime, endTime, adID, clientID, pageID, null);
        }
        
        /// <remarks/>
        public void GetAdViewReportAsync(string key, System.DateTime startTime, System.DateTime endTime, int adID, System.Nullable<int> clientID, System.Nullable<int> pageID, object userState) {
            if ((this.GetAdViewReportOperationCompleted == null)) {
                this.GetAdViewReportOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAdViewReportOperationCompleted);
            }
            this.InvokeAsync("GetAdViewReport", new object[] {
                        key,
                        startTime,
                        endTime,
                        adID,
                        clientID,
                        pageID}, this.GetAdViewReportOperationCompleted, userState);
        }
        
        private void OnGetAdViewReportOperationCompleted(object arg) {
            if ((this.GetAdViewReportCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAdViewReportCompleted(this, new GetAdViewReportCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/GetAllAdPageRelationships", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Ad_Page_Relationship[] GetAllAdPageRelationships(string key) {
            object[] results = this.Invoke("GetAllAdPageRelationships", new object[] {
                        key});
            return ((Ad_Page_Relationship[])(results[0]));
        }
        
        /// <remarks/>
        public void GetAllAdPageRelationshipsAsync(string key) {
            this.GetAllAdPageRelationshipsAsync(key, null);
        }
        
        /// <remarks/>
        public void GetAllAdPageRelationshipsAsync(string key, object userState) {
            if ((this.GetAllAdPageRelationshipsOperationCompleted == null)) {
                this.GetAllAdPageRelationshipsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAllAdPageRelationshipsOperationCompleted);
            }
            this.InvokeAsync("GetAllAdPageRelationships", new object[] {
                        key}, this.GetAllAdPageRelationshipsOperationCompleted, userState);
        }
        
        private void OnGetAllAdPageRelationshipsOperationCompleted(object arg) {
            if ((this.GetAllAdPageRelationshipsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAllAdPageRelationshipsCompleted(this, new GetAllAdPageRelationshipsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/TrackAdClick", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int TrackAdClick(string key, Ad_Tracker entity) {
            object[] results = this.Invoke("TrackAdClick", new object[] {
                        key,
                        entity});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void TrackAdClickAsync(string key, Ad_Tracker entity) {
            this.TrackAdClickAsync(key, entity, null);
        }
        
        /// <remarks/>
        public void TrackAdClickAsync(string key, Ad_Tracker entity, object userState) {
            if ((this.TrackAdClickOperationCompleted == null)) {
                this.TrackAdClickOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTrackAdClickOperationCompleted);
            }
            this.InvokeAsync("TrackAdClick", new object[] {
                        key,
                        entity}, this.TrackAdClickOperationCompleted, userState);
        }
        
        private void OnTrackAdClickOperationCompleted(object arg) {
            if ((this.TrackAdClickCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TrackAdClickCompleted(this, new TrackAdClickCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/TrackAdView", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int TrackAdView(string key, Ad_View_Tracker entity) {
            object[] results = this.Invoke("TrackAdView", new object[] {
                        key,
                        entity});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void TrackAdViewAsync(string key, Ad_View_Tracker entity) {
            this.TrackAdViewAsync(key, entity, null);
        }
        
        /// <remarks/>
        public void TrackAdViewAsync(string key, Ad_View_Tracker entity, object userState) {
            if ((this.TrackAdViewOperationCompleted == null)) {
                this.TrackAdViewOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTrackAdViewOperationCompleted);
            }
            this.InvokeAsync("TrackAdView", new object[] {
                        key,
                        entity}, this.TrackAdViewOperationCompleted, userState);
        }
        
        private void OnTrackAdViewOperationCompleted(object arg) {
            if ((this.TrackAdViewCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TrackAdViewCompleted(this, new TrackAdViewCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/GetAdPageRelationshipsByAdGroup", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Ad_Page_Relationship[] GetAdPageRelationshipsByAdGroup(string key, int adGroupID) {
            object[] results = this.Invoke("GetAdPageRelationshipsByAdGroup", new object[] {
                        key,
                        adGroupID});
            return ((Ad_Page_Relationship[])(results[0]));
        }
        
        /// <remarks/>
        public void GetAdPageRelationshipsByAdGroupAsync(string key, int adGroupID) {
            this.GetAdPageRelationshipsByAdGroupAsync(key, adGroupID, null);
        }
        
        /// <remarks/>
        public void GetAdPageRelationshipsByAdGroupAsync(string key, int adGroupID, object userState) {
            if ((this.GetAdPageRelationshipsByAdGroupOperationCompleted == null)) {
                this.GetAdPageRelationshipsByAdGroupOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAdPageRelationshipsByAdGroupOperationCompleted);
            }
            this.InvokeAsync("GetAdPageRelationshipsByAdGroup", new object[] {
                        key,
                        adGroupID}, this.GetAdPageRelationshipsByAdGroupOperationCompleted, userState);
        }
        
        private void OnGetAdPageRelationshipsByAdGroupOperationCompleted(object arg) {
            if ((this.GetAdPageRelationshipsByAdGroupCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAdPageRelationshipsByAdGroupCompleted(this, new GetAdPageRelationshipsByAdGroupCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/GetAdPageRelationshipByClientIDAndPageID", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Ad_Page_Relationship GetAdPageRelationshipByClientIDAndPageID(string key, int clientID, int pageID) {
            object[] results = this.Invoke("GetAdPageRelationshipByClientIDAndPageID", new object[] {
                        key,
                        clientID,
                        pageID});
            return ((Ad_Page_Relationship)(results[0]));
        }
        
        /// <remarks/>
        public void GetAdPageRelationshipByClientIDAndPageIDAsync(string key, int clientID, int pageID) {
            this.GetAdPageRelationshipByClientIDAndPageIDAsync(key, clientID, pageID, null);
        }
        
        /// <remarks/>
        public void GetAdPageRelationshipByClientIDAndPageIDAsync(string key, int clientID, int pageID, object userState) {
            if ((this.GetAdPageRelationshipByClientIDAndPageIDOperationCompleted == null)) {
                this.GetAdPageRelationshipByClientIDAndPageIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAdPageRelationshipByClientIDAndPageIDOperationCompleted);
            }
            this.InvokeAsync("GetAdPageRelationshipByClientIDAndPageID", new object[] {
                        key,
                        clientID,
                        pageID}, this.GetAdPageRelationshipByClientIDAndPageIDOperationCompleted, userState);
        }
        
        private void OnGetAdPageRelationshipByClientIDAndPageIDOperationCompleted(object arg) {
            if ((this.GetAdPageRelationshipByClientIDAndPageIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAdPageRelationshipByClientIDAndPageIDCompleted(this, new GetAdPageRelationshipByClientIDAndPageIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/GetAdPageRelationshipByClientIDOnly", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Ad_Page_Relationship GetAdPageRelationshipByClientIDOnly(string key, int clientID) {
            object[] results = this.Invoke("GetAdPageRelationshipByClientIDOnly", new object[] {
                        key,
                        clientID});
            return ((Ad_Page_Relationship)(results[0]));
        }
        
        /// <remarks/>
        public void GetAdPageRelationshipByClientIDOnlyAsync(string key, int clientID) {
            this.GetAdPageRelationshipByClientIDOnlyAsync(key, clientID, null);
        }
        
        /// <remarks/>
        public void GetAdPageRelationshipByClientIDOnlyAsync(string key, int clientID, object userState) {
            if ((this.GetAdPageRelationshipByClientIDOnlyOperationCompleted == null)) {
                this.GetAdPageRelationshipByClientIDOnlyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAdPageRelationshipByClientIDOnlyOperationCompleted);
            }
            this.InvokeAsync("GetAdPageRelationshipByClientIDOnly", new object[] {
                        key,
                        clientID}, this.GetAdPageRelationshipByClientIDOnlyOperationCompleted, userState);
        }
        
        private void OnGetAdPageRelationshipByClientIDOnlyOperationCompleted(object arg) {
            if ((this.GetAdPageRelationshipByClientIDOnlyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAdPageRelationshipByClientIDOnlyCompleted(this, new GetAdPageRelationshipByClientIDOnlyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/GetAdPageRelationshipByPageIDOnly", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Ad_Page_Relationship GetAdPageRelationshipByPageIDOnly(string key, int pageID) {
            object[] results = this.Invoke("GetAdPageRelationshipByPageIDOnly", new object[] {
                        key,
                        pageID});
            return ((Ad_Page_Relationship)(results[0]));
        }
        
        /// <remarks/>
        public void GetAdPageRelationshipByPageIDOnlyAsync(string key, int pageID) {
            this.GetAdPageRelationshipByPageIDOnlyAsync(key, pageID, null);
        }
        
        /// <remarks/>
        public void GetAdPageRelationshipByPageIDOnlyAsync(string key, int pageID, object userState) {
            if ((this.GetAdPageRelationshipByPageIDOnlyOperationCompleted == null)) {
                this.GetAdPageRelationshipByPageIDOnlyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAdPageRelationshipByPageIDOnlyOperationCompleted);
            }
            this.InvokeAsync("GetAdPageRelationshipByPageIDOnly", new object[] {
                        key,
                        pageID}, this.GetAdPageRelationshipByPageIDOnlyOperationCompleted, userState);
        }
        
        private void OnGetAdPageRelationshipByPageIDOnlyOperationCompleted(object arg) {
            if ((this.GetAdPageRelationshipByPageIDOnlyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAdPageRelationshipByPageIDOnlyCompleted(this, new GetAdPageRelationshipByPageIDOnlyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/InsertAdPageRelationship", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void InsertAdPageRelationship(string key, Ad_Page_Relationship rel) {
            this.Invoke("InsertAdPageRelationship", new object[] {
                        key,
                        rel});
        }
        
        /// <remarks/>
        public void InsertAdPageRelationshipAsync(string key, Ad_Page_Relationship rel) {
            this.InsertAdPageRelationshipAsync(key, rel, null);
        }
        
        /// <remarks/>
        public void InsertAdPageRelationshipAsync(string key, Ad_Page_Relationship rel, object userState) {
            if ((this.InsertAdPageRelationshipOperationCompleted == null)) {
                this.InsertAdPageRelationshipOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertAdPageRelationshipOperationCompleted);
            }
            this.InvokeAsync("InsertAdPageRelationship", new object[] {
                        key,
                        rel}, this.InsertAdPageRelationshipOperationCompleted, userState);
        }
        
        private void OnInsertAdPageRelationshipOperationCompleted(object arg) {
            if ((this.InsertAdPageRelationshipCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsertAdPageRelationshipCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/IncrementAdGroupSeed", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int IncrementAdGroupSeed(string key, int adGroupID) {
            object[] results = this.Invoke("IncrementAdGroupSeed", new object[] {
                        key,
                        adGroupID});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void IncrementAdGroupSeedAsync(string key, int adGroupID) {
            this.IncrementAdGroupSeedAsync(key, adGroupID, null);
        }
        
        /// <remarks/>
        public void IncrementAdGroupSeedAsync(string key, int adGroupID, object userState) {
            if ((this.IncrementAdGroupSeedOperationCompleted == null)) {
                this.IncrementAdGroupSeedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIncrementAdGroupSeedOperationCompleted);
            }
            this.InvokeAsync("IncrementAdGroupSeed", new object[] {
                        key,
                        adGroupID}, this.IncrementAdGroupSeedOperationCompleted, userState);
        }
        
        private void OnIncrementAdGroupSeedOperationCompleted(object arg) {
            if ((this.IncrementAdGroupSeedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IncrementAdGroupSeedCompleted(this, new IncrementAdGroupSeedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/GetAdGroup", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public AdGroup GetAdGroup(string key, int id) {
            object[] results = this.Invoke("GetAdGroup", new object[] {
                        key,
                        id});
            return ((AdGroup)(results[0]));
        }
        
        /// <remarks/>
        public void GetAdGroupAsync(string key, int id) {
            this.GetAdGroupAsync(key, id, null);
        }
        
        /// <remarks/>
        public void GetAdGroupAsync(string key, int id, object userState) {
            if ((this.GetAdGroupOperationCompleted == null)) {
                this.GetAdGroupOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAdGroupOperationCompleted);
            }
            this.InvokeAsync("GetAdGroup", new object[] {
                        key,
                        id}, this.GetAdGroupOperationCompleted, userState);
        }
        
        private void OnGetAdGroupOperationCompleted(object arg) {
            if ((this.GetAdGroupCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAdGroupCompleted(this, new GetAdGroupCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/UpdateAdGroup", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpdateAdGroup(string key, AdGroup adGroup, int ID) {
            this.Invoke("UpdateAdGroup", new object[] {
                        key,
                        adGroup,
                        ID});
        }
        
        /// <remarks/>
        public void UpdateAdGroupAsync(string key, AdGroup adGroup, int ID) {
            this.UpdateAdGroupAsync(key, adGroup, ID, null);
        }
        
        /// <remarks/>
        public void UpdateAdGroupAsync(string key, AdGroup adGroup, int ID, object userState) {
            if ((this.UpdateAdGroupOperationCompleted == null)) {
                this.UpdateAdGroupOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateAdGroupOperationCompleted);
            }
            this.InvokeAsync("UpdateAdGroup", new object[] {
                        key,
                        adGroup,
                        ID}, this.UpdateAdGroupOperationCompleted, userState);
        }
        
        private void OnUpdateAdGroupOperationCompleted(object arg) {
            if ((this.UpdateAdGroupCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateAdGroupCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/InsertAdGroup", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int InsertAdGroup(string key, AdGroup group) {
            object[] results = this.Invoke("InsertAdGroup", new object[] {
                        key,
                        group});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void InsertAdGroupAsync(string key, AdGroup group) {
            this.InsertAdGroupAsync(key, group, null);
        }
        
        /// <remarks/>
        public void InsertAdGroupAsync(string key, AdGroup group, object userState) {
            if ((this.InsertAdGroupOperationCompleted == null)) {
                this.InsertAdGroupOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertAdGroupOperationCompleted);
            }
            this.InvokeAsync("InsertAdGroup", new object[] {
                        key,
                        group}, this.InsertAdGroupOperationCompleted, userState);
        }
        
        private void OnInsertAdGroupOperationCompleted(object arg) {
            if ((this.InsertAdGroupCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsertAdGroupCompleted(this, new InsertAdGroupCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/GetAllAdGroups", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public AdGroup[] GetAllAdGroups(string key) {
            object[] results = this.Invoke("GetAllAdGroups", new object[] {
                        key});
            return ((AdGroup[])(results[0]));
        }
        
        /// <remarks/>
        public void GetAllAdGroupsAsync(string key) {
            this.GetAllAdGroupsAsync(key, null);
        }
        
        /// <remarks/>
        public void GetAllAdGroupsAsync(string key, object userState) {
            if ((this.GetAllAdGroupsOperationCompleted == null)) {
                this.GetAllAdGroupsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAllAdGroupsOperationCompleted);
            }
            this.InvokeAsync("GetAllAdGroups", new object[] {
                        key}, this.GetAllAdGroupsOperationCompleted, userState);
        }
        
        private void OnGetAllAdGroupsOperationCompleted(object arg) {
            if ((this.GetAllAdGroupsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAllAdGroupsCompleted(this, new GetAllAdGroupsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/GetAdPageRelationshipByID", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Ad_Page_Relationship GetAdPageRelationshipByID(string key, int id) {
            object[] results = this.Invoke("GetAdPageRelationshipByID", new object[] {
                        key,
                        id});
            return ((Ad_Page_Relationship)(results[0]));
        }
        
        /// <remarks/>
        public void GetAdPageRelationshipByIDAsync(string key, int id) {
            this.GetAdPageRelationshipByIDAsync(key, id, null);
        }
        
        /// <remarks/>
        public void GetAdPageRelationshipByIDAsync(string key, int id, object userState) {
            if ((this.GetAdPageRelationshipByIDOperationCompleted == null)) {
                this.GetAdPageRelationshipByIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAdPageRelationshipByIDOperationCompleted);
            }
            this.InvokeAsync("GetAdPageRelationshipByID", new object[] {
                        key,
                        id}, this.GetAdPageRelationshipByIDOperationCompleted, userState);
        }
        
        private void OnGetAdPageRelationshipByIDOperationCompleted(object arg) {
            if ((this.GetAdPageRelationshipByIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAdPageRelationshipByIDCompleted(this, new GetAdPageRelationshipByIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/DeleteAd", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteAd(string key, int id) {
            this.Invoke("DeleteAd", new object[] {
                        key,
                        id});
        }
        
        /// <remarks/>
        public void DeleteAdAsync(string key, int id) {
            this.DeleteAdAsync(key, id, null);
        }
        
        /// <remarks/>
        public void DeleteAdAsync(string key, int id, object userState) {
            if ((this.DeleteAdOperationCompleted == null)) {
                this.DeleteAdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteAdOperationCompleted);
            }
            this.InvokeAsync("DeleteAd", new object[] {
                        key,
                        id}, this.DeleteAdOperationCompleted, userState);
        }
        
        private void OnDeleteAdOperationCompleted(object arg) {
            if ((this.DeleteAdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteAdCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/GetAdByID", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Ads GetAdByID(string key, int id) {
            object[] results = this.Invoke("GetAdByID", new object[] {
                        key,
                        id});
            return ((Ads)(results[0]));
        }
        
        /// <remarks/>
        public void GetAdByIDAsync(string key, int id) {
            this.GetAdByIDAsync(key, id, null);
        }
        
        /// <remarks/>
        public void GetAdByIDAsync(string key, int id, object userState) {
            if ((this.GetAdByIDOperationCompleted == null)) {
                this.GetAdByIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAdByIDOperationCompleted);
            }
            this.InvokeAsync("GetAdByID", new object[] {
                        key,
                        id}, this.GetAdByIDOperationCompleted, userState);
        }
        
        private void OnGetAdByIDOperationCompleted(object arg) {
            if ((this.GetAdByIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAdByIDCompleted(this, new GetAdByIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/GetAdsByAdGroup", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Ads[] GetAdsByAdGroup(string key, int adGroupID) {
            object[] results = this.Invoke("GetAdsByAdGroup", new object[] {
                        key,
                        adGroupID});
            return ((Ads[])(results[0]));
        }
        
        /// <remarks/>
        public void GetAdsByAdGroupAsync(string key, int adGroupID) {
            this.GetAdsByAdGroupAsync(key, adGroupID, null);
        }
        
        /// <remarks/>
        public void GetAdsByAdGroupAsync(string key, int adGroupID, object userState) {
            if ((this.GetAdsByAdGroupOperationCompleted == null)) {
                this.GetAdsByAdGroupOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAdsByAdGroupOperationCompleted);
            }
            this.InvokeAsync("GetAdsByAdGroup", new object[] {
                        key,
                        adGroupID}, this.GetAdsByAdGroupOperationCompleted, userState);
        }
        
        private void OnGetAdsByAdGroupOperationCompleted(object arg) {
            if ((this.GetAdsByAdGroupCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAdsByAdGroupCompleted(this, new GetAdsByAdGroupCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/GetAdsByClientID", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Ads[] GetAdsByClientID(string key, int clientID) {
            object[] results = this.Invoke("GetAdsByClientID", new object[] {
                        key,
                        clientID});
            return ((Ads[])(results[0]));
        }
        
        /// <remarks/>
        public void GetAdsByClientIDAsync(string key, int clientID) {
            this.GetAdsByClientIDAsync(key, clientID, null);
        }
        
        /// <remarks/>
        public void GetAdsByClientIDAsync(string key, int clientID, object userState) {
            if ((this.GetAdsByClientIDOperationCompleted == null)) {
                this.GetAdsByClientIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAdsByClientIDOperationCompleted);
            }
            this.InvokeAsync("GetAdsByClientID", new object[] {
                        key,
                        clientID}, this.GetAdsByClientIDOperationCompleted, userState);
        }
        
        private void OnGetAdsByClientIDOperationCompleted(object arg) {
            if ((this.GetAdsByClientIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAdsByClientIDCompleted(this, new GetAdsByClientIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/GetAllAds", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Ads[] GetAllAds(string key) {
            object[] results = this.Invoke("GetAllAds", new object[] {
                        key});
            return ((Ads[])(results[0]));
        }
        
        /// <remarks/>
        public void GetAllAdsAsync(string key) {
            this.GetAllAdsAsync(key, null);
        }
        
        /// <remarks/>
        public void GetAllAdsAsync(string key, object userState) {
            if ((this.GetAllAdsOperationCompleted == null)) {
                this.GetAllAdsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAllAdsOperationCompleted);
            }
            this.InvokeAsync("GetAllAds", new object[] {
                        key}, this.GetAllAdsOperationCompleted, userState);
        }
        
        private void OnGetAllAdsOperationCompleted(object arg) {
            if ((this.GetAllAdsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAllAdsCompleted(this, new GetAllAdsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/InsertAd", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int InsertAd(string key, Ads ad) {
            object[] results = this.Invoke("InsertAd", new object[] {
                        key,
                        ad});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void InsertAdAsync(string key, Ads ad) {
            this.InsertAdAsync(key, ad, null);
        }
        
        /// <remarks/>
        public void InsertAdAsync(string key, Ads ad, object userState) {
            if ((this.InsertAdOperationCompleted == null)) {
                this.InsertAdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertAdOperationCompleted);
            }
            this.InvokeAsync("InsertAd", new object[] {
                        key,
                        ad}, this.InsertAdOperationCompleted, userState);
        }
        
        private void OnInsertAdOperationCompleted(object arg) {
            if ((this.InsertAdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsertAdCompleted(this, new InsertAdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/UpdateAd", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpdateAd(string key, Ads ad, int id) {
            this.Invoke("UpdateAd", new object[] {
                        key,
                        ad,
                        id});
        }
        
        /// <remarks/>
        public void UpdateAdAsync(string key, Ads ad, int id) {
            this.UpdateAdAsync(key, ad, id, null);
        }
        
        /// <remarks/>
        public void UpdateAdAsync(string key, Ads ad, int id, object userState) {
            if ((this.UpdateAdOperationCompleted == null)) {
                this.UpdateAdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateAdOperationCompleted);
            }
            this.InvokeAsync("UpdateAd", new object[] {
                        key,
                        ad,
                        id}, this.UpdateAdOperationCompleted, userState);
        }
        
        private void OnUpdateAdOperationCompleted(object arg) {
            if ((this.UpdateAdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateAdCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/InsertMLF", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int InsertMLF(string key, MenuLink_Folder entity) {
            object[] results = this.Invoke("InsertMLF", new object[] {
                        key,
                        entity});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void InsertMLFAsync(string key, MenuLink_Folder entity) {
            this.InsertMLFAsync(key, entity, null);
        }
        
        /// <remarks/>
        public void InsertMLFAsync(string key, MenuLink_Folder entity, object userState) {
            if ((this.InsertMLFOperationCompleted == null)) {
                this.InsertMLFOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertMLFOperationCompleted);
            }
            this.InvokeAsync("InsertMLF", new object[] {
                        key,
                        entity}, this.InsertMLFOperationCompleted, userState);
        }
        
        private void OnInsertMLFOperationCompleted(object arg) {
            if ((this.InsertMLFCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsertMLFCompleted(this, new InsertMLFCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/UpdateMLFByFID", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpdateMLFByFID(string key, MenuLink_Folder entity, int fID) {
            this.Invoke("UpdateMLFByFID", new object[] {
                        key,
                        entity,
                        fID});
        }
        
        /// <remarks/>
        public void UpdateMLFByFIDAsync(string key, MenuLink_Folder entity, int fID) {
            this.UpdateMLFByFIDAsync(key, entity, fID, null);
        }
        
        /// <remarks/>
        public void UpdateMLFByFIDAsync(string key, MenuLink_Folder entity, int fID, object userState) {
            if ((this.UpdateMLFByFIDOperationCompleted == null)) {
                this.UpdateMLFByFIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateMLFByFIDOperationCompleted);
            }
            this.InvokeAsync("UpdateMLFByFID", new object[] {
                        key,
                        entity,
                        fID}, this.UpdateMLFByFIDOperationCompleted, userState);
        }
        
        private void OnUpdateMLFByFIDOperationCompleted(object arg) {
            if ((this.UpdateMLFByFIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateMLFByFIDCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/InsertMLFAuto", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int InsertMLFAuto(string key, string name) {
            object[] results = this.Invoke("InsertMLFAuto", new object[] {
                        key,
                        name});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void InsertMLFAutoAsync(string key, string name) {
            this.InsertMLFAutoAsync(key, name, null);
        }
        
        /// <remarks/>
        public void InsertMLFAutoAsync(string key, string name, object userState) {
            if ((this.InsertMLFAutoOperationCompleted == null)) {
                this.InsertMLFAutoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertMLFAutoOperationCompleted);
            }
            this.InvokeAsync("InsertMLFAuto", new object[] {
                        key,
                        name}, this.InsertMLFAutoOperationCompleted, userState);
        }
        
        private void OnInsertMLFAutoOperationCompleted(object arg) {
            if ((this.InsertMLFAutoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsertMLFAutoCompleted(this, new InsertMLFAutoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/UpdateMLFByID", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpdateMLFByID(string key, MenuLink_Folder entity, int id) {
            this.Invoke("UpdateMLFByID", new object[] {
                        key,
                        entity,
                        id});
        }
        
        /// <remarks/>
        public void UpdateMLFByIDAsync(string key, MenuLink_Folder entity, int id) {
            this.UpdateMLFByIDAsync(key, entity, id, null);
        }
        
        /// <remarks/>
        public void UpdateMLFByIDAsync(string key, MenuLink_Folder entity, int id, object userState) {
            if ((this.UpdateMLFByIDOperationCompleted == null)) {
                this.UpdateMLFByIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateMLFByIDOperationCompleted);
            }
            this.InvokeAsync("UpdateMLFByID", new object[] {
                        key,
                        entity,
                        id}, this.UpdateMLFByIDOperationCompleted, userState);
        }
        
        private void OnUpdateMLFByIDOperationCompleted(object arg) {
            if ((this.UpdateMLFByIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateMLFByIDCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/GetAllMLF", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public MenuLink_Folder[] GetAllMLF(string key) {
            object[] results = this.Invoke("GetAllMLF", new object[] {
                        key});
            return ((MenuLink_Folder[])(results[0]));
        }
        
        /// <remarks/>
        public void GetAllMLFAsync(string key) {
            this.GetAllMLFAsync(key, null);
        }
        
        /// <remarks/>
        public void GetAllMLFAsync(string key, object userState) {
            if ((this.GetAllMLFOperationCompleted == null)) {
                this.GetAllMLFOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAllMLFOperationCompleted);
            }
            this.InvokeAsync("GetAllMLF", new object[] {
                        key}, this.GetAllMLFOperationCompleted, userState);
        }
        
        private void OnGetAllMLFOperationCompleted(object arg) {
            if ((this.GetAllMLFCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAllMLFCompleted(this, new GetAllMLFCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/GetMLFByFID", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public MenuLink_Folder GetMLFByFID(string key, int fID) {
            object[] results = this.Invoke("GetMLFByFID", new object[] {
                        key,
                        fID});
            return ((MenuLink_Folder)(results[0]));
        }
        
        /// <remarks/>
        public void GetMLFByFIDAsync(string key, int fID) {
            this.GetMLFByFIDAsync(key, fID, null);
        }
        
        /// <remarks/>
        public void GetMLFByFIDAsync(string key, int fID, object userState) {
            if ((this.GetMLFByFIDOperationCompleted == null)) {
                this.GetMLFByFIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMLFByFIDOperationCompleted);
            }
            this.InvokeAsync("GetMLFByFID", new object[] {
                        key,
                        fID}, this.GetMLFByFIDOperationCompleted, userState);
        }
        
        private void OnGetMLFByFIDOperationCompleted(object arg) {
            if ((this.GetMLFByFIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMLFByFIDCompleted(this, new GetMLFByFIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metroeguide.net/MEGService/GetMLFByID", RequestNamespace="http://metroeguide.net/MEGService", ResponseNamespace="http://metroeguide.net/MEGService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public MenuLink_Folder GetMLFByID(string key, int ID) {
            object[] results = this.Invoke("GetMLFByID", new object[] {
                        key,
                        ID});
            return ((MenuLink_Folder)(results[0]));
        }
        
        /// <remarks/>
        public void GetMLFByIDAsync(string key, int ID) {
            this.GetMLFByIDAsync(key, ID, null);
        }
        
        /// <remarks/>
        public void GetMLFByIDAsync(string key, int ID, object userState) {
            if ((this.GetMLFByIDOperationCompleted == null)) {
                this.GetMLFByIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMLFByIDOperationCompleted);
            }
            this.InvokeAsync("GetMLFByID", new object[] {
                        key,
                        ID}, this.GetMLFByIDOperationCompleted, userState);
        }
        
        private void OnGetMLFByIDOperationCompleted(object arg) {
            if ((this.GetMLFByIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMLFByIDCompleted(this, new GetMLFByIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18046")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://metroeguide.net/MEGService")]
    public partial class MEG_Primary {
        
        private string button4_TargetField;
        
        private string button4_URLField;
        
        private string button4_TextField;
        
        private string button3_TargetField;
        
        private string button3_URLField;
        
        private string button3_TextField;
        
        private string button2_TargetField;
        
        private string button2_URLField;
        
        private string button2_TextField;
        
        private string button1_TargetField;
        
        private string button1_URLField;
        
        private string button1_TextField;
        
        private string photo_URLField;
        
        private string line3Field;
        
        private string line2Field;
        
        private string line1Field;
        
        private int client_IDField;
        
        private int idField;
        
        /// <remarks/>
        public string Button4_Target {
            get {
                return this.button4_TargetField;
            }
            set {
                this.button4_TargetField = value;
            }
        }
        
        /// <remarks/>
        public string Button4_URL {
            get {
                return this.button4_URLField;
            }
            set {
                this.button4_URLField = value;
            }
        }
        
        /// <remarks/>
        public string Button4_Text {
            get {
                return this.button4_TextField;
            }
            set {
                this.button4_TextField = value;
            }
        }
        
        /// <remarks/>
        public string Button3_Target {
            get {
                return this.button3_TargetField;
            }
            set {
                this.button3_TargetField = value;
            }
        }
        
        /// <remarks/>
        public string Button3_URL {
            get {
                return this.button3_URLField;
            }
            set {
                this.button3_URLField = value;
            }
        }
        
        /// <remarks/>
        public string Button3_Text {
            get {
                return this.button3_TextField;
            }
            set {
                this.button3_TextField = value;
            }
        }
        
        /// <remarks/>
        public string Button2_Target {
            get {
                return this.button2_TargetField;
            }
            set {
                this.button2_TargetField = value;
            }
        }
        
        /// <remarks/>
        public string Button2_URL {
            get {
                return this.button2_URLField;
            }
            set {
                this.button2_URLField = value;
            }
        }
        
        /// <remarks/>
        public string Button2_Text {
            get {
                return this.button2_TextField;
            }
            set {
                this.button2_TextField = value;
            }
        }
        
        /// <remarks/>
        public string Button1_Target {
            get {
                return this.button1_TargetField;
            }
            set {
                this.button1_TargetField = value;
            }
        }
        
        /// <remarks/>
        public string Button1_URL {
            get {
                return this.button1_URLField;
            }
            set {
                this.button1_URLField = value;
            }
        }
        
        /// <remarks/>
        public string Button1_Text {
            get {
                return this.button1_TextField;
            }
            set {
                this.button1_TextField = value;
            }
        }
        
        /// <remarks/>
        public string Photo_URL {
            get {
                return this.photo_URLField;
            }
            set {
                this.photo_URLField = value;
            }
        }
        
        /// <remarks/>
        public string Line3 {
            get {
                return this.line3Field;
            }
            set {
                this.line3Field = value;
            }
        }
        
        /// <remarks/>
        public string Line2 {
            get {
                return this.line2Field;
            }
            set {
                this.line2Field = value;
            }
        }
        
        /// <remarks/>
        public string Line1 {
            get {
                return this.line1Field;
            }
            set {
                this.line1Field = value;
            }
        }
        
        /// <remarks/>
        public int Client_ID {
            get {
                return this.client_IDField;
            }
            set {
                this.client_IDField = value;
            }
        }
        
        /// <remarks/>
        public int ID {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18046")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://metroeguide.net/MEGService")]
    public partial class MenuLink_Folder {
        
        private int idField;
        
        private int f_IDField;
        
        private string nameField;
        
        /// <remarks/>
        public int ID {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public int F_ID {
            get {
                return this.f_IDField;
            }
            set {
                this.f_IDField = value;
            }
        }
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18046")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://metroeguide.net/MEGService")]
    public partial class Ads {
        
        private int object_WidthField;
        
        private int object_HeightField;
        
        private string extraField;
        
        private int client_IDField;
        
        private int ad_GroupField;
        
        private string object_URLField;
        
        private double view_PriceField;
        
        private System.DateTime date_CreatedField;
        
        private string tagsField;
        
        private string headlineField;
        
        private string caption_2Field;
        
        private string uRLField;
        
        private string captionField;
        
        private string link_TextField;
        
        private string nameField;
        
        private int ad_LimitField;
        
        private int ad_ModeField;
        
        private int idField;
        
        /// <remarks/>
        public int Object_Width {
            get {
                return this.object_WidthField;
            }
            set {
                this.object_WidthField = value;
            }
        }
        
        /// <remarks/>
        public int Object_Height {
            get {
                return this.object_HeightField;
            }
            set {
                this.object_HeightField = value;
            }
        }
        
        /// <remarks/>
        public string Extra {
            get {
                return this.extraField;
            }
            set {
                this.extraField = value;
            }
        }
        
        /// <remarks/>
        public int Client_ID {
            get {
                return this.client_IDField;
            }
            set {
                this.client_IDField = value;
            }
        }
        
        /// <remarks/>
        public int Ad_Group {
            get {
                return this.ad_GroupField;
            }
            set {
                this.ad_GroupField = value;
            }
        }
        
        /// <remarks/>
        public string Object_URL {
            get {
                return this.object_URLField;
            }
            set {
                this.object_URLField = value;
            }
        }
        
        /// <remarks/>
        public double View_Price {
            get {
                return this.view_PriceField;
            }
            set {
                this.view_PriceField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime Date_Created {
            get {
                return this.date_CreatedField;
            }
            set {
                this.date_CreatedField = value;
            }
        }
        
        /// <remarks/>
        public string Tags {
            get {
                return this.tagsField;
            }
            set {
                this.tagsField = value;
            }
        }
        
        /// <remarks/>
        public string Headline {
            get {
                return this.headlineField;
            }
            set {
                this.headlineField = value;
            }
        }
        
        /// <remarks/>
        public string Caption_2 {
            get {
                return this.caption_2Field;
            }
            set {
                this.caption_2Field = value;
            }
        }
        
        /// <remarks/>
        public string URL {
            get {
                return this.uRLField;
            }
            set {
                this.uRLField = value;
            }
        }
        
        /// <remarks/>
        public string Caption {
            get {
                return this.captionField;
            }
            set {
                this.captionField = value;
            }
        }
        
        /// <remarks/>
        public string Link_Text {
            get {
                return this.link_TextField;
            }
            set {
                this.link_TextField = value;
            }
        }
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public int Ad_Limit {
            get {
                return this.ad_LimitField;
            }
            set {
                this.ad_LimitField = value;
            }
        }
        
        /// <remarks/>
        public int Ad_Mode {
            get {
                return this.ad_ModeField;
            }
            set {
                this.ad_ModeField = value;
            }
        }
        
        /// <remarks/>
        public int ID {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18046")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://metroeguide.net/MEGService")]
    public partial class AdGroup {
        
        private int fallback_AdGroupField;
        
        private int viewport_SizeField;
        
        private int seedField;
        
        private string adsField;
        
        private string nameField;
        
        private int idField;
        
        /// <remarks/>
        public int Fallback_AdGroup {
            get {
                return this.fallback_AdGroupField;
            }
            set {
                this.fallback_AdGroupField = value;
            }
        }
        
        /// <remarks/>
        public int Viewport_Size {
            get {
                return this.viewport_SizeField;
            }
            set {
                this.viewport_SizeField = value;
            }
        }
        
        /// <remarks/>
        public int Seed {
            get {
                return this.seedField;
            }
            set {
                this.seedField = value;
            }
        }
        
        /// <remarks/>
        public string Ads {
            get {
                return this.adsField;
            }
            set {
                this.adsField = value;
            }
        }
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public int ID {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18046")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://metroeguide.net/MEGService")]
    public partial class Ad_Page_Relationship {
        
        private int client_IDField;
        
        private bool use_Broker_CodeField;
        
        private string broker_CodeField;
        
        private int ad_GroupField;
        
        private int page_IDField;
        
        private int idField;
        
        /// <remarks/>
        public int Client_ID {
            get {
                return this.client_IDField;
            }
            set {
                this.client_IDField = value;
            }
        }
        
        /// <remarks/>
        public bool Use_Broker_Code {
            get {
                return this.use_Broker_CodeField;
            }
            set {
                this.use_Broker_CodeField = value;
            }
        }
        
        /// <remarks/>
        public string Broker_Code {
            get {
                return this.broker_CodeField;
            }
            set {
                this.broker_CodeField = value;
            }
        }
        
        /// <remarks/>
        public int Ad_Group {
            get {
                return this.ad_GroupField;
            }
            set {
                this.ad_GroupField = value;
            }
        }
        
        /// <remarks/>
        public int Page_ID {
            get {
                return this.page_IDField;
            }
            set {
                this.page_IDField = value;
            }
        }
        
        /// <remarks/>
        public int ID {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18046")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://metroeguide.net/MEGService")]
    public partial class Ad_View_Tracker {
        
        private int page_IDField;
        
        private int client_IDField;
        
        private int idField;
        
        private int age_GroupField;
        
        private string zipcodeField;
        
        private System.DateTime dateField;
        
        private bool is_MaleField;
        
        private int ad_IDField;
        
        private string extraField;
        
        /// <remarks/>
        public int Page_ID {
            get {
                return this.page_IDField;
            }
            set {
                this.page_IDField = value;
            }
        }
        
        /// <remarks/>
        public int Client_ID {
            get {
                return this.client_IDField;
            }
            set {
                this.client_IDField = value;
            }
        }
        
        /// <remarks/>
        public int ID {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public int Age_Group {
            get {
                return this.age_GroupField;
            }
            set {
                this.age_GroupField = value;
            }
        }
        
        /// <remarks/>
        public string Zipcode {
            get {
                return this.zipcodeField;
            }
            set {
                this.zipcodeField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime Date {
            get {
                return this.dateField;
            }
            set {
                this.dateField = value;
            }
        }
        
        /// <remarks/>
        public bool Is_Male {
            get {
                return this.is_MaleField;
            }
            set {
                this.is_MaleField = value;
            }
        }
        
        /// <remarks/>
        public int Ad_ID {
            get {
                return this.ad_IDField;
            }
            set {
                this.ad_IDField = value;
            }
        }
        
        /// <remarks/>
        public string Extra {
            get {
                return this.extraField;
            }
            set {
                this.extraField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18046")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://metroeguide.net/MEGService")]
    public partial class Ad_Tracker {
        
        private int client_IDField;
        
        private int idField;
        
        private int refering_PageField;
        
        private int age_GroupField;
        
        private string zipcodeField;
        
        private System.DateTime dateField;
        
        private bool is_MaleField;
        
        private int ad_IDField;
        
        private string extraField;
        
        /// <remarks/>
        public int Client_ID {
            get {
                return this.client_IDField;
            }
            set {
                this.client_IDField = value;
            }
        }
        
        /// <remarks/>
        public int ID {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public int Refering_Page {
            get {
                return this.refering_PageField;
            }
            set {
                this.refering_PageField = value;
            }
        }
        
        /// <remarks/>
        public int Age_Group {
            get {
                return this.age_GroupField;
            }
            set {
                this.age_GroupField = value;
            }
        }
        
        /// <remarks/>
        public string Zipcode {
            get {
                return this.zipcodeField;
            }
            set {
                this.zipcodeField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime Date {
            get {
                return this.dateField;
            }
            set {
                this.dateField = value;
            }
        }
        
        /// <remarks/>
        public bool Is_Male {
            get {
                return this.is_MaleField;
            }
            set {
                this.is_MaleField = value;
            }
        }
        
        /// <remarks/>
        public int Ad_ID {
            get {
                return this.ad_IDField;
            }
            set {
                this.ad_IDField = value;
            }
        }
        
        /// <remarks/>
        public string Extra {
            get {
                return this.extraField;
            }
            set {
                this.extraField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18046")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://metroeguide.net/MEGService")]
    public partial class School_Info {
        
        private int idField;
        
        private int page_IDField;
        
        private string cityField;
        
        private string countyField;
        
        private string school_NameField;
        
        private string school_TypeField;
        
        /// <remarks/>
        public int ID {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public int Page_ID {
            get {
                return this.page_IDField;
            }
            set {
                this.page_IDField = value;
            }
        }
        
        /// <remarks/>
        public string City {
            get {
                return this.cityField;
            }
            set {
                this.cityField = value;
            }
        }
        
        /// <remarks/>
        public string County {
            get {
                return this.countyField;
            }
            set {
                this.countyField = value;
            }
        }
        
        /// <remarks/>
        public string School_Name {
            get {
                return this.school_NameField;
            }
            set {
                this.school_NameField = value;
            }
        }
        
        /// <remarks/>
        public string School_Type {
            get {
                return this.school_TypeField;
            }
            set {
                this.school_TypeField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18046")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://metroeguide.net/MEGService")]
    public partial class Link_Viewer_Logs {
        
        private int idField;
        
        private System.DateTime dateField;
        
        private string usernameField;
        
        private int folder_IDField;
        
        private int page_IDField;
        
        private int link_IDField;
        
        private string eventField;
        
        /// <remarks/>
        public int ID {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime Date {
            get {
                return this.dateField;
            }
            set {
                this.dateField = value;
            }
        }
        
        /// <remarks/>
        public string Username {
            get {
                return this.usernameField;
            }
            set {
                this.usernameField = value;
            }
        }
        
        /// <remarks/>
        public int Folder_ID {
            get {
                return this.folder_IDField;
            }
            set {
                this.folder_IDField = value;
            }
        }
        
        /// <remarks/>
        public int Page_ID {
            get {
                return this.page_IDField;
            }
            set {
                this.page_IDField = value;
            }
        }
        
        /// <remarks/>
        public int Link_ID {
            get {
                return this.link_IDField;
            }
            set {
                this.link_IDField = value;
            }
        }
        
        /// <remarks/>
        public string Event {
            get {
                return this.eventField;
            }
            set {
                this.eventField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18046")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://metroeguide.net/MEGService")]
    public partial class Ads_Model {
        
        private int idField;
        
        private string nameField;
        
        private int client_IDField;
        
        private System.DateTime date_CreatedField;
        
        private int ad_HeightField;
        
        private string htmlField;
        
        private string border_StyleField;
        
        private string descriptionField;
        
        /// <remarks/>
        public int ID {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public int Client_ID {
            get {
                return this.client_IDField;
            }
            set {
                this.client_IDField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime Date_Created {
            get {
                return this.date_CreatedField;
            }
            set {
                this.date_CreatedField = value;
            }
        }
        
        /// <remarks/>
        public int Ad_Height {
            get {
                return this.ad_HeightField;
            }
            set {
                this.ad_HeightField = value;
            }
        }
        
        /// <remarks/>
        public string Html {
            get {
                return this.htmlField;
            }
            set {
                this.htmlField = value;
            }
        }
        
        /// <remarks/>
        public string Border_Style {
            get {
                return this.border_StyleField;
            }
            set {
                this.border_StyleField = value;
            }
        }
        
        /// <remarks/>
        public string Description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18046")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://metroeguide.net/MEGService")]
    public partial class Ad_Assignments {
        
        private int idField;
        
        private int ad_IDField;
        
        private int ad_GroupField;
        
        private int client_IDField;
        
        private string nameField;
        
        private int height_LimitationField;
        
        private double view_PriceField;
        
        private int ad_ModeField;
        
        private int ad_LimitField;
        
        /// <remarks/>
        public int ID {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public int Ad_ID {
            get {
                return this.ad_IDField;
            }
            set {
                this.ad_IDField = value;
            }
        }
        
        /// <remarks/>
        public int Ad_Group {
            get {
                return this.ad_GroupField;
            }
            set {
                this.ad_GroupField = value;
            }
        }
        
        /// <remarks/>
        public int Client_ID {
            get {
                return this.client_IDField;
            }
            set {
                this.client_IDField = value;
            }
        }
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public int Height_Limitation {
            get {
                return this.height_LimitationField;
            }
            set {
                this.height_LimitationField = value;
            }
        }
        
        /// <remarks/>
        public double View_Price {
            get {
                return this.view_PriceField;
            }
            set {
                this.view_PriceField = value;
            }
        }
        
        /// <remarks/>
        public int Ad_Mode {
            get {
                return this.ad_ModeField;
            }
            set {
                this.ad_ModeField = value;
            }
        }
        
        /// <remarks/>
        public int Ad_Limit {
            get {
                return this.ad_LimitField;
            }
            set {
                this.ad_LimitField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18046")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://metroeguide.net/MEGService")]
    public partial class Bad_Links {
        
        private int idField;
        
        private int link_IDField;
        
        private int original_Page_IDField;
        
        private int original_PositionField;
        
        private bool is_SuspendedField;
        
        private bool is_ElevatedField;
        
        private int status_CodeField;
        
        private string messageField;
        
        private string commentField;
        
        private string screen_Shot_URLField;
        
        private System.DateTime date_ReportedField;
        
        /// <remarks/>
        public int ID {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public int Link_ID {
            get {
                return this.link_IDField;
            }
            set {
                this.link_IDField = value;
            }
        }
        
        /// <remarks/>
        public int Original_Page_ID {
            get {
                return this.original_Page_IDField;
            }
            set {
                this.original_Page_IDField = value;
            }
        }
        
        /// <remarks/>
        public int Original_Position {
            get {
                return this.original_PositionField;
            }
            set {
                this.original_PositionField = value;
            }
        }
        
        /// <remarks/>
        public bool Is_Suspended {
            get {
                return this.is_SuspendedField;
            }
            set {
                this.is_SuspendedField = value;
            }
        }
        
        /// <remarks/>
        public bool Is_Elevated {
            get {
                return this.is_ElevatedField;
            }
            set {
                this.is_ElevatedField = value;
            }
        }
        
        /// <remarks/>
        public int Status_Code {
            get {
                return this.status_CodeField;
            }
            set {
                this.status_CodeField = value;
            }
        }
        
        /// <remarks/>
        public string Message {
            get {
                return this.messageField;
            }
            set {
                this.messageField = value;
            }
        }
        
        /// <remarks/>
        public string Comment {
            get {
                return this.commentField;
            }
            set {
                this.commentField = value;
            }
        }
        
        /// <remarks/>
        public string Screen_Shot_URL {
            get {
                return this.screen_Shot_URLField;
            }
            set {
                this.screen_Shot_URLField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime Date_Reported {
            get {
                return this.date_ReportedField;
            }
            set {
                this.date_ReportedField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18046")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://metroeguide.net/MEGService")]
    public partial class Stack {
        
        private int idField;
        
        private string widgetsField;
        
        private string nameField;
        
        private string display_NameField;
        
        private int heightField;
        
        /// <remarks/>
        public int ID {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public string Widgets {
            get {
                return this.widgetsField;
            }
            set {
                this.widgetsField = value;
            }
        }
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public string Display_Name {
            get {
                return this.display_NameField;
            }
            set {
                this.display_NameField = value;
            }
        }
        
        /// <remarks/>
        public int Height {
            get {
                return this.heightField;
            }
            set {
                this.heightField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18046")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://metroeguide.net/MEGService")]
    public partial class SearchResult {
        
        private int link_IDField;
        
        private int page_IDField;
        
        private string link_TitleField;
        
        private string link_URLField;
        
        private string page_TitleField;
        
        private int folder_IDField;
        
        private bool isLinkField;
        
        /// <remarks/>
        public int Link_ID {
            get {
                return this.link_IDField;
            }
            set {
                this.link_IDField = value;
            }
        }
        
        /// <remarks/>
        public int Page_ID {
            get {
                return this.page_IDField;
            }
            set {
                this.page_IDField = value;
            }
        }
        
        /// <remarks/>
        public string Link_Title {
            get {
                return this.link_TitleField;
            }
            set {
                this.link_TitleField = value;
            }
        }
        
        /// <remarks/>
        public string Link_URL {
            get {
                return this.link_URLField;
            }
            set {
                this.link_URLField = value;
            }
        }
        
        /// <remarks/>
        public string Page_Title {
            get {
                return this.page_TitleField;
            }
            set {
                this.page_TitleField = value;
            }
        }
        
        /// <remarks/>
        public int Folder_ID {
            get {
                return this.folder_IDField;
            }
            set {
                this.folder_IDField = value;
            }
        }
        
        /// <remarks/>
        public bool IsLink {
            get {
                return this.isLinkField;
            }
            set {
                this.isLinkField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18046")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://metroeguide.net/MEGService")]
    public partial class SubLicense {
        
        private string text_Background_ColorField;
        
        private bool center_Graphic_Opens_New_WindowField;
        
        private int idField;
        
        private int clientIDField;
        
        private string passwordField;
        
        private string target_URLField;
        
        private string center_Graphic_URLField;
        
        private string graphic_Overlay_URLField;
        
        private string text_OverlayField;
        
        private string linkField;
        
        private string nameField;
        
        private int font_SizeField;
        
        private string font_ColorField;
        
        /// <remarks/>
        public string Text_Background_Color {
            get {
                return this.text_Background_ColorField;
            }
            set {
                this.text_Background_ColorField = value;
            }
        }
        
        /// <remarks/>
        public bool Center_Graphic_Opens_New_Window {
            get {
                return this.center_Graphic_Opens_New_WindowField;
            }
            set {
                this.center_Graphic_Opens_New_WindowField = value;
            }
        }
        
        /// <remarks/>
        public int ID {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public int ClientID {
            get {
                return this.clientIDField;
            }
            set {
                this.clientIDField = value;
            }
        }
        
        /// <remarks/>
        public string Password {
            get {
                return this.passwordField;
            }
            set {
                this.passwordField = value;
            }
        }
        
        /// <remarks/>
        public string Target_URL {
            get {
                return this.target_URLField;
            }
            set {
                this.target_URLField = value;
            }
        }
        
        /// <remarks/>
        public string Center_Graphic_URL {
            get {
                return this.center_Graphic_URLField;
            }
            set {
                this.center_Graphic_URLField = value;
            }
        }
        
        /// <remarks/>
        public string Graphic_Overlay_URL {
            get {
                return this.graphic_Overlay_URLField;
            }
            set {
                this.graphic_Overlay_URLField = value;
            }
        }
        
        /// <remarks/>
        public string Text_Overlay {
            get {
                return this.text_OverlayField;
            }
            set {
                this.text_OverlayField = value;
            }
        }
        
        /// <remarks/>
        public string Link {
            get {
                return this.linkField;
            }
            set {
                this.linkField = value;
            }
        }
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public int Font_Size {
            get {
                return this.font_SizeField;
            }
            set {
                this.font_SizeField = value;
            }
        }
        
        /// <remarks/>
        public string Font_Color {
            get {
                return this.font_ColorField;
            }
            set {
                this.font_ColorField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18046")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://metroeguide.net/MEGService")]
    public partial class EndUser {
        
        private int times_RegisteredField;
        
        private string nameField;
        
        private string emailField;
        
        private System.DateTime dateCreatedField;
        
        private int timesUsedField;
        
        private System.DateTime lastDateAccessedField;
        
        private string targetURLField;
        
        private string zipcodeField;
        
        private string ageGroupField;
        
        private bool optInEmailField;
        
        private string registrationIDUsedField;
        
        private int classificationIDField;
        
        private int clientIDField;
        
        private int idField;
        
        /// <remarks/>
        public int Times_Registered {
            get {
                return this.times_RegisteredField;
            }
            set {
                this.times_RegisteredField = value;
            }
        }
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public string Email {
            get {
                return this.emailField;
            }
            set {
                this.emailField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime DateCreated {
            get {
                return this.dateCreatedField;
            }
            set {
                this.dateCreatedField = value;
            }
        }
        
        /// <remarks/>
        public int TimesUsed {
            get {
                return this.timesUsedField;
            }
            set {
                this.timesUsedField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime LastDateAccessed {
            get {
                return this.lastDateAccessedField;
            }
            set {
                this.lastDateAccessedField = value;
            }
        }
        
        /// <remarks/>
        public string TargetURL {
            get {
                return this.targetURLField;
            }
            set {
                this.targetURLField = value;
            }
        }
        
        /// <remarks/>
        public string Zipcode {
            get {
                return this.zipcodeField;
            }
            set {
                this.zipcodeField = value;
            }
        }
        
        /// <remarks/>
        public string AgeGroup {
            get {
                return this.ageGroupField;
            }
            set {
                this.ageGroupField = value;
            }
        }
        
        /// <remarks/>
        public bool OptInEmail {
            get {
                return this.optInEmailField;
            }
            set {
                this.optInEmailField = value;
            }
        }
        
        /// <remarks/>
        public string RegistrationIDUsed {
            get {
                return this.registrationIDUsedField;
            }
            set {
                this.registrationIDUsedField = value;
            }
        }
        
        /// <remarks/>
        public int ClassificationID {
            get {
                return this.classificationIDField;
            }
            set {
                this.classificationIDField = value;
            }
        }
        
        /// <remarks/>
        public int ClientID {
            get {
                return this.clientIDField;
            }
            set {
                this.clientIDField = value;
            }
        }
        
        /// <remarks/>
        public int ID {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18046")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://metroeguide.net/MEGService")]
    public partial class FavLink {
        
        private int idField;
        
        private string titleField;
        
        private string uRLField;
        
        private bool is_LinkField;
        
        private string targetField;
        
        private int end_User_IDField;
        
        private string display_TitleField;
        
        private int positionField;
        
        /// <remarks/>
        public int ID {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public string Title {
            get {
                return this.titleField;
            }
            set {
                this.titleField = value;
            }
        }
        
        /// <remarks/>
        public string URL {
            get {
                return this.uRLField;
            }
            set {
                this.uRLField = value;
            }
        }
        
        /// <remarks/>
        public bool Is_Link {
            get {
                return this.is_LinkField;
            }
            set {
                this.is_LinkField = value;
            }
        }
        
        /// <remarks/>
        public string Target {
            get {
                return this.targetField;
            }
            set {
                this.targetField = value;
            }
        }
        
        /// <remarks/>
        public int End_User_ID {
            get {
                return this.end_User_IDField;
            }
            set {
                this.end_User_IDField = value;
            }
        }
        
        /// <remarks/>
        public string Display_Title {
            get {
                return this.display_TitleField;
            }
            set {
                this.display_TitleField = value;
            }
        }
        
        /// <remarks/>
        public int Position {
            get {
                return this.positionField;
            }
            set {
                this.positionField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18046")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://metroeguide.net/MEGService")]
    public partial class Folder {
        
        private Folder[] childrenField;
        
        private int parent_Folder_IDField;
        
        private string nameField;
        
        private int idField;
        
        /// <remarks/>
        public Folder[] Children {
            get {
                return this.childrenField;
            }
            set {
                this.childrenField = value;
            }
        }
        
        /// <remarks/>
        public int Parent_Folder_ID {
            get {
                return this.parent_Folder_IDField;
            }
            set {
                this.parent_Folder_IDField = value;
            }
        }
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public int ID {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18046")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://metroeguide.net/MEGService")]
    public partial class Client {
        
        private string analytics_KeyField;
        
        private int idField;
        
        private string nameField;
        
        private string userIDField;
        
        private string passwordField;
        
        private string websiteField;
        
        private string displayNameField;
        
        private string emailField;
        
        private string cSSField;
        
        /// <remarks/>
        public string Analytics_Key {
            get {
                return this.analytics_KeyField;
            }
            set {
                this.analytics_KeyField = value;
            }
        }
        
        /// <remarks/>
        public int ID {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public string UserID {
            get {
                return this.userIDField;
            }
            set {
                this.userIDField = value;
            }
        }
        
        /// <remarks/>
        public string Password {
            get {
                return this.passwordField;
            }
            set {
                this.passwordField = value;
            }
        }
        
        /// <remarks/>
        public string Website {
            get {
                return this.websiteField;
            }
            set {
                this.websiteField = value;
            }
        }
        
        /// <remarks/>
        public string DisplayName {
            get {
                return this.displayNameField;
            }
            set {
                this.displayNameField = value;
            }
        }
        
        /// <remarks/>
        public string Email {
            get {
                return this.emailField;
            }
            set {
                this.emailField = value;
            }
        }
        
        /// <remarks/>
        public string CSS {
            get {
                return this.cSSField;
            }
            set {
                this.cSSField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18046")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://metroeguide.net/MEGService")]
    public partial class Resource_File {
        
        private int idField;
        
        private string nameField;
        
        private string uRLField;
        
        private string mD5Field;
        
        /// <remarks/>
        public int ID {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public string URL {
            get {
                return this.uRLField;
            }
            set {
                this.uRLField = value;
            }
        }
        
        /// <remarks/>
        public string MD5 {
            get {
                return this.mD5Field;
            }
            set {
                this.mD5Field = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18046")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://metroeguide.net/MEGService")]
    public partial class MEG_v3 {
        
        private int idField;
        
        private int clientIDField;
        
        private int buttonCountField;
        
        private int buttonLinkPageIDField;
        
        private int buttonBorderThicknessField;
        
        private string buttonBorderColorField;
        
        private string buttonTitleFontColorField;
        
        private string buttonTitleFontFamilyField;
        
        private string buttonTitleFontWeightField;
        
        private string buttonBackgroundColorField;
        
        private string searchBarBackgroundColorField;
        
        private string topLeftGraphicURLField;
        
        private string weatherZipcodeField;
        
        private string indexURLField;
        
        private string searchFoldersField;
        
        private string helpURLField;
        
        private string customGoogleSearchField;
        
        private string mainTitleField;
        
        private string mEGGrahicURLField;
        
        private string centerGraphicURLField;
        
        private int copyrightFontSizeField;
        
        private string copyrightFontColorField;
        
        private string copyrightFontFamilyField;
        
        private string realtorGraphicURLField;
        
        private string copyrightTextField;
        
        private string topLeftGraphicTargetURLField;
        
        private string centerGraphicTargetURLField;
        
        private string pageBackgroundColorField;
        
        private string centerGraphicBorderColorField;
        
        private int centerGraphicBorderThicknessField;
        
        private string buttonMouseOverBGColorField;
        
        private string buttonMouseOverBorderColorField;
        
        private string buttonMouseOverFontColorField;
        
        private string mainTitleFontFamilyField;
        
        private int mainTitleFontSizeField;
        
        private string mainTitleFontColorField;
        
        private string companyGraphicURLField;
        
        private string homeSearchTextField;
        
        private string homeSearchURLField;
        
        private System.Nullable<int> mobile_Stack_IDField;
        
        private string sEOMetaDescField;
        
        private string sEOMetaKeysField;
        
        /// <remarks/>
        public int ID {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public int ClientID {
            get {
                return this.clientIDField;
            }
            set {
                this.clientIDField = value;
            }
        }
        
        /// <remarks/>
        public int ButtonCount {
            get {
                return this.buttonCountField;
            }
            set {
                this.buttonCountField = value;
            }
        }
        
        /// <remarks/>
        public int ButtonLinkPageID {
            get {
                return this.buttonLinkPageIDField;
            }
            set {
                this.buttonLinkPageIDField = value;
            }
        }
        
        /// <remarks/>
        public int ButtonBorderThickness {
            get {
                return this.buttonBorderThicknessField;
            }
            set {
                this.buttonBorderThicknessField = value;
            }
        }
        
        /// <remarks/>
        public string ButtonBorderColor {
            get {
                return this.buttonBorderColorField;
            }
            set {
                this.buttonBorderColorField = value;
            }
        }
        
        /// <remarks/>
        public string ButtonTitleFontColor {
            get {
                return this.buttonTitleFontColorField;
            }
            set {
                this.buttonTitleFontColorField = value;
            }
        }
        
        /// <remarks/>
        public string ButtonTitleFontFamily {
            get {
                return this.buttonTitleFontFamilyField;
            }
            set {
                this.buttonTitleFontFamilyField = value;
            }
        }
        
        /// <remarks/>
        public string ButtonTitleFontWeight {
            get {
                return this.buttonTitleFontWeightField;
            }
            set {
                this.buttonTitleFontWeightField = value;
            }
        }
        
        /// <remarks/>
        public string ButtonBackgroundColor {
            get {
                return this.buttonBackgroundColorField;
            }
            set {
                this.buttonBackgroundColorField = value;
            }
        }
        
        /// <remarks/>
        public string SearchBarBackgroundColor {
            get {
                return this.searchBarBackgroundColorField;
            }
            set {
                this.searchBarBackgroundColorField = value;
            }
        }
        
        /// <remarks/>
        public string TopLeftGraphicURL {
            get {
                return this.topLeftGraphicURLField;
            }
            set {
                this.topLeftGraphicURLField = value;
            }
        }
        
        /// <remarks/>
        public string WeatherZipcode {
            get {
                return this.weatherZipcodeField;
            }
            set {
                this.weatherZipcodeField = value;
            }
        }
        
        /// <remarks/>
        public string IndexURL {
            get {
                return this.indexURLField;
            }
            set {
                this.indexURLField = value;
            }
        }
        
        /// <remarks/>
        public string SearchFolders {
            get {
                return this.searchFoldersField;
            }
            set {
                this.searchFoldersField = value;
            }
        }
        
        /// <remarks/>
        public string HelpURL {
            get {
                return this.helpURLField;
            }
            set {
                this.helpURLField = value;
            }
        }
        
        /// <remarks/>
        public string CustomGoogleSearch {
            get {
                return this.customGoogleSearchField;
            }
            set {
                this.customGoogleSearchField = value;
            }
        }
        
        /// <remarks/>
        public string MainTitle {
            get {
                return this.mainTitleField;
            }
            set {
                this.mainTitleField = value;
            }
        }
        
        /// <remarks/>
        public string MEGGrahicURL {
            get {
                return this.mEGGrahicURLField;
            }
            set {
                this.mEGGrahicURLField = value;
            }
        }
        
        /// <remarks/>
        public string CenterGraphicURL {
            get {
                return this.centerGraphicURLField;
            }
            set {
                this.centerGraphicURLField = value;
            }
        }
        
        /// <remarks/>
        public int CopyrightFontSize {
            get {
                return this.copyrightFontSizeField;
            }
            set {
                this.copyrightFontSizeField = value;
            }
        }
        
        /// <remarks/>
        public string CopyrightFontColor {
            get {
                return this.copyrightFontColorField;
            }
            set {
                this.copyrightFontColorField = value;
            }
        }
        
        /// <remarks/>
        public string CopyrightFontFamily {
            get {
                return this.copyrightFontFamilyField;
            }
            set {
                this.copyrightFontFamilyField = value;
            }
        }
        
        /// <remarks/>
        public string RealtorGraphicURL {
            get {
                return this.realtorGraphicURLField;
            }
            set {
                this.realtorGraphicURLField = value;
            }
        }
        
        /// <remarks/>
        public string CopyrightText {
            get {
                return this.copyrightTextField;
            }
            set {
                this.copyrightTextField = value;
            }
        }
        
        /// <remarks/>
        public string TopLeftGraphicTargetURL {
            get {
                return this.topLeftGraphicTargetURLField;
            }
            set {
                this.topLeftGraphicTargetURLField = value;
            }
        }
        
        /// <remarks/>
        public string CenterGraphicTargetURL {
            get {
                return this.centerGraphicTargetURLField;
            }
            set {
                this.centerGraphicTargetURLField = value;
            }
        }
        
        /// <remarks/>
        public string PageBackgroundColor {
            get {
                return this.pageBackgroundColorField;
            }
            set {
                this.pageBackgroundColorField = value;
            }
        }
        
        /// <remarks/>
        public string CenterGraphicBorderColor {
            get {
                return this.centerGraphicBorderColorField;
            }
            set {
                this.centerGraphicBorderColorField = value;
            }
        }
        
        /// <remarks/>
        public int CenterGraphicBorderThickness {
            get {
                return this.centerGraphicBorderThicknessField;
            }
            set {
                this.centerGraphicBorderThicknessField = value;
            }
        }
        
        /// <remarks/>
        public string ButtonMouseOverBGColor {
            get {
                return this.buttonMouseOverBGColorField;
            }
            set {
                this.buttonMouseOverBGColorField = value;
            }
        }
        
        /// <remarks/>
        public string ButtonMouseOverBorderColor {
            get {
                return this.buttonMouseOverBorderColorField;
            }
            set {
                this.buttonMouseOverBorderColorField = value;
            }
        }
        
        /// <remarks/>
        public string ButtonMouseOverFontColor {
            get {
                return this.buttonMouseOverFontColorField;
            }
            set {
                this.buttonMouseOverFontColorField = value;
            }
        }
        
        /// <remarks/>
        public string MainTitleFontFamily {
            get {
                return this.mainTitleFontFamilyField;
            }
            set {
                this.mainTitleFontFamilyField = value;
            }
        }
        
        /// <remarks/>
        public int MainTitleFontSize {
            get {
                return this.mainTitleFontSizeField;
            }
            set {
                this.mainTitleFontSizeField = value;
            }
        }
        
        /// <remarks/>
        public string MainTitleFontColor {
            get {
                return this.mainTitleFontColorField;
            }
            set {
                this.mainTitleFontColorField = value;
            }
        }
        
        /// <remarks/>
        public string CompanyGraphicURL {
            get {
                return this.companyGraphicURLField;
            }
            set {
                this.companyGraphicURLField = value;
            }
        }
        
        /// <remarks/>
        public string HomeSearchText {
            get {
                return this.homeSearchTextField;
            }
            set {
                this.homeSearchTextField = value;
            }
        }
        
        /// <remarks/>
        public string HomeSearchURL {
            get {
                return this.homeSearchURLField;
            }
            set {
                this.homeSearchURLField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> Mobile_Stack_ID {
            get {
                return this.mobile_Stack_IDField;
            }
            set {
                this.mobile_Stack_IDField = value;
            }
        }
        
        /// <remarks/>
        public string SEOMetaDesc {
            get {
                return this.sEOMetaDescField;
            }
            set {
                this.sEOMetaDescField = value;
            }
        }
        
        /// <remarks/>
        public string SEOMetaKeys {
            get {
                return this.sEOMetaKeysField;
            }
            set {
                this.sEOMetaKeysField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18046")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://metroeguide.net/MEGService")]
    public partial class Send_To_Friend {
        
        private int idField;
        
        private int client_IDField;
        
        private string ccField;
        
        private string subjectField;
        
        private string body_TextField;
        
        private string body_URLField;
        
        private string body_RegIDField;
        
        private string body_SignatureField;
        
        /// <remarks/>
        public int ID {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public int Client_ID {
            get {
                return this.client_IDField;
            }
            set {
                this.client_IDField = value;
            }
        }
        
        /// <remarks/>
        public string CC {
            get {
                return this.ccField;
            }
            set {
                this.ccField = value;
            }
        }
        
        /// <remarks/>
        public string Subject {
            get {
                return this.subjectField;
            }
            set {
                this.subjectField = value;
            }
        }
        
        /// <remarks/>
        public string Body_Text {
            get {
                return this.body_TextField;
            }
            set {
                this.body_TextField = value;
            }
        }
        
        /// <remarks/>
        public string Body_URL {
            get {
                return this.body_URLField;
            }
            set {
                this.body_URLField = value;
            }
        }
        
        /// <remarks/>
        public string Body_RegID {
            get {
                return this.body_RegIDField;
            }
            set {
                this.body_RegIDField = value;
            }
        }
        
        /// <remarks/>
        public string Body_Signature {
            get {
                return this.body_SignatureField;
            }
            set {
                this.body_SignatureField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18046")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://metroeguide.net/MEGService")]
    public partial class Daily_EZ {
        
        private int idField;
        
        private int client_IDField;
        
        private string top_Left_Image_URLField;
        
        private string top_Right_Image_URLField;
        
        private string bar_Image_URLField;
        
        private string search_Bar_ColorField;
        
        private string main_Title_Font_ColorField;
        
        private string main_Title_Font_FamilyField;
        
        private int main_Title_Font_SizeField;
        
        private string main_Menu_Font_ColorField;
        
        private string main_Menu_Font_FamilyField;
        
        private int main_Menu_Font_SizeField;
        
        private string left_Middle_Display_Area_HtmlField;
        
        private int link_Page_ID_1Field;
        
        private int link_Page_ID_2Field;
        
        private string user_Friendly_URLField;
        
        private int left_Index_IDField;
        
        private string main_TitleField;
        
        private string top_Left_Image_HrefField;
        
        private string top_Right_Image_HrefField;
        
        private int directory_IDField;
        
        private string custom_Google_Search_KeyField;
        
        private string search_FoldersField;
        
        private bool ad_Rotator_EnabledField;
        
        private int ad_SeedField;
        
        private int breaking_News_IDField;
        
        private string breaking_News_RSS_FeedField;
        
        private string sitemap_URLField;
        
        private string breaking_News_TitleField;
        
        private string sponsor_TitleField;
        
        private string analytics_CodeField;
        
        private string main_Page_SEO_TextField;
        
        private string search_Ad_GroupsField;
        
        private int default_Left_StackField;
        
        private int default_Right_StackField;
        
        private string top_Left_Image_AltField;
        
        private string top_Right_Image_AltField;
        
        private System.Nullable<int> mobile_Stack_IDField;
        
        private System.Nullable<int> default_Middle_StackField;
        
        /// <remarks/>
        public int ID {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public int Client_ID {
            get {
                return this.client_IDField;
            }
            set {
                this.client_IDField = value;
            }
        }
        
        /// <remarks/>
        public string Top_Left_Image_URL {
            get {
                return this.top_Left_Image_URLField;
            }
            set {
                this.top_Left_Image_URLField = value;
            }
        }
        
        /// <remarks/>
        public string Top_Right_Image_URL {
            get {
                return this.top_Right_Image_URLField;
            }
            set {
                this.top_Right_Image_URLField = value;
            }
        }
        
        /// <remarks/>
        public string Bar_Image_URL {
            get {
                return this.bar_Image_URLField;
            }
            set {
                this.bar_Image_URLField = value;
            }
        }
        
        /// <remarks/>
        public string Search_Bar_Color {
            get {
                return this.search_Bar_ColorField;
            }
            set {
                this.search_Bar_ColorField = value;
            }
        }
        
        /// <remarks/>
        public string Main_Title_Font_Color {
            get {
                return this.main_Title_Font_ColorField;
            }
            set {
                this.main_Title_Font_ColorField = value;
            }
        }
        
        /// <remarks/>
        public string Main_Title_Font_Family {
            get {
                return this.main_Title_Font_FamilyField;
            }
            set {
                this.main_Title_Font_FamilyField = value;
            }
        }
        
        /// <remarks/>
        public int Main_Title_Font_Size {
            get {
                return this.main_Title_Font_SizeField;
            }
            set {
                this.main_Title_Font_SizeField = value;
            }
        }
        
        /// <remarks/>
        public string Main_Menu_Font_Color {
            get {
                return this.main_Menu_Font_ColorField;
            }
            set {
                this.main_Menu_Font_ColorField = value;
            }
        }
        
        /// <remarks/>
        public string Main_Menu_Font_Family {
            get {
                return this.main_Menu_Font_FamilyField;
            }
            set {
                this.main_Menu_Font_FamilyField = value;
            }
        }
        
        /// <remarks/>
        public int Main_Menu_Font_Size {
            get {
                return this.main_Menu_Font_SizeField;
            }
            set {
                this.main_Menu_Font_SizeField = value;
            }
        }
        
        /// <remarks/>
        public string Left_Middle_Display_Area_Html {
            get {
                return this.left_Middle_Display_Area_HtmlField;
            }
            set {
                this.left_Middle_Display_Area_HtmlField = value;
            }
        }
        
        /// <remarks/>
        public int Link_Page_ID_1 {
            get {
                return this.link_Page_ID_1Field;
            }
            set {
                this.link_Page_ID_1Field = value;
            }
        }
        
        /// <remarks/>
        public int Link_Page_ID_2 {
            get {
                return this.link_Page_ID_2Field;
            }
            set {
                this.link_Page_ID_2Field = value;
            }
        }
        
        /// <remarks/>
        public string User_Friendly_URL {
            get {
                return this.user_Friendly_URLField;
            }
            set {
                this.user_Friendly_URLField = value;
            }
        }
        
        /// <remarks/>
        public int Left_Index_ID {
            get {
                return this.left_Index_IDField;
            }
            set {
                this.left_Index_IDField = value;
            }
        }
        
        /// <remarks/>
        public string Main_Title {
            get {
                return this.main_TitleField;
            }
            set {
                this.main_TitleField = value;
            }
        }
        
        /// <remarks/>
        public string Top_Left_Image_Href {
            get {
                return this.top_Left_Image_HrefField;
            }
            set {
                this.top_Left_Image_HrefField = value;
            }
        }
        
        /// <remarks/>
        public string Top_Right_Image_Href {
            get {
                return this.top_Right_Image_HrefField;
            }
            set {
                this.top_Right_Image_HrefField = value;
            }
        }
        
        /// <remarks/>
        public int Directory_ID {
            get {
                return this.directory_IDField;
            }
            set {
                this.directory_IDField = value;
            }
        }
        
        /// <remarks/>
        public string Custom_Google_Search_Key {
            get {
                return this.custom_Google_Search_KeyField;
            }
            set {
                this.custom_Google_Search_KeyField = value;
            }
        }
        
        /// <remarks/>
        public string Search_Folders {
            get {
                return this.search_FoldersField;
            }
            set {
                this.search_FoldersField = value;
            }
        }
        
        /// <remarks/>
        public bool Ad_Rotator_Enabled {
            get {
                return this.ad_Rotator_EnabledField;
            }
            set {
                this.ad_Rotator_EnabledField = value;
            }
        }
        
        /// <remarks/>
        public int Ad_Seed {
            get {
                return this.ad_SeedField;
            }
            set {
                this.ad_SeedField = value;
            }
        }
        
        /// <remarks/>
        public int Breaking_News_ID {
            get {
                return this.breaking_News_IDField;
            }
            set {
                this.breaking_News_IDField = value;
            }
        }
        
        /// <remarks/>
        public string Breaking_News_RSS_Feed {
            get {
                return this.breaking_News_RSS_FeedField;
            }
            set {
                this.breaking_News_RSS_FeedField = value;
            }
        }
        
        /// <remarks/>
        public string Sitemap_URL {
            get {
                return this.sitemap_URLField;
            }
            set {
                this.sitemap_URLField = value;
            }
        }
        
        /// <remarks/>
        public string Breaking_News_Title {
            get {
                return this.breaking_News_TitleField;
            }
            set {
                this.breaking_News_TitleField = value;
            }
        }
        
        /// <remarks/>
        public string Sponsor_Title {
            get {
                return this.sponsor_TitleField;
            }
            set {
                this.sponsor_TitleField = value;
            }
        }
        
        /// <remarks/>
        public string Analytics_Code {
            get {
                return this.analytics_CodeField;
            }
            set {
                this.analytics_CodeField = value;
            }
        }
        
        /// <remarks/>
        public string Main_Page_SEO_Text {
            get {
                return this.main_Page_SEO_TextField;
            }
            set {
                this.main_Page_SEO_TextField = value;
            }
        }
        
        /// <remarks/>
        public string Search_Ad_Groups {
            get {
                return this.search_Ad_GroupsField;
            }
            set {
                this.search_Ad_GroupsField = value;
            }
        }
        
        /// <remarks/>
        public int Default_Left_Stack {
            get {
                return this.default_Left_StackField;
            }
            set {
                this.default_Left_StackField = value;
            }
        }
        
        /// <remarks/>
        public int Default_Right_Stack {
            get {
                return this.default_Right_StackField;
            }
            set {
                this.default_Right_StackField = value;
            }
        }
        
        /// <remarks/>
        public string Top_Left_Image_Alt {
            get {
                return this.top_Left_Image_AltField;
            }
            set {
                this.top_Left_Image_AltField = value;
            }
        }
        
        /// <remarks/>
        public string Top_Right_Image_Alt {
            get {
                return this.top_Right_Image_AltField;
            }
            set {
                this.top_Right_Image_AltField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> Mobile_Stack_ID {
            get {
                return this.mobile_Stack_IDField;
            }
            set {
                this.mobile_Stack_IDField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> Default_Middle_Stack {
            get {
                return this.default_Middle_StackField;
            }
            set {
                this.default_Middle_StackField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18046")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://metroeguide.net/MEGService")]
    public partial class Page_Views {
        
        private int idField;
        
        private int client_IDField;
        
        private int page_IDField;
        
        private System.DateTime dateField;
        
        private bool is_MaleField;
        
        private int age_GroupField;
        
        private string zipField;
        
        /// <remarks/>
        public int ID {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public int Client_ID {
            get {
                return this.client_IDField;
            }
            set {
                this.client_IDField = value;
            }
        }
        
        /// <remarks/>
        public int Page_ID {
            get {
                return this.page_IDField;
            }
            set {
                this.page_IDField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime Date {
            get {
                return this.dateField;
            }
            set {
                this.dateField = value;
            }
        }
        
        /// <remarks/>
        public bool Is_Male {
            get {
                return this.is_MaleField;
            }
            set {
                this.is_MaleField = value;
            }
        }
        
        /// <remarks/>
        public int Age_Group {
            get {
                return this.age_GroupField;
            }
            set {
                this.age_GroupField = value;
            }
        }
        
        /// <remarks/>
        public string Zip {
            get {
                return this.zipField;
            }
            set {
                this.zipField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18046")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://metroeguide.net/MEGService")]
    public partial class MEG_Contact {
        
        private int idField;
        
        private int client_IDField;
        
        private string nameField;
        
        private string address_1Field;
        
        private string address_2Field;
        
        private string cityField;
        
        private string stateField;
        
        private string zipField;
        
        private string phone1Field;
        
        private string phone2Field;
        
        private string phone3Field;
        
        private string email_AddressField;
        
        /// <remarks/>
        public int ID {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public int Client_ID {
            get {
                return this.client_IDField;
            }
            set {
                this.client_IDField = value;
            }
        }
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public string Address_1 {
            get {
                return this.address_1Field;
            }
            set {
                this.address_1Field = value;
            }
        }
        
        /// <remarks/>
        public string Address_2 {
            get {
                return this.address_2Field;
            }
            set {
                this.address_2Field = value;
            }
        }
        
        /// <remarks/>
        public string City {
            get {
                return this.cityField;
            }
            set {
                this.cityField = value;
            }
        }
        
        /// <remarks/>
        public string State {
            get {
                return this.stateField;
            }
            set {
                this.stateField = value;
            }
        }
        
        /// <remarks/>
        public string Zip {
            get {
                return this.zipField;
            }
            set {
                this.zipField = value;
            }
        }
        
        /// <remarks/>
        public string Phone1 {
            get {
                return this.phone1Field;
            }
            set {
                this.phone1Field = value;
            }
        }
        
        /// <remarks/>
        public string Phone2 {
            get {
                return this.phone2Field;
            }
            set {
                this.phone2Field = value;
            }
        }
        
        /// <remarks/>
        public string Phone3 {
            get {
                return this.phone3Field;
            }
            set {
                this.phone3Field = value;
            }
        }
        
        /// <remarks/>
        public string Email_Address {
            get {
                return this.email_AddressField;
            }
            set {
                this.email_AddressField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18046")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://metroeguide.net/MEGService")]
    public partial class MEG_SubLicense {
        
        private int idField;
        
        private int client_IDField;
        
        private string button1_TextField;
        
        private string button1_URLField;
        
        private string button1_TargetField;
        
        private string button2_TextField;
        
        private string button2_URLField;
        
        private string button2_TargetField;
        
        private string button3_TextField;
        
        private string button3_URLField;
        
        private string button3_TargetField;
        
        /// <remarks/>
        public int ID {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public int Client_ID {
            get {
                return this.client_IDField;
            }
            set {
                this.client_IDField = value;
            }
        }
        
        /// <remarks/>
        public string Button1_Text {
            get {
                return this.button1_TextField;
            }
            set {
                this.button1_TextField = value;
            }
        }
        
        /// <remarks/>
        public string Button1_URL {
            get {
                return this.button1_URLField;
            }
            set {
                this.button1_URLField = value;
            }
        }
        
        /// <remarks/>
        public string Button1_Target {
            get {
                return this.button1_TargetField;
            }
            set {
                this.button1_TargetField = value;
            }
        }
        
        /// <remarks/>
        public string Button2_Text {
            get {
                return this.button2_TextField;
            }
            set {
                this.button2_TextField = value;
            }
        }
        
        /// <remarks/>
        public string Button2_URL {
            get {
                return this.button2_URLField;
            }
            set {
                this.button2_URLField = value;
            }
        }
        
        /// <remarks/>
        public string Button2_Target {
            get {
                return this.button2_TargetField;
            }
            set {
                this.button2_TargetField = value;
            }
        }
        
        /// <remarks/>
        public string Button3_Text {
            get {
                return this.button3_TextField;
            }
            set {
                this.button3_TextField = value;
            }
        }
        
        /// <remarks/>
        public string Button3_URL {
            get {
                return this.button3_URLField;
            }
            set {
                this.button3_URLField = value;
            }
        }
        
        /// <remarks/>
        public string Button3_Target {
            get {
                return this.button3_TargetField;
            }
            set {
                this.button3_TargetField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18046")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://metroeguide.net/MEGService")]
    public partial class Available_Properties_Page {
        
        private string image_List_TitleField;
        
        private int propertyID10Field;
        
        private int propertyID9Field;
        
        private int propertyID8Field;
        
        private int propertyID7Field;
        
        private int propertyID6Field;
        
        private int propertyID5Field;
        
        private int propertyID4Field;
        
        private int propertyID3Field;
        
        private int propertyID2Field;
        
        private int propertyID1Field;
        
        private int link_Page_IDField;
        
        private string titleField;
        
        private int client_IDField;
        
        private int idField;
        
        /// <remarks/>
        public string Image_List_Title {
            get {
                return this.image_List_TitleField;
            }
            set {
                this.image_List_TitleField = value;
            }
        }
        
        /// <remarks/>
        public int PropertyID10 {
            get {
                return this.propertyID10Field;
            }
            set {
                this.propertyID10Field = value;
            }
        }
        
        /// <remarks/>
        public int PropertyID9 {
            get {
                return this.propertyID9Field;
            }
            set {
                this.propertyID9Field = value;
            }
        }
        
        /// <remarks/>
        public int PropertyID8 {
            get {
                return this.propertyID8Field;
            }
            set {
                this.propertyID8Field = value;
            }
        }
        
        /// <remarks/>
        public int PropertyID7 {
            get {
                return this.propertyID7Field;
            }
            set {
                this.propertyID7Field = value;
            }
        }
        
        /// <remarks/>
        public int PropertyID6 {
            get {
                return this.propertyID6Field;
            }
            set {
                this.propertyID6Field = value;
            }
        }
        
        /// <remarks/>
        public int PropertyID5 {
            get {
                return this.propertyID5Field;
            }
            set {
                this.propertyID5Field = value;
            }
        }
        
        /// <remarks/>
        public int PropertyID4 {
            get {
                return this.propertyID4Field;
            }
            set {
                this.propertyID4Field = value;
            }
        }
        
        /// <remarks/>
        public int PropertyID3 {
            get {
                return this.propertyID3Field;
            }
            set {
                this.propertyID3Field = value;
            }
        }
        
        /// <remarks/>
        public int PropertyID2 {
            get {
                return this.propertyID2Field;
            }
            set {
                this.propertyID2Field = value;
            }
        }
        
        /// <remarks/>
        public int PropertyID1 {
            get {
                return this.propertyID1Field;
            }
            set {
                this.propertyID1Field = value;
            }
        }
        
        /// <remarks/>
        public int Link_Page_ID {
            get {
                return this.link_Page_IDField;
            }
            set {
                this.link_Page_IDField = value;
            }
        }
        
        /// <remarks/>
        public string Title {
            get {
                return this.titleField;
            }
            set {
                this.titleField = value;
            }
        }
        
        /// <remarks/>
        public int Client_ID {
            get {
                return this.client_IDField;
            }
            set {
                this.client_IDField = value;
            }
        }
        
        /// <remarks/>
        public int ID {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18046")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://metroeguide.net/MEGService")]
    public partial class Property_Listing {
        
        private string titleField;
        
        private string photo_URLField;
        
        private string map_URLField;
        
        private string map_titleField;
        
        private string property_InfoField;
        
        private string listing_URLField;
        
        private string property_AddressField;
        
        private int idField;
        
        /// <remarks/>
        public string Title {
            get {
                return this.titleField;
            }
            set {
                this.titleField = value;
            }
        }
        
        /// <remarks/>
        public string Photo_URL {
            get {
                return this.photo_URLField;
            }
            set {
                this.photo_URLField = value;
            }
        }
        
        /// <remarks/>
        public string Map_URL {
            get {
                return this.map_URLField;
            }
            set {
                this.map_URLField = value;
            }
        }
        
        /// <remarks/>
        public string Map_title {
            get {
                return this.map_titleField;
            }
            set {
                this.map_titleField = value;
            }
        }
        
        /// <remarks/>
        public string Property_Info {
            get {
                return this.property_InfoField;
            }
            set {
                this.property_InfoField = value;
            }
        }
        
        /// <remarks/>
        public string Listing_URL {
            get {
                return this.listing_URLField;
            }
            set {
                this.listing_URLField = value;
            }
        }
        
        /// <remarks/>
        public string Property_Address {
            get {
                return this.property_AddressField;
            }
            set {
                this.property_AddressField = value;
            }
        }
        
        /// <remarks/>
        public int ID {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18046")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://metroeguide.net/MEGService")]
    public partial class Contact_Page_Staff_Members {
        
        private string photo_URLField;
        
        private string textField;
        
        private string phone_2Field;
        
        private string phone_1Field;
        
        private string email_LinkField;
        
        private string email_NameField;
        
        private string nameField;
        
        private int idField;
        
        /// <remarks/>
        public string Photo_URL {
            get {
                return this.photo_URLField;
            }
            set {
                this.photo_URLField = value;
            }
        }
        
        /// <remarks/>
        public string Text {
            get {
                return this.textField;
            }
            set {
                this.textField = value;
            }
        }
        
        /// <remarks/>
        public string Phone_2 {
            get {
                return this.phone_2Field;
            }
            set {
                this.phone_2Field = value;
            }
        }
        
        /// <remarks/>
        public string Phone_1 {
            get {
                return this.phone_1Field;
            }
            set {
                this.phone_1Field = value;
            }
        }
        
        /// <remarks/>
        public string Email_Link {
            get {
                return this.email_LinkField;
            }
            set {
                this.email_LinkField = value;
            }
        }
        
        /// <remarks/>
        public string Email_Name {
            get {
                return this.email_NameField;
            }
            set {
                this.email_NameField = value;
            }
        }
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public int ID {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18046")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://metroeguide.net/MEGService")]
    public partial class Page {
        
        private string extra_HTMLField;
        
        private string canonical_URLField;
        
        private string footer_HTMLField;
        
        private string metaKeysField;
        
        private string metaDescField;
        
        private bool auto_OrderingField;
        
        private string titleField;
        
        private int folder_IDField;
        
        private int idField;
        
        private string routeField;
        
        /// <remarks/>
        public string Extra_HTML {
            get {
                return this.extra_HTMLField;
            }
            set {
                this.extra_HTMLField = value;
            }
        }
        
        /// <remarks/>
        public string Canonical_URL {
            get {
                return this.canonical_URLField;
            }
            set {
                this.canonical_URLField = value;
            }
        }
        
        /// <remarks/>
        public string Footer_HTML {
            get {
                return this.footer_HTMLField;
            }
            set {
                this.footer_HTMLField = value;
            }
        }
        
        /// <remarks/>
        public string MetaKeys {
            get {
                return this.metaKeysField;
            }
            set {
                this.metaKeysField = value;
            }
        }
        
        /// <remarks/>
        public string MetaDesc {
            get {
                return this.metaDescField;
            }
            set {
                this.metaDescField = value;
            }
        }
        
        /// <remarks/>
        public bool Auto_Ordering {
            get {
                return this.auto_OrderingField;
            }
            set {
                this.auto_OrderingField = value;
            }
        }
        
        /// <remarks/>
        public string Title {
            get {
                return this.titleField;
            }
            set {
                this.titleField = value;
            }
        }
        
        /// <remarks/>
        public int Folder_ID {
            get {
                return this.folder_IDField;
            }
            set {
                this.folder_IDField = value;
            }
        }
        
        /// <remarks/>
        public int ID {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public string Route {
            get {
                return this.routeField;
            }
            set {
                this.routeField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18046")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://metroeguide.net/MEGService")]
    public partial class Customer_Link_Page {
        
        private int page_IDField;
        
        private int client_IDField;
        
        /// <remarks/>
        public int Page_ID {
            get {
                return this.page_IDField;
            }
            set {
                this.page_IDField = value;
            }
        }
        
        /// <remarks/>
        public int Client_ID {
            get {
                return this.client_IDField;
            }
            set {
                this.client_IDField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18046")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://metroeguide.net/MEGService")]
    public partial class Contact_Page {
        
        private string titleField;
        
        private int staff_10Field;
        
        private int staff_9Field;
        
        private int staff_8Field;
        
        private int staff_7Field;
        
        private int staff_6Field;
        
        private int staff_5Field;
        
        private int staff_4Field;
        
        private int staff_3Field;
        
        private int staff_2Field;
        
        private int staff_1Field;
        
        private int page_IDField;
        
        private int client_IDField;
        
        private int idField;
        
        /// <remarks/>
        public string Title {
            get {
                return this.titleField;
            }
            set {
                this.titleField = value;
            }
        }
        
        /// <remarks/>
        public int Staff_10 {
            get {
                return this.staff_10Field;
            }
            set {
                this.staff_10Field = value;
            }
        }
        
        /// <remarks/>
        public int Staff_9 {
            get {
                return this.staff_9Field;
            }
            set {
                this.staff_9Field = value;
            }
        }
        
        /// <remarks/>
        public int Staff_8 {
            get {
                return this.staff_8Field;
            }
            set {
                this.staff_8Field = value;
            }
        }
        
        /// <remarks/>
        public int Staff_7 {
            get {
                return this.staff_7Field;
            }
            set {
                this.staff_7Field = value;
            }
        }
        
        /// <remarks/>
        public int Staff_6 {
            get {
                return this.staff_6Field;
            }
            set {
                this.staff_6Field = value;
            }
        }
        
        /// <remarks/>
        public int Staff_5 {
            get {
                return this.staff_5Field;
            }
            set {
                this.staff_5Field = value;
            }
        }
        
        /// <remarks/>
        public int Staff_4 {
            get {
                return this.staff_4Field;
            }
            set {
                this.staff_4Field = value;
            }
        }
        
        /// <remarks/>
        public int Staff_3 {
            get {
                return this.staff_3Field;
            }
            set {
                this.staff_3Field = value;
            }
        }
        
        /// <remarks/>
        public int Staff_2 {
            get {
                return this.staff_2Field;
            }
            set {
                this.staff_2Field = value;
            }
        }
        
        /// <remarks/>
        public int Staff_1 {
            get {
                return this.staff_1Field;
            }
            set {
                this.staff_1Field = value;
            }
        }
        
        /// <remarks/>
        public int Page_ID {
            get {
                return this.page_IDField;
            }
            set {
                this.page_IDField = value;
            }
        }
        
        /// <remarks/>
        public int Client_ID {
            get {
                return this.client_IDField;
            }
            set {
                this.client_IDField = value;
            }
        }
        
        /// <remarks/>
        public int ID {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18046")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://metroeguide.net/MEGService")]
    public partial class Information_Page {
        
        private string contentField;
        
        private string titleField;
        
        private int client_IDField;
        
        private int idField;
        
        /// <remarks/>
        public string Content {
            get {
                return this.contentField;
            }
            set {
                this.contentField = value;
            }
        }
        
        /// <remarks/>
        public string Title {
            get {
                return this.titleField;
            }
            set {
                this.titleField = value;
            }
        }
        
        /// <remarks/>
        public int Client_ID {
            get {
                return this.client_IDField;
            }
            set {
                this.client_IDField = value;
            }
        }
        
        /// <remarks/>
        public int ID {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18046")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://metroeguide.net/MEGService")]
    public partial class Link {
        
        private string targetField;
        
        private int positionField;
        
        private string uRLField;
        
        private string titleField;
        
        private bool isLinkField;
        
        private int pageIDField;
        
        private int idField;
        
        /// <remarks/>
        public string Target {
            get {
                return this.targetField;
            }
            set {
                this.targetField = value;
            }
        }
        
        /// <remarks/>
        public int Position {
            get {
                return this.positionField;
            }
            set {
                this.positionField = value;
            }
        }
        
        /// <remarks/>
        public string URL {
            get {
                return this.uRLField;
            }
            set {
                this.uRLField = value;
            }
        }
        
        /// <remarks/>
        public string Title {
            get {
                return this.titleField;
            }
            set {
                this.titleField = value;
            }
        }
        
        /// <remarks/>
        public bool IsLink {
            get {
                return this.isLinkField;
            }
            set {
                this.isLinkField = value;
            }
        }
        
        /// <remarks/>
        public int PageID {
            get {
                return this.pageIDField;
            }
            set {
                this.pageIDField = value;
            }
        }
        
        /// <remarks/>
        public int ID {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18046")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://metroeguide.net/MEGService")]
    public partial class menuLink {
        
        private int positionField;
        
        private string uRLField;
        
        private string menu_URLField;
        
        private bool opens_New_WindowField;
        
        private string titleField;
        
        private int folder_IDField;
        
        private int idField;
        
        /// <remarks/>
        public int Position {
            get {
                return this.positionField;
            }
            set {
                this.positionField = value;
            }
        }
        
        /// <remarks/>
        public string URL {
            get {
                return this.uRLField;
            }
            set {
                this.uRLField = value;
            }
        }
        
        /// <remarks/>
        public string Menu_URL {
            get {
                return this.menu_URLField;
            }
            set {
                this.menu_URLField = value;
            }
        }
        
        /// <remarks/>
        public bool Opens_New_Window {
            get {
                return this.opens_New_WindowField;
            }
            set {
                this.opens_New_WindowField = value;
            }
        }
        
        /// <remarks/>
        public string Title {
            get {
                return this.titleField;
            }
            set {
                this.titleField = value;
            }
        }
        
        /// <remarks/>
        public int Folder_ID {
            get {
                return this.folder_IDField;
            }
            set {
                this.folder_IDField = value;
            }
        }
        
        /// <remarks/>
        public int ID {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18046")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://metroeguide.net/MEGService")]
    public partial class MenuLinks {
        
        private string background_Bar_URLField;
        
        private int positionField;
        
        private string menuURLField;
        
        private string uRLField;
        
        private bool opens_New_WindowField;
        
        private string titleField;
        
        private int folderIDField;
        
        private int idField;
        
        /// <remarks/>
        public string Background_Bar_URL {
            get {
                return this.background_Bar_URLField;
            }
            set {
                this.background_Bar_URLField = value;
            }
        }
        
        /// <remarks/>
        public int Position {
            get {
                return this.positionField;
            }
            set {
                this.positionField = value;
            }
        }
        
        /// <remarks/>
        public string MenuURL {
            get {
                return this.menuURLField;
            }
            set {
                this.menuURLField = value;
            }
        }
        
        /// <remarks/>
        public string URL {
            get {
                return this.uRLField;
            }
            set {
                this.uRLField = value;
            }
        }
        
        /// <remarks/>
        public bool Opens_New_Window {
            get {
                return this.opens_New_WindowField;
            }
            set {
                this.opens_New_WindowField = value;
            }
        }
        
        /// <remarks/>
        public string Title {
            get {
                return this.titleField;
            }
            set {
                this.titleField = value;
            }
        }
        
        /// <remarks/>
        public int FolderID {
            get {
                return this.folderIDField;
            }
            set {
                this.folderIDField = value;
            }
        }
        
        /// <remarks/>
        public int ID {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18046")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://metroeguide.net/MEGService")]
    public partial class Home_Page {
        
        private string graphic1_URLField;
        
        private string graphic2_URLField;
        
        private string graphic3_URLField;
        
        private string graphic4_URLField;
        
        private string graphic5_URLField;
        
        private string graphic1_LinkField;
        
        private string graphic2_LinkField;
        
        private string graphic3_LinkField;
        
        private string graphic4_LinkField;
        
        private string graphic5_LinkField;
        
        private string extraField;
        
        private string link1_TitleField;
        
        private string link2_TitleField;
        
        private string link3_TitleField;
        
        private string link4_TitleField;
        
        private string link5_TitleField;
        
        private string link1_URLField;
        
        private string link2_URLField;
        
        private string link3_URLField;
        
        private string link4_URLField;
        
        private string link5_URLField;
        
        private string link1_TargetField;
        
        private string link2_TargetField;
        
        private string link3_TargetField;
        
        private string link4_TargetField;
        
        private string link5_TargetField;
        
        private int daily_EZ_Page_IDField;
        
        private string item_ColorField;
        
        private string active_Item_ColorField;
        
        private string bottom_Right_TargetField;
        
        private string top_Left_HyperlinkField;
        
        private string top_Left_TargetField;
        
        private string bottom_Left_TargetField;
        
        private string bottom_Right_LinkField;
        
        private string bottom_Left_LinkField;
        
        private string bottom_Right_GraphicField;
        
        private string bottom_Left_GraphicField;
        
        private string center_TargetField;
        
        private string web_TargetField;
        
        private string search_Bar_ColorField;
        
        private int idField;
        
        private int client_IDField;
        
        private bool is_Sales_AgentField;
        
        private string top_Left_LogoField;
        
        private string email_DisplayField;
        
        private string email_AddressField;
        
        private string web_DisplayField;
        
        private string web_AddressField;
        
        private bool send_To_FriendField;
        
        private string background_ColorField;
        
        private string left_Side_Background_ColorField;
        
        private string font_ColorField;
        
        private string border_ColorField;
        
        private string phone_Number1Field;
        
        private string phone_Number2Field;
        
        private string phone_Number3Field;
        
        private string designationsField;
        
        private string sales_Agent_PhotoField;
        
        private string center_GraphicField;
        
        private string center_HyperlinkField;
        
        private string agent_NameField;
        
        /// <remarks/>
        public string Graphic1_URL {
            get {
                return this.graphic1_URLField;
            }
            set {
                this.graphic1_URLField = value;
            }
        }
        
        /// <remarks/>
        public string Graphic2_URL {
            get {
                return this.graphic2_URLField;
            }
            set {
                this.graphic2_URLField = value;
            }
        }
        
        /// <remarks/>
        public string Graphic3_URL {
            get {
                return this.graphic3_URLField;
            }
            set {
                this.graphic3_URLField = value;
            }
        }
        
        /// <remarks/>
        public string Graphic4_URL {
            get {
                return this.graphic4_URLField;
            }
            set {
                this.graphic4_URLField = value;
            }
        }
        
        /// <remarks/>
        public string Graphic5_URL {
            get {
                return this.graphic5_URLField;
            }
            set {
                this.graphic5_URLField = value;
            }
        }
        
        /// <remarks/>
        public string Graphic1_Link {
            get {
                return this.graphic1_LinkField;
            }
            set {
                this.graphic1_LinkField = value;
            }
        }
        
        /// <remarks/>
        public string Graphic2_Link {
            get {
                return this.graphic2_LinkField;
            }
            set {
                this.graphic2_LinkField = value;
            }
        }
        
        /// <remarks/>
        public string Graphic3_Link {
            get {
                return this.graphic3_LinkField;
            }
            set {
                this.graphic3_LinkField = value;
            }
        }
        
        /// <remarks/>
        public string Graphic4_Link {
            get {
                return this.graphic4_LinkField;
            }
            set {
                this.graphic4_LinkField = value;
            }
        }
        
        /// <remarks/>
        public string Graphic5_Link {
            get {
                return this.graphic5_LinkField;
            }
            set {
                this.graphic5_LinkField = value;
            }
        }
        
        /// <remarks/>
        public string Extra {
            get {
                return this.extraField;
            }
            set {
                this.extraField = value;
            }
        }
        
        /// <remarks/>
        public string link1_Title {
            get {
                return this.link1_TitleField;
            }
            set {
                this.link1_TitleField = value;
            }
        }
        
        /// <remarks/>
        public string link2_Title {
            get {
                return this.link2_TitleField;
            }
            set {
                this.link2_TitleField = value;
            }
        }
        
        /// <remarks/>
        public string link3_Title {
            get {
                return this.link3_TitleField;
            }
            set {
                this.link3_TitleField = value;
            }
        }
        
        /// <remarks/>
        public string link4_Title {
            get {
                return this.link4_TitleField;
            }
            set {
                this.link4_TitleField = value;
            }
        }
        
        /// <remarks/>
        public string link5_Title {
            get {
                return this.link5_TitleField;
            }
            set {
                this.link5_TitleField = value;
            }
        }
        
        /// <remarks/>
        public string link1_URL {
            get {
                return this.link1_URLField;
            }
            set {
                this.link1_URLField = value;
            }
        }
        
        /// <remarks/>
        public string link2_URL {
            get {
                return this.link2_URLField;
            }
            set {
                this.link2_URLField = value;
            }
        }
        
        /// <remarks/>
        public string link3_URL {
            get {
                return this.link3_URLField;
            }
            set {
                this.link3_URLField = value;
            }
        }
        
        /// <remarks/>
        public string link4_URL {
            get {
                return this.link4_URLField;
            }
            set {
                this.link4_URLField = value;
            }
        }
        
        /// <remarks/>
        public string link5_URL {
            get {
                return this.link5_URLField;
            }
            set {
                this.link5_URLField = value;
            }
        }
        
        /// <remarks/>
        public string link1_Target {
            get {
                return this.link1_TargetField;
            }
            set {
                this.link1_TargetField = value;
            }
        }
        
        /// <remarks/>
        public string link2_Target {
            get {
                return this.link2_TargetField;
            }
            set {
                this.link2_TargetField = value;
            }
        }
        
        /// <remarks/>
        public string link3_Target {
            get {
                return this.link3_TargetField;
            }
            set {
                this.link3_TargetField = value;
            }
        }
        
        /// <remarks/>
        public string link4_Target {
            get {
                return this.link4_TargetField;
            }
            set {
                this.link4_TargetField = value;
            }
        }
        
        /// <remarks/>
        public string link5_Target {
            get {
                return this.link5_TargetField;
            }
            set {
                this.link5_TargetField = value;
            }
        }
        
        /// <remarks/>
        public int Daily_EZ_Page_ID {
            get {
                return this.daily_EZ_Page_IDField;
            }
            set {
                this.daily_EZ_Page_IDField = value;
            }
        }
        
        /// <remarks/>
        public string Item_Color {
            get {
                return this.item_ColorField;
            }
            set {
                this.item_ColorField = value;
            }
        }
        
        /// <remarks/>
        public string Active_Item_Color {
            get {
                return this.active_Item_ColorField;
            }
            set {
                this.active_Item_ColorField = value;
            }
        }
        
        /// <remarks/>
        public string Bottom_Right_Target {
            get {
                return this.bottom_Right_TargetField;
            }
            set {
                this.bottom_Right_TargetField = value;
            }
        }
        
        /// <remarks/>
        public string Top_Left_Hyperlink {
            get {
                return this.top_Left_HyperlinkField;
            }
            set {
                this.top_Left_HyperlinkField = value;
            }
        }
        
        /// <remarks/>
        public string Top_Left_Target {
            get {
                return this.top_Left_TargetField;
            }
            set {
                this.top_Left_TargetField = value;
            }
        }
        
        /// <remarks/>
        public string Bottom_Left_Target {
            get {
                return this.bottom_Left_TargetField;
            }
            set {
                this.bottom_Left_TargetField = value;
            }
        }
        
        /// <remarks/>
        public string Bottom_Right_Link {
            get {
                return this.bottom_Right_LinkField;
            }
            set {
                this.bottom_Right_LinkField = value;
            }
        }
        
        /// <remarks/>
        public string Bottom_Left_Link {
            get {
                return this.bottom_Left_LinkField;
            }
            set {
                this.bottom_Left_LinkField = value;
            }
        }
        
        /// <remarks/>
        public string Bottom_Right_Graphic {
            get {
                return this.bottom_Right_GraphicField;
            }
            set {
                this.bottom_Right_GraphicField = value;
            }
        }
        
        /// <remarks/>
        public string Bottom_Left_Graphic {
            get {
                return this.bottom_Left_GraphicField;
            }
            set {
                this.bottom_Left_GraphicField = value;
            }
        }
        
        /// <remarks/>
        public string Center_Target {
            get {
                return this.center_TargetField;
            }
            set {
                this.center_TargetField = value;
            }
        }
        
        /// <remarks/>
        public string Web_Target {
            get {
                return this.web_TargetField;
            }
            set {
                this.web_TargetField = value;
            }
        }
        
        /// <remarks/>
        public string Search_Bar_Color {
            get {
                return this.search_Bar_ColorField;
            }
            set {
                this.search_Bar_ColorField = value;
            }
        }
        
        /// <remarks/>
        public int ID {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public int Client_ID {
            get {
                return this.client_IDField;
            }
            set {
                this.client_IDField = value;
            }
        }
        
        /// <remarks/>
        public bool Is_Sales_Agent {
            get {
                return this.is_Sales_AgentField;
            }
            set {
                this.is_Sales_AgentField = value;
            }
        }
        
        /// <remarks/>
        public string Top_Left_Logo {
            get {
                return this.top_Left_LogoField;
            }
            set {
                this.top_Left_LogoField = value;
            }
        }
        
        /// <remarks/>
        public string Email_Display {
            get {
                return this.email_DisplayField;
            }
            set {
                this.email_DisplayField = value;
            }
        }
        
        /// <remarks/>
        public string Email_Address {
            get {
                return this.email_AddressField;
            }
            set {
                this.email_AddressField = value;
            }
        }
        
        /// <remarks/>
        public string Web_Display {
            get {
                return this.web_DisplayField;
            }
            set {
                this.web_DisplayField = value;
            }
        }
        
        /// <remarks/>
        public string Web_Address {
            get {
                return this.web_AddressField;
            }
            set {
                this.web_AddressField = value;
            }
        }
        
        /// <remarks/>
        public bool Send_To_Friend {
            get {
                return this.send_To_FriendField;
            }
            set {
                this.send_To_FriendField = value;
            }
        }
        
        /// <remarks/>
        public string Background_Color {
            get {
                return this.background_ColorField;
            }
            set {
                this.background_ColorField = value;
            }
        }
        
        /// <remarks/>
        public string Left_Side_Background_Color {
            get {
                return this.left_Side_Background_ColorField;
            }
            set {
                this.left_Side_Background_ColorField = value;
            }
        }
        
        /// <remarks/>
        public string Font_Color {
            get {
                return this.font_ColorField;
            }
            set {
                this.font_ColorField = value;
            }
        }
        
        /// <remarks/>
        public string Border_Color {
            get {
                return this.border_ColorField;
            }
            set {
                this.border_ColorField = value;
            }
        }
        
        /// <remarks/>
        public string Phone_Number1 {
            get {
                return this.phone_Number1Field;
            }
            set {
                this.phone_Number1Field = value;
            }
        }
        
        /// <remarks/>
        public string Phone_Number2 {
            get {
                return this.phone_Number2Field;
            }
            set {
                this.phone_Number2Field = value;
            }
        }
        
        /// <remarks/>
        public string Phone_Number3 {
            get {
                return this.phone_Number3Field;
            }
            set {
                this.phone_Number3Field = value;
            }
        }
        
        /// <remarks/>
        public string Designations {
            get {
                return this.designationsField;
            }
            set {
                this.designationsField = value;
            }
        }
        
        /// <remarks/>
        public string Sales_Agent_Photo {
            get {
                return this.sales_Agent_PhotoField;
            }
            set {
                this.sales_Agent_PhotoField = value;
            }
        }
        
        /// <remarks/>
        public string Center_Graphic {
            get {
                return this.center_GraphicField;
            }
            set {
                this.center_GraphicField = value;
            }
        }
        
        /// <remarks/>
        public string Center_Hyperlink {
            get {
                return this.center_HyperlinkField;
            }
            set {
                this.center_HyperlinkField = value;
            }
        }
        
        /// <remarks/>
        public string Agent_Name {
            get {
                return this.agent_NameField;
            }
            set {
                this.agent_NameField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18046")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://metroeguide.net/MEGService")]
    public partial class JetnettMessage {
        
        private int idField;
        
        private string toField;
        
        private string fromField;
        
        private System.DateTime dateField;
        
        private string messageField;
        
        private bool readField;
        
        private string subjectField;
        
        private bool attachmentField;
        
        private string attachmentURLField;
        
        private string saveAsField;
        
        /// <remarks/>
        public int ID {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public string To {
            get {
                return this.toField;
            }
            set {
                this.toField = value;
            }
        }
        
        /// <remarks/>
        public string From {
            get {
                return this.fromField;
            }
            set {
                this.fromField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime Date {
            get {
                return this.dateField;
            }
            set {
                this.dateField = value;
            }
        }
        
        /// <remarks/>
        public string Message {
            get {
                return this.messageField;
            }
            set {
                this.messageField = value;
            }
        }
        
        /// <remarks/>
        public bool Read {
            get {
                return this.readField;
            }
            set {
                this.readField = value;
            }
        }
        
        /// <remarks/>
        public string Subject {
            get {
                return this.subjectField;
            }
            set {
                this.subjectField = value;
            }
        }
        
        /// <remarks/>
        public bool Attachment {
            get {
                return this.attachmentField;
            }
            set {
                this.attachmentField = value;
            }
        }
        
        /// <remarks/>
        public string AttachmentURL {
            get {
                return this.attachmentURLField;
            }
            set {
                this.attachmentURLField = value;
            }
        }
        
        /// <remarks/>
        public string SaveAs {
            get {
                return this.saveAsField;
            }
            set {
                this.saveAsField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18046")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://metroeguide.net/MEGService")]
    public partial class CustomerMessage {
        
        private bool messageReadField;
        
        private string saveAsField;
        
        private string attachmentURLField;
        
        private bool isAttachmentField;
        
        private string subjectField;
        
        private string messageField;
        
        private System.DateTime dateSentField;
        
        private bool inFolderField;
        
        private bool clientSentField;
        
        private int endUserIDField;
        
        private int clientIDField;
        
        private int idField;
        
        /// <remarks/>
        public bool MessageRead {
            get {
                return this.messageReadField;
            }
            set {
                this.messageReadField = value;
            }
        }
        
        /// <remarks/>
        public string SaveAs {
            get {
                return this.saveAsField;
            }
            set {
                this.saveAsField = value;
            }
        }
        
        /// <remarks/>
        public string AttachmentURL {
            get {
                return this.attachmentURLField;
            }
            set {
                this.attachmentURLField = value;
            }
        }
        
        /// <remarks/>
        public bool IsAttachment {
            get {
                return this.isAttachmentField;
            }
            set {
                this.isAttachmentField = value;
            }
        }
        
        /// <remarks/>
        public string Subject {
            get {
                return this.subjectField;
            }
            set {
                this.subjectField = value;
            }
        }
        
        /// <remarks/>
        public string Message {
            get {
                return this.messageField;
            }
            set {
                this.messageField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime DateSent {
            get {
                return this.dateSentField;
            }
            set {
                this.dateSentField = value;
            }
        }
        
        /// <remarks/>
        public bool InFolder {
            get {
                return this.inFolderField;
            }
            set {
                this.inFolderField = value;
            }
        }
        
        /// <remarks/>
        public bool ClientSent {
            get {
                return this.clientSentField;
            }
            set {
                this.clientSentField = value;
            }
        }
        
        /// <remarks/>
        public int EndUserID {
            get {
                return this.endUserIDField;
            }
            set {
                this.endUserIDField = value;
            }
        }
        
        /// <remarks/>
        public int ClientID {
            get {
                return this.clientIDField;
            }
            set {
                this.clientIDField = value;
            }
        }
        
        /// <remarks/>
        public int ID {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18046")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://metroeguide.net/MEGService")]
    public partial class ClassificationGroup {
        
        private int idField;
        
        private string groupNameField;
        
        private int clientIDField;
        
        /// <remarks/>
        public int ID {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public string GroupName {
            get {
                return this.groupNameField;
            }
            set {
                this.groupNameField = value;
            }
        }
        
        /// <remarks/>
        public int ClientID {
            get {
                return this.clientIDField;
            }
            set {
                this.clientIDField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18046")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://metroeguide.net/MEGService")]
    public partial class Metro_eGuide {
        
        private string regIDField;
        
        private string xML_URLField;
        
        private string desktop_XML_URLField;
        
        private string heading_1_ActionField;
        
        private string heading_2_ActionField;
        
        private string heading_3_ActionField;
        
        private string footer_1_ActionField;
        
        private string footer_2_ActionField;
        
        private string footer_3_ActionField;
        
        private string index_URLField;
        
        private string custom_Google_CodeField;
        
        private int idField;
        
        private string regIDField1;
        
        private int clientIDField;
        
        private string notificationEmailField;
        
        private string targetPageField;
        
        private int adGroupField;
        
        private string updateWebpageField;
        
        private string titleField;
        
        private string leftGraphicLinkField;
        
        private string rightGraphicLinkField;
        
        private int searchFolder1Field;
        
        private int searchFolder2Field;
        
        private int searchFolder3Field;
        
        private int abandon_Client_IDField;
        
        private string search_FoldersField;
        
        /// <remarks/>
        public string regID {
            get {
                return this.regIDField;
            }
            set {
                this.regIDField = value;
            }
        }
        
        /// <remarks/>
        public string XML_URL {
            get {
                return this.xML_URLField;
            }
            set {
                this.xML_URLField = value;
            }
        }
        
        /// <remarks/>
        public string Desktop_XML_URL {
            get {
                return this.desktop_XML_URLField;
            }
            set {
                this.desktop_XML_URLField = value;
            }
        }
        
        /// <remarks/>
        public string Heading_1_Action {
            get {
                return this.heading_1_ActionField;
            }
            set {
                this.heading_1_ActionField = value;
            }
        }
        
        /// <remarks/>
        public string Heading_2_Action {
            get {
                return this.heading_2_ActionField;
            }
            set {
                this.heading_2_ActionField = value;
            }
        }
        
        /// <remarks/>
        public string Heading_3_Action {
            get {
                return this.heading_3_ActionField;
            }
            set {
                this.heading_3_ActionField = value;
            }
        }
        
        /// <remarks/>
        public string Footer_1_Action {
            get {
                return this.footer_1_ActionField;
            }
            set {
                this.footer_1_ActionField = value;
            }
        }
        
        /// <remarks/>
        public string Footer_2_Action {
            get {
                return this.footer_2_ActionField;
            }
            set {
                this.footer_2_ActionField = value;
            }
        }
        
        /// <remarks/>
        public string Footer_3_Action {
            get {
                return this.footer_3_ActionField;
            }
            set {
                this.footer_3_ActionField = value;
            }
        }
        
        /// <remarks/>
        public string Index_URL {
            get {
                return this.index_URLField;
            }
            set {
                this.index_URLField = value;
            }
        }
        
        /// <remarks/>
        public string Custom_Google_Code {
            get {
                return this.custom_Google_CodeField;
            }
            set {
                this.custom_Google_CodeField = value;
            }
        }
        
        /// <remarks/>
        public int ID {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public string RegID {
            get {
                return this.regIDField1;
            }
            set {
                this.regIDField1 = value;
            }
        }
        
        /// <remarks/>
        public int ClientID {
            get {
                return this.clientIDField;
            }
            set {
                this.clientIDField = value;
            }
        }
        
        /// <remarks/>
        public string NotificationEmail {
            get {
                return this.notificationEmailField;
            }
            set {
                this.notificationEmailField = value;
            }
        }
        
        /// <remarks/>
        public string TargetPage {
            get {
                return this.targetPageField;
            }
            set {
                this.targetPageField = value;
            }
        }
        
        /// <remarks/>
        public int AdGroup {
            get {
                return this.adGroupField;
            }
            set {
                this.adGroupField = value;
            }
        }
        
        /// <remarks/>
        public string UpdateWebpage {
            get {
                return this.updateWebpageField;
            }
            set {
                this.updateWebpageField = value;
            }
        }
        
        /// <remarks/>
        public string Title {
            get {
                return this.titleField;
            }
            set {
                this.titleField = value;
            }
        }
        
        /// <remarks/>
        public string LeftGraphicLink {
            get {
                return this.leftGraphicLinkField;
            }
            set {
                this.leftGraphicLinkField = value;
            }
        }
        
        /// <remarks/>
        public string RightGraphicLink {
            get {
                return this.rightGraphicLinkField;
            }
            set {
                this.rightGraphicLinkField = value;
            }
        }
        
        /// <remarks/>
        public int SearchFolder1 {
            get {
                return this.searchFolder1Field;
            }
            set {
                this.searchFolder1Field = value;
            }
        }
        
        /// <remarks/>
        public int SearchFolder2 {
            get {
                return this.searchFolder2Field;
            }
            set {
                this.searchFolder2Field = value;
            }
        }
        
        /// <remarks/>
        public int SearchFolder3 {
            get {
                return this.searchFolder3Field;
            }
            set {
                this.searchFolder3Field = value;
            }
        }
        
        /// <remarks/>
        public int Abandon_Client_ID {
            get {
                return this.abandon_Client_IDField;
            }
            set {
                this.abandon_Client_IDField = value;
            }
        }
        
        /// <remarks/>
        public string Search_Folders {
            get {
                return this.search_FoldersField;
            }
            set {
                this.search_FoldersField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void DeleteMEG_ContactCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void UpdateMEG_PrimaryCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void MEGCodeExistsCompletedEventHandler(object sender, MEGCodeExistsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MEGCodeExistsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal MEGCodeExistsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void InsertMEGCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void UpdateMEGCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetClassificationGroupCompletedEventHandler(object sender, GetClassificationGroupCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetClassificationGroupCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetClassificationGroupCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ClassificationGroup Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ClassificationGroup)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetAllClassificationGroupsCompletedEventHandler(object sender, GetAllClassificationGroupsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAllClassificationGroupsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAllClassificationGroupsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ClassificationGroup[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ClassificationGroup[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void AddClassificationGroupCompletedEventHandler(object sender, AddClassificationGroupCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddClassificationGroupCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddClassificationGroupCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetCustomerMessageCompletedEventHandler(object sender, GetCustomerMessageCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCustomerMessageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCustomerMessageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CustomerMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CustomerMessage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetCustomerMessagesByClientIDCompletedEventHandler(object sender, GetCustomerMessagesByClientIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCustomerMessagesByClientIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCustomerMessagesByClientIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CustomerMessage[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CustomerMessage[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void UpdateCustomerMessageCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void DeleteCustomerMessageCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void AddCustomerMessageCompletedEventHandler(object sender, AddCustomerMessageCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddCustomerMessageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddCustomerMessageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetJetnettMessageCompletedEventHandler(object sender, GetJetnettMessageCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetJetnettMessageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetJetnettMessageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public JetnettMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((JetnettMessage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void UpdateJetnettMessageCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetSentMessagesByClientIDCompletedEventHandler(object sender, GetSentMessagesByClientIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSentMessagesByClientIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSentMessagesByClientIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public JetnettMessage[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((JetnettMessage[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetInboxByClientIDCompletedEventHandler(object sender, GetInboxByClientIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetInboxByClientIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetInboxByClientIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public JetnettMessage[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((JetnettMessage[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetMessagesCountCompletedEventHandler(object sender, GetMessagesCountCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMessagesCountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMessagesCountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void DeleteJetnettMessageCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void AddJetnettMessageCompletedEventHandler(object sender, AddJetnettMessageCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddJetnettMessageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddJetnettMessageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void UpdateBottomRightGraphicCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void UpdateBottomLeftGraphicCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetHomePageByClientIDCompletedEventHandler(object sender, GetHomePageByClientIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetHomePageByClientIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetHomePageByClientIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Home_Page Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Home_Page)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void InsertHomePageCompletedEventHandler(object sender, InsertHomePageCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InsertHomePageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InsertHomePageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void UpdateHomePageCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetMenuLinksByFolderCompletedEventHandler(object sender, GetMenuLinksByFolderCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMenuLinksByFolderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMenuLinksByFolderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public MenuLinks[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((MenuLinks[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetMenuLinksCompletedEventHandler(object sender, GetMenuLinksCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMenuLinksCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMenuLinksCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public menuLink[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((menuLink[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetMenuLinkCompletedEventHandler(object sender, GetMenuLinkCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMenuLinkCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMenuLinkCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public MenuLinks Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((MenuLinks)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void CopyFolderToNewClientCompletedEventHandler(object sender, CopyFolderToNewClientCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CopyFolderToNewClientCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CopyFolderToNewClientCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void UpdateMenuLinkCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void DeleteMenuLinkCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void InsertMenuLink1CompletedEventHandler(object sender, InsertMenuLink1CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InsertMenuLink1CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InsertMenuLink1CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void InsertMenuFolderAndClientCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetMenuFolderFromClientCompletedEventHandler(object sender, GetMenuFolderFromClientCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMenuFolderFromClientCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMenuFolderFromClientCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void UpdateMenuFolderFromClientCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetAllMenuLinksCompletedEventHandler(object sender, GetAllMenuLinksCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAllMenuLinksCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAllMenuLinksCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public menuLink[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((menuLink[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void InsertMenuLinkCompletedEventHandler(object sender, InsertMenuLinkCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InsertMenuLinkCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InsertMenuLinkCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetLinksContainingURLCompletedEventHandler(object sender, GetLinksContainingURLCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetLinksContainingURLCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetLinksContainingURLCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Link[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Link[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetLinksFromPageCompletedEventHandler(object sender, GetLinksFromPageCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetLinksFromPageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetLinksFromPageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Link[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Link[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void InsertLinkCompletedEventHandler(object sender, InsertLinkCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InsertLinkCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InsertLinkCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void DeleteLinkCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetLinkCompletedEventHandler(object sender, GetLinkCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetLinkCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetLinkCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Link Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Link)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void UpdateLinkCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void OrganizeLinksByPositionCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetInformationPageCompletedEventHandler(object sender, GetInformationPageCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetInformationPageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetInformationPageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Information_Page Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Information_Page)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void InsertInformationPageCompletedEventHandler(object sender, InsertInformationPageCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InsertInformationPageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InsertInformationPageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void DeleteInformationPageCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void UpdateInformationPageCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetInformationPageByClientIDCompletedEventHandler(object sender, GetInformationPageByClientIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetInformationPageByClientIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetInformationPageByClientIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Information_Page[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Information_Page[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetContactPageCompletedEventHandler(object sender, GetContactPageCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetContactPageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetContactPageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Contact_Page Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Contact_Page)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void InsertContactPageCompletedEventHandler(object sender, InsertContactPageCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InsertContactPageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InsertContactPageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void DeleteContactPageCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void UpdateContactPageCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetContactPagesByClientIDCompletedEventHandler(object sender, GetContactPagesByClientIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetContactPagesByClientIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetContactPagesByClientIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Contact_Page[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Contact_Page[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetCustomerLinkPagesByClientIDCompletedEventHandler(object sender, GetCustomerLinkPagesByClientIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCustomerLinkPagesByClientIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCustomerLinkPagesByClientIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Customer_Link_Page[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Customer_Link_Page[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void InsertCustomerLinkPageCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void DeleteCustomerLinkPageCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void InsertPageCompletedEventHandler(object sender, InsertPageCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InsertPageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InsertPageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetPageCompletedEventHandler(object sender, GetPageCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Page Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Page)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void UpdatePageCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetZipCodeCompletedEventHandler(object sender, GetZipCodeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetZipCodeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetZipCodeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void DeletePageCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetAllPagesCompletedEventHandler(object sender, GetAllPagesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAllPagesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAllPagesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Page[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Page[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetContactPageStaffMemberCompletedEventHandler(object sender, GetContactPageStaffMemberCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetContactPageStaffMemberCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetContactPageStaffMemberCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Contact_Page_Staff_Members Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Contact_Page_Staff_Members)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void InsertContactPageStaffMemberCompletedEventHandler(object sender, InsertContactPageStaffMemberCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InsertContactPageStaffMemberCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InsertContactPageStaffMemberCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void DeleteContactPageStaffMemberCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void UpdateContactPageStaffMemberCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetPropertyListingCompletedEventHandler(object sender, GetPropertyListingCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPropertyListingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPropertyListingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Property_Listing Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Property_Listing)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void InsertPropertyListingCompletedEventHandler(object sender, InsertPropertyListingCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InsertPropertyListingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InsertPropertyListingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void DeletePropertyListingCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void UpdatePropertyListingCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetAvailablePropertiesPageCompletedEventHandler(object sender, GetAvailablePropertiesPageCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAvailablePropertiesPageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAvailablePropertiesPageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Available_Properties_Page Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Available_Properties_Page)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetAvailablePropertiesPagesByClientIDCompletedEventHandler(object sender, GetAvailablePropertiesPagesByClientIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAvailablePropertiesPagesByClientIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAvailablePropertiesPagesByClientIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Available_Properties_Page[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Available_Properties_Page[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void InsertAvailablePropertiesPageCompletedEventHandler(object sender, InsertAvailablePropertiesPageCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InsertAvailablePropertiesPageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InsertAvailablePropertiesPageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void DeleteAvailablePropertiesPageCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void UpdateAvailableProperitesPageCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void ClientManagerUpdateAvailableCompletedEventHandler(object sender, ClientManagerUpdateAvailableCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ClientManagerUpdateAvailableCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ClientManagerUpdateAvailableCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void InsertMEG_SubLicenseCompletedEventHandler(object sender, InsertMEG_SubLicenseCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InsertMEG_SubLicenseCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InsertMEG_SubLicenseCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetMEG_SubLicenseCompletedEventHandler(object sender, GetMEG_SubLicenseCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMEG_SubLicenseCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMEG_SubLicenseCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public MEG_SubLicense[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((MEG_SubLicense[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void DeleteMEG_SubLicenseCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void UpdateMEG_SubLicenseCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void InsertMEG_ContactCompletedEventHandler(object sender, InsertMEG_ContactCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InsertMEG_ContactCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InsertMEG_ContactCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetMEG_ContactCompletedEventHandler(object sender, GetMEG_ContactCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMEG_ContactCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMEG_ContactCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public MEG_Contact Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((MEG_Contact)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void DeleteMEG_PrimaryCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void UpdateMEG_ContactCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void InsertMEG_PrimaryCompletedEventHandler(object sender, InsertMEG_PrimaryCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InsertMEG_PrimaryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InsertMEG_PrimaryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetMEG_PrimaryCompletedEventHandler(object sender, GetMEG_PrimaryCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMEG_PrimaryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMEG_PrimaryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public MEG_Primary Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((MEG_Primary)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void DeleteMLFByFIDCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void DeleteMLFByIDCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetClientIDFromUserFriendlyURLCompletedEventHandler(object sender, GetClientIDFromUserFriendlyURLCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetClientIDFromUserFriendlyURLCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetClientIDFromUserFriendlyURLCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetPageViewReportsCompletedEventHandler(object sender, GetPageViewReportsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPageViewReportsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPageViewReportsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Page_Views[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Page_Views[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void TrackPageViewCompletedEventHandler(object sender, TrackPageViewCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TrackPageViewCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TrackPageViewCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetDailyEZByClientIDCompletedEventHandler(object sender, GetDailyEZByClientIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDailyEZByClientIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDailyEZByClientIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Daily_EZ Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Daily_EZ)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void UpdateDailyEZCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void InsertDailyEZCompletedEventHandler(object sender, InsertDailyEZCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InsertDailyEZCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InsertDailyEZCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetAdSeedCompletedEventHandler(object sender, GetAdSeedCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAdSeedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAdSeedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void UpdateAdSeedCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void DeleteDailyEZCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetSendToFriendByIDCompletedEventHandler(object sender, GetSendToFriendByIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSendToFriendByIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSendToFriendByIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Send_To_Friend Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Send_To_Friend)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetSendToFriendByClientIDCompletedEventHandler(object sender, GetSendToFriendByClientIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSendToFriendByClientIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSendToFriendByClientIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Send_To_Friend Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Send_To_Friend)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void DeleteSendToFriendCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void InsertSendToFriendCompletedEventHandler(object sender, InsertSendToFriendCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InsertSendToFriendCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InsertSendToFriendCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void UpdateSendToFriendCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetMEGv3ByClientIDCompletedEventHandler(object sender, GetMEGv3ByClientIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMEGv3ByClientIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMEGv3ByClientIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public MEG_v3 Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((MEG_v3)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void UpdateMEGv3CompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void InsertMEGv3CompletedEventHandler(object sender, InsertMEGv3CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InsertMEGv3CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InsertMEGv3CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void DeleteMEGv3CompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetResourceFileByIDCompletedEventHandler(object sender, GetResourceFileByIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetResourceFileByIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetResourceFileByIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Resource_File Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Resource_File)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetResourceFileByMD5CompletedEventHandler(object sender, GetResourceFileByMD5CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetResourceFileByMD5CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetResourceFileByMD5CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Resource_File Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Resource_File)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetResourceFilesCompletedEventHandler(object sender, GetResourceFilesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetResourceFilesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetResourceFilesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Resource_File[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Resource_File[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetAllResourceFilesCompletedEventHandler(object sender, GetAllResourceFilesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAllResourceFilesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAllResourceFilesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Resource_File[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Resource_File[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void InsertResourceFileCompletedEventHandler(object sender, InsertResourceFileCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InsertResourceFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InsertResourceFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void DeleteResourceFileCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void UpdateResourceFileCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetJetnettEZEnabledClientsCompletedEventHandler(object sender, GetJetnettEZEnabledClientsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetJetnettEZEnabledClientsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetJetnettEZEnabledClientsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Client[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Client[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void JetnettEZClientEnabledCompletedEventHandler(object sender, JetnettEZClientEnabledCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class JetnettEZClientEnabledCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal JetnettEZClientEnabledCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetFolderPathCompletedEventHandler(object sender, GetFolderPathCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFolderPathCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFolderPathCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetAllFoldersCompletedEventHandler(object sender, GetAllFoldersCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAllFoldersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAllFoldersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Folder[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Folder[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetFolderCompletedEventHandler(object sender, GetFolderCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFolderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFolderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Folder Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Folder)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetFavoritesCompletedEventHandler(object sender, GetFavoritesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFavoritesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFavoritesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public FavLink[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((FavLink[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void SaveFavoritesCompletedEventHandler(object sender, SaveFavoritesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SaveFavoritesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SaveFavoritesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void SaveFavoritesRePositionCompletedEventHandler(object sender, SaveFavoritesRePositionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SaveFavoritesRePositionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SaveFavoritesRePositionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void UpdateFavoriteCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetUsesThisMonthCompletedEventHandler(object sender, GetUsesThisMonthCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUsesThisMonthCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetUsesThisMonthCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetUsesInMonthCompletedEventHandler(object sender, GetUsesInMonthCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUsesInMonthCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetUsesInMonthCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetMonthlyReportCompletedEventHandler(object sender, GetMonthlyReportCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMonthlyReportCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMonthlyReportCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public EndUser[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((EndUser[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void EndUserExistsCompletedEventHandler(object sender, EndUserExistsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class EndUserExistsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal EndUserExistsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void CreateEndUserCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetEndUserIDByEmailCompletedEventHandler(object sender, GetEndUserIDByEmailCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetEndUserIDByEmailCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetEndUserIDByEmailCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetEndUserByEmailCompletedEventHandler(object sender, GetEndUserByEmailCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetEndUserByEmailCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetEndUserByEmailCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public EndUser Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((EndUser)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetEndUserCompletedEventHandler(object sender, GetEndUserCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetEndUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetEndUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public EndUser Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((EndUser)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void UpdateUsesCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetDesktopUsesCompletedEventHandler(object sender, GetDesktopUsesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDesktopUsesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDesktopUsesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void InsertDesktopUseCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetAllEndUsersCompletedEventHandler(object sender, GetAllEndUsersCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAllEndUsersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAllEndUsersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public EndUser[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((EndUser[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void UpdateEndUserCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetEndUsersByClassificationGroupCompletedEventHandler(object sender, GetEndUsersByClassificationGroupCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetEndUsersByClassificationGroupCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetEndUsersByClassificationGroupCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public EndUser[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((EndUser[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void UpdateClientCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void InsertClientCompletedEventHandler(object sender, InsertClientCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InsertClientCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InsertClientCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetClientIDByRegistrationCodeCompletedEventHandler(object sender, GetClientIDByRegistrationCodeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetClientIDByRegistrationCodeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetClientIDByRegistrationCodeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetClientUpdatePageCompletedEventHandler(object sender, GetClientUpdatePageCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetClientUpdatePageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetClientUpdatePageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetClientIDByEndUserEmailCompletedEventHandler(object sender, GetClientIDByEndUserEmailCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetClientIDByEndUserEmailCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetClientIDByEndUserEmailCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetClientUpdateVersionCompletedEventHandler(object sender, GetClientUpdateVersionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetClientUpdateVersionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetClientUpdateVersionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetUpdateScriptCompletedEventHandler(object sender, GetUpdateScriptCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUpdateScriptCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetUpdateScriptCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetClientIDBySubLicenseCodeCompletedEventHandler(object sender, GetClientIDBySubLicenseCodeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetClientIDBySubLicenseCodeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetClientIDBySubLicenseCodeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetTargetURLCompletedEventHandler(object sender, GetTargetURLCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTargetURLCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTargetURLCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetClientByNameAndPasswordCompletedEventHandler(object sender, GetClientByNameAndPasswordCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetClientByNameAndPasswordCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetClientByNameAndPasswordCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Client Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Client)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetClientCompletedEventHandler(object sender, GetClientCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetClientCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetClientCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Client Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Client)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetAllClientsCompletedEventHandler(object sender, GetAllClientsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAllClientsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAllClientsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Client[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Client[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetSubLicenseByTargetURLCompletedEventHandler(object sender, GetSubLicenseByTargetURLCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSubLicenseByTargetURLCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSubLicenseByTargetURLCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public SubLicense Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SubLicense)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetTargetURLByRegIDCompletedEventHandler(object sender, GetTargetURLByRegIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTargetURLByRegIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTargetURLByRegIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetSubLicenseCompletedEventHandler(object sender, GetSubLicenseCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSubLicenseCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSubLicenseCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public SubLicense Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SubLicense)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void InsertSubLicenseCompletedEventHandler(object sender, InsertSubLicenseCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InsertSubLicenseCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InsertSubLicenseCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void DeleteSubLicenseCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void UpdateSubLicenseCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetSubLicenseByClientIDCompletedEventHandler(object sender, GetSubLicenseByClientIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSubLicenseByClientIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSubLicenseByClientIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public SubLicense[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SubLicense[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void SendOptimaNotificationEmailsCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetProductNameCompletedEventHandler(object sender, GetProductNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetProductNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetProductNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void SetProductNameCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void UpdateJetnettEZVersionCompletedEventHandler(object sender, UpdateJetnettEZVersionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateJetnettEZVersionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateJetnettEZVersionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void JetnettEZUpdateAvailCompletedEventHandler(object sender, JetnettEZUpdateAvailCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class JetnettEZUpdateAvailCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal JetnettEZUpdateAvailCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void SetXMLURLCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void SetDesktopXMLURLCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetXMLURLCompletedEventHandler(object sender, GetXMLURLCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetXMLURLCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetXMLURLCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetDesktopXMLURLCompletedEventHandler(object sender, GetDesktopXMLURLCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDesktopXMLURLCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDesktopXMLURLCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetAbandonClientIDCompletedEventHandler(object sender, GetAbandonClientIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAbandonClientIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAbandonClientIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void SendNotificationEmailsCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void CoreUpdateAvailableCompletedEventHandler(object sender, CoreUpdateAvailableCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CoreUpdateAvailableCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CoreUpdateAvailableCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void CoreOptimaUpdateAvailableCompletedEventHandler(object sender, CoreOptimaUpdateAvailableCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CoreOptimaUpdateAvailableCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CoreOptimaUpdateAvailableCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetMEGByClientIDCompletedEventHandler(object sender, GetMEGByClientIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMEGByClientIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMEGByClientIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Metro_eGuide Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Metro_eGuide)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetMEGIDByClientIDCompletedEventHandler(object sender, GetMEGIDByClientIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMEGIDByClientIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMEGIDByClientIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetMEGCompletedEventHandler(object sender, GetMEGCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMEGCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMEGCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Metro_eGuide Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Metro_eGuide)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetTokenCompletedEventHandler(object sender, GetTokenCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTokenCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTokenCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void SearchFoldersCompletedEventHandler(object sender, SearchFoldersCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SearchFoldersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SearchFoldersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public SearchResult[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SearchResult[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void ElevateLinkCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void UnElevateLinkCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void ReplaceAllLinksInPagesCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void RenameFoldersCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetAccessLevelCompletedEventHandler(object sender, GetAccessLevelCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAccessLevelCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAccessLevelCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetAllStacksCompletedEventHandler(object sender, GetAllStacksCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAllStacksCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAllStacksCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Stack[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Stack[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void AddStackCompletedEventHandler(object sender, AddStackCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddStackCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddStackCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void UpdateStackCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetStackCompletedEventHandler(object sender, GetStackCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetStackCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetStackCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Stack Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Stack)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void SuspendLinkCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void UnSuspendLinkCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetBadLinksByTitleAndUrlCompletedEventHandler(object sender, GetBadLinksByTitleAndUrlCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetBadLinksByTitleAndUrlCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetBadLinksByTitleAndUrlCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Bad_Links[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Bad_Links[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetAdAssignmentCompletedEventHandler(object sender, GetAdAssignmentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAdAssignmentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAdAssignmentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Ad_Assignments Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Ad_Assignments)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetAdsModelByAssignmentCompletedEventHandler(object sender, GetAdsModelByAssignmentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAdsModelByAssignmentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAdsModelByAssignmentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Ads_Model Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Ads_Model)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetAdAssignmentsByAdGroupCompletedEventHandler(object sender, GetAdAssignmentsByAdGroupCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAdAssignmentsByAdGroupCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAdAssignmentsByAdGroupCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Ad_Assignments[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Ad_Assignments[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetAdsModelCompletedEventHandler(object sender, GetAdsModelCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAdsModelCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAdsModelCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Ads_Model Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Ads_Model)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetAllAdsModelCompletedEventHandler(object sender, GetAllAdsModelCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAllAdsModelCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAllAdsModelCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Ads_Model[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Ads_Model[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetAdsModelsByAdGroupCompletedEventHandler(object sender, GetAdsModelsByAdGroupCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAdsModelsByAdGroupCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAdsModelsByAdGroupCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Ads_Model[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Ads_Model[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void UserRegisteredCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetLinkCountCompletedEventHandler(object sender, GetLinkCountCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetLinkCountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetLinkCountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetAllLinksByTitleAndURLCompletedEventHandler(object sender, GetAllLinksByTitleAndURLCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAllLinksByTitleAndURLCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAllLinksByTitleAndURLCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Link[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Link[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void LogLinkViewerEventCompletedEventHandler(object sender, LogLinkViewerEventCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LogLinkViewerEventCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LogLinkViewerEventCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetFormattedLatestLogsCompletedEventHandler(object sender, GetFormattedLatestLogsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFormattedLatestLogsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFormattedLatestLogsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void ReplaceAllLinkCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void EmailTrackerCodeExistsCompletedEventHandler(object sender, EmailTrackerCodeExistsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class EmailTrackerCodeExistsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal EmailTrackerCodeExistsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetAllLinkViewerLogsCompletedEventHandler(object sender, GetAllLinkViewerLogsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAllLinkViewerLogsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAllLinkViewerLogsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Link_Viewer_Logs[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Link_Viewer_Logs[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetJetNettEZInformationCenterVersionCompletedEventHandler(object sender, GetJetNettEZInformationCenterVersionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetJetNettEZInformationCenterVersionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetJetNettEZInformationCenterVersionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void InsertSchoolInfoCompletedEventHandler(object sender, InsertSchoolInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InsertSchoolInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InsertSchoolInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetAllSchoolsCompletedEventHandler(object sender, GetAllSchoolsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAllSchoolsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAllSchoolsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public School_Info[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((School_Info[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetSchoolInfoCompletedEventHandler(object sender, GetSchoolInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSchoolInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSchoolInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public School_Info Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((School_Info)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void UpdateSchoolInfoCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void DeleteSchoolInfoCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void SearchFolderCompletedEventHandler(object sender, SearchFolderCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SearchFolderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SearchFolderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public SearchResult[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SearchResult[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void LoginCompletedEventHandler(object sender, LoginCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LoginCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LoginCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void AuthCompletedEventHandler(object sender, AuthCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AuthCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AuthCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void AddURLToLinkCheckerWhitelistCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void DeleteURLFromLinkCheckerWhitelistCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void PurgeOldEntriesFromLinkCheckerWhitelistCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetLinkCheckerWhitelistCompletedEventHandler(object sender, GetLinkCheckerWhitelistCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetLinkCheckerWhitelistCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetLinkCheckerWhitelistCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetBadLinksContainingURLCompletedEventHandler(object sender, GetBadLinksContainingURLCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetBadLinksContainingURLCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetBadLinksContainingURLCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Bad_Links[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Bad_Links[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetBadLinkCompletedEventHandler(object sender, GetBadLinkCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetBadLinkCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetBadLinkCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Bad_Links Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Bad_Links)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetAllBadLinksCompletedEventHandler(object sender, GetAllBadLinksCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAllBadLinksCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAllBadLinksCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Bad_Links[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Bad_Links[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void InsertBadLinkCompletedEventHandler(object sender, InsertBadLinkCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InsertBadLinkCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InsertBadLinkCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void UpdateBadLinkCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void DeleteBadLinkCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void DeleteAdGroupCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void DeleteAdPageRelCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetAdClickReportCompletedEventHandler(object sender, GetAdClickReportCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAdClickReportCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAdClickReportCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Ad_Tracker[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Ad_Tracker[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetAdViewReportCompletedEventHandler(object sender, GetAdViewReportCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAdViewReportCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAdViewReportCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Ad_View_Tracker[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Ad_View_Tracker[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetAllAdPageRelationshipsCompletedEventHandler(object sender, GetAllAdPageRelationshipsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAllAdPageRelationshipsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAllAdPageRelationshipsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Ad_Page_Relationship[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Ad_Page_Relationship[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void TrackAdClickCompletedEventHandler(object sender, TrackAdClickCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TrackAdClickCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TrackAdClickCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void TrackAdViewCompletedEventHandler(object sender, TrackAdViewCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TrackAdViewCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TrackAdViewCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetAdPageRelationshipsByAdGroupCompletedEventHandler(object sender, GetAdPageRelationshipsByAdGroupCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAdPageRelationshipsByAdGroupCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAdPageRelationshipsByAdGroupCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Ad_Page_Relationship[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Ad_Page_Relationship[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetAdPageRelationshipByClientIDAndPageIDCompletedEventHandler(object sender, GetAdPageRelationshipByClientIDAndPageIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAdPageRelationshipByClientIDAndPageIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAdPageRelationshipByClientIDAndPageIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Ad_Page_Relationship Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Ad_Page_Relationship)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetAdPageRelationshipByClientIDOnlyCompletedEventHandler(object sender, GetAdPageRelationshipByClientIDOnlyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAdPageRelationshipByClientIDOnlyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAdPageRelationshipByClientIDOnlyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Ad_Page_Relationship Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Ad_Page_Relationship)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetAdPageRelationshipByPageIDOnlyCompletedEventHandler(object sender, GetAdPageRelationshipByPageIDOnlyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAdPageRelationshipByPageIDOnlyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAdPageRelationshipByPageIDOnlyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Ad_Page_Relationship Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Ad_Page_Relationship)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void InsertAdPageRelationshipCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void IncrementAdGroupSeedCompletedEventHandler(object sender, IncrementAdGroupSeedCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IncrementAdGroupSeedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IncrementAdGroupSeedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetAdGroupCompletedEventHandler(object sender, GetAdGroupCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAdGroupCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAdGroupCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public AdGroup Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((AdGroup)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void UpdateAdGroupCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void InsertAdGroupCompletedEventHandler(object sender, InsertAdGroupCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InsertAdGroupCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InsertAdGroupCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetAllAdGroupsCompletedEventHandler(object sender, GetAllAdGroupsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAllAdGroupsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAllAdGroupsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public AdGroup[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((AdGroup[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetAdPageRelationshipByIDCompletedEventHandler(object sender, GetAdPageRelationshipByIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAdPageRelationshipByIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAdPageRelationshipByIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Ad_Page_Relationship Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Ad_Page_Relationship)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void DeleteAdCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetAdByIDCompletedEventHandler(object sender, GetAdByIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAdByIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAdByIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Ads Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Ads)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetAdsByAdGroupCompletedEventHandler(object sender, GetAdsByAdGroupCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAdsByAdGroupCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAdsByAdGroupCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Ads[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Ads[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetAdsByClientIDCompletedEventHandler(object sender, GetAdsByClientIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAdsByClientIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAdsByClientIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Ads[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Ads[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetAllAdsCompletedEventHandler(object sender, GetAllAdsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAllAdsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAllAdsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Ads[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Ads[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void InsertAdCompletedEventHandler(object sender, InsertAdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InsertAdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InsertAdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void UpdateAdCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void InsertMLFCompletedEventHandler(object sender, InsertMLFCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InsertMLFCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InsertMLFCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void UpdateMLFByFIDCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void InsertMLFAutoCompletedEventHandler(object sender, InsertMLFAutoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InsertMLFAutoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InsertMLFAutoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void UpdateMLFByIDCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetAllMLFCompletedEventHandler(object sender, GetAllMLFCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAllMLFCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAllMLFCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public MenuLink_Folder[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((MenuLink_Folder[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetMLFByFIDCompletedEventHandler(object sender, GetMLFByFIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMLFByFIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMLFByFIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public MenuLink_Folder Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((MenuLink_Folder)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetMLFByIDCompletedEventHandler(object sender, GetMLFByIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMLFByIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMLFByIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public MenuLink_Folder Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((MenuLink_Folder)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591